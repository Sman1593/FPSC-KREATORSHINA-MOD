`====================================================
` Advanced Lighting Functions
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`   #include "Include\Advanced Lighting\Common.dba"
`   #include "Include\Advanced Lighting\Culling\View Frustum Culling.dba"
`   #include "Include\Advanced Lighting\Culling\Occlusion Culling.dba"
`   #include "Include\Advanced Lighting\Camera\Camera.dba"
`   #include "Include\Advanced Lighting\Camera\Post Filter.dba"
`   #include "Include\Advanced Lighting\Lighting\Ambient.dba"
`   #include "Include\Advanced Lighting\Lighting\Fog.dba"
`   #include "Include\Advanced Lighting\Lighting\Directional.dba"
`   #include "Include\Advanced Lighting\Lighting\Spot.dba"
`   #include "Include\Advanced Lighting\Lighting\Point.dba"
`   #include "Include\Advanced Lighting\Reflections\Reflection.dba"
`   #include "Include\Advanced Lighting\Reflections\Sphere Reflection.dba"
`   #include "Include\Advanced Lighting\Reflections\Box Reflection.dba"
`   #include "Include\Advanced Lighting\Effect\Effect.dba"
`   #include "Include\Advanced Lighting\Effect\Alpha Effect.dba"
`   #include "Include\Advanced Lighting\Effect\Water Effect.dba"
`   #include "Include\Advanced Lighting\Object\Object.dba"
`   #include "Include\Advanced Lighting\Object\Alpha Object.dba"
`   #include "Include\Advanced Lighting\Object\Water Object.dba"
`   #include "Include\Advanced Lighting\Object\Level Of Detail.dba"
`   #include "Include\Advanced Lighting\Object\Imposter.dba"
`   #include "Include\Advanced Lighting\Object\Batch.dba"
`   #include "Include\Advanced Lighting\Object\Instance.dba"
`   #include "Include\Advanced Lighting\Sky\Sky.dba"
`   #include "Include\Advanced Lighting\Sky\Clouds.dba"
`   #include "Include\Advanced Lighting\Particles\Particles.dba"
`   #include "Include\Advanced Lighting\Terrain\Terrain.dba"
`   #include "Include\Advanced Lighting\Terrain\Terrain Mesh.dba"
`   #include "Include\Advanced Lighting\Terrain\Ocean.dba"

`----------------------------------------------------
` Advanced Lighting Setup
`----------------------------------------------------
function AdvLighting_Setup(iWidth as integer,iHeight as integer,iMaxHeight as integer,iSpecular as boolean,iSubSurface as boolean,iShadowQuality as integer)
CommonGlobals()

   `Variables
      global AL_Directory as string
      global AL_Version as string
      global AL_WorkingDirectory as string
      global AL_MydocDirectory as string
      global AL_Basic3DDll as integer
      global AL_Timer as float
      global AL_TimerINC as float
      global AL_CameraPos as Vec3Float
      global AL_CameraAng as Vec3Float
      global AL_CameraDir as Vec3Float
      global AL_ViewVec as Vec2Float
      global AL_PostViewVec as Vec3Float
      global AL_HDR as boolean
      global AL_PBR as boolean
      global AL_D3dfmt as integer
      global AL_MotionBlurScale as float
      global AL_FilmGrain as Vec3Float
      global AL_WorldSize as float
      global AL_ShadowQuality as integer
      global AL_FrameRender as integer
      global AL_FinalComposite as integer
      global AL_PostFilter as integer
      global AL_FrameTargetCount as integer
      global AL_RenderTargetCount as integer
      global AL_PostFilterViewVec as Vec2Float
      global AL_Distortion as boolean
      global AL_SSAO as boolean
      global AL_SSR as boolean
      global AL_GodRays as boolean
      global AL_MotionBlur as boolean
      global AL_FXAA as boolean
      global AL_Bloom as boolean
      global AL_LensFlares as boolean
      global AL_DOF as boolean
      global AL_DepthObject as integer
      global AL_DepthEffect as integer
      global AL_ShadowFillObject as integer
      global AL_ShadowFillEffect as integer
      global AL_AmbientLightEffect as integer
      global AL_AmbientLightObject as integer
      global AL_BoxAmbientCount as integer
      global AL_BoxAmbientFreeUp as integer
      global AL_BoxAmbientVisibleCount as integer
      global AL_BoxAmbientVisibleRemove as boolean
      global AL_BoxAmbientBatchCount as integer
      global AL_BoxAmbientActiveCount as integer
      global AL_BoxAmbientActiveObject as integer
      global AL_BoxAmbientActiveIndex as integer
      global AL_BoxAmbientActiveOld as integer
      global AL_BoxAmbientActiveReflection as integer
      global AL_SphereAmbientCount as integer
      global AL_SphereAmbientFreeUp as integer
      global AL_SphereAmbientVisibleCount as integer
      global AL_SphereAmbientVisibleRemove as boolean
      global AL_SphereAmbientBatchCount as integer
      global AL_SphereAmbientActiveCount as integer
      global AL_SphereAmbientActiveObject as integer
      global AL_SphereAmbientActiveIndex as integer
      global AL_SphereAmbientActiveOld as integer
      global AL_SphereAmbientActiveReflection as integer
      global AL_DirLightVisible as boolean
      global AL_DirLightRender as integer
      global AL_DirLightUpdate as boolean
      global AL_DirLightAngle as Vec3Float
      global AL_DirLightPosition as Vec3Float
      global AL_DirLightPositionVSM as Vec3Float
      global AL_DirLightDirectionVSM as Vec3Float
      global AL_DirLightDirection as Vec3Float
      global AL_DirLightPoint as Vec2Float
      global AL_DirLightColor as Vec3Float
      global AL_DirLightIntensity as float
      global AL_DirLightRange as Vec4Float
      global AL_DirLightSpecular as integer
      global AL_DirLightSubSurface as integer
      global AL_DirShadowSize as float
      global AL_SpotLightCount as integer
      global AL_SpotLightFreeUp as integer
      global AL_SpotLightSpecular as integer
      global AL_SpotLightBatchCount as integer
      global AL_SpotLightVisibleCount as integer
      global AL_SpotLightVisibleRemove as boolean
      global AL_SpotLightDrawCount as integer
      global AL_SpotShadowUpdate as integer
      global AL_SpotShadowSize as float
      global AL_PointLightCount as integer
      global AL_PointLightFreeUp as integer
      global AL_PointLightSpecular as integer
      global AL_PointLightBatchCount as integer
      global AL_PointLightVisibleCount as integer
      global AL_PointLightVisibleRemove as boolean
      global AL_PointLightDrawCount as integer
      global AL_PointShadowUpdate as integer
      global AL_PointShadowSize as float
      global AL_ReflectionRender as boolean
      global AL_ReflectionCount as integer
      global AL_ReflectionCapture as integer
      global AL_ReflectionLight as Vec4Float
      global AL_ReflectionLightTransition as float
      global AL_ReflectionTransition as float
      global AL_ReflectionTransitionRate as float
      global AL_BoxReflectionCount as integer
      global AL_BoxReflectionVisibleCount as integer
      global AL_BoxReflectionVisibleRemove as boolean
      global AL_BoxReflectionEffectCount as integer
      global AL_SphereReflectionCount as integer
      global AL_SphereReflectionVisibleCount as integer
      global AL_SphereReflectionVisibleRemove as boolean
      global AL_SphereReflectionEffectCount as integer
      global AL_SetDefineEnabled as boolean
      global AL_SetDefineCount as integer
      global AL_SetDefineLines as integer
      global AL_SetDefineArrayCount as integer
      global AL_SetDefineArrayLines as integer
      global AL_EffectCount as integer
      global AL_EffectFreeUp as integer
      global AL_EffectActiveCount as integer
      global AL_EffectRemove as boolean
      global AL_ObjectCount as integer
      global AL_ObjectFreeUp as integer
      global AL_ObjectActiveCount as integer
      global AL_ObjectRemove as boolean
      global AL_ObjectDynamicCount as integer
      global AL_ObjectDynamicFreeUp as integer
      global AL_ObjectDynamicActiveCount as integer
      global AL_ObjectDynamicRemove as boolean
      global AL_ObjectDynamicMVCount as integer
      global AL_ObjectDynamicTimer as integer
      global AL_ObjectAnimationCount as integer
      global AL_InstanceCount as integer
      global AL_InstanceFreeUp as integer
      global AL_InstanceObjectCount as integer
      global AL_InstanceObjectFreeUp as integer
      global AL_InstanceUpdate as integer
      global AL_AlphaEffectCount as integer
      global AL_AlphaEffectFreeUp as integer
      global AL_AlphaEffectActiveCount as integer
      global AL_AlphaEffectRemove as boolean
      global AL_AlphaLightsUpdate as integer
      global AL_AlphaLightsObj as integer
      global AL_AlphaObjectCount as integer
      global AL_AlphaObjectFreeUp as integer
      global AL_AlphaObjectActiveCount as integer
      global AL_AlphaObjectRemove as boolean
      global AL_StaticBatchCount as integer
      global AL_StaticBatchFreeup as integer
      global AL_StaticBatchObjectCount as integer
      global AL_StaticBatchObjectFreeup as integer
      global AL_StaticBatchVertex as integer
      global AL_BatchObject as integer
      global AL_BatchCount as integer
      global AL_BatchFreeUp as integer
      global AL_BatchDrawCount as integer
      global AL_BatchGroupCount as integer
      global AL_BatchGroupFreeUp as integer
      global AL_BatchPixelCount as integer
      global AL_BatchPixelFreeUp as integer
      global AL_LODUpdate as integer
      global AL_LODUpdateLevel as integer
      global AL_LODObjectCount as integer
      global AL_LODObjectFreeUp as integer
      global AL_LODTransitionCount as integer
      global AL_LODTransition as integer
      global AL_LODTransitionRate as float
      global AL_LODTransitionTimer as float
      global AL_LODCull as boolean
      global AL_LODObjectUpdate as integer
      global AL_ImposterObject as integer
      global AL_ImposterFreeUp as integer
      global AL_ImposterTotal as integer
      global AL_ImposterInstanceCount as integer
      global AL_ImposterInstanceFreeUp as integer
      global AL_ImposterInstanceUpdateCount as integer
      global AL_WaterEffectCount as integer
      global AL_WaterEffectFreeUp as integer
      global AL_WaterEffectActiveCount as integer
      global AL_WaterEffectRemove as boolean
      global AL_WaterObjectCount as integer
      global AL_WaterObjectFreeUp as integer
      global AL_WaterObjectActiveCount as integer
      global AL_WaterObjectRemove as boolean
      global AL_WaterFogEffect as integer
      global AL_WaterFogObject as integer
      global AL_WaterUnder as integer
      global AL_WaterSplash as Vec4Float
      global AL_WaterCaustic as Vec4Float
      global AL_WaterCausticSpeed as Vec4Float
      global AL_WaterDistortSpeed as Vec4Float
      global AL_EmitterCount as integer
      global AL_EmitterFreeUp as integer
      global AL_EmitterUpdate as integer
      global AL_EmitterForceUpdateCount as integer
      global AL_EmitterForceUpdateRemove as boolean
      global AL_EmitterPixelCount as integer
      global AL_EmitterPixelRemove as boolean
      global AL_EmitterWindDir as Vec2Float
      global AL_EmitterTextureCount as integer
      global AL_EmitterGroupCount as integer
      global AL_EmitterGroupFreeUp as integer
      global AL_ParticleCount as integer
      global AL_ParticleFreeUp as integer
      global AL_ParticlePixelCount as integer
      global AL_ParticlePixelFreeUp as integer
      global AL_ParticleLife as float
      global Terrain_DecalObjectCount as integer
      global Terrain_DecalObjectFreeup as integer
      AL_Basic3DDll=find free dll()
      load dll "DBProBasic3DDebug.dll",AL_Basic3DDll
    `  AL_WorkingDirectory=appname$()
    `  repeat
      `   AL_Directory=mid$(AL_WorkingDirectory,len(AL_WorkingDirectory)-tMidCount)
     `    inc tMidCount
    `  until AL_Directory="\" or AL_Directory=""
    `  AL_WorkingDirectory=left$(AL_WorkingDirectory,len(AL_WorkingDirectory)-tMidCount)
      AL_WorkingDirectory=filesdir$
      AL_Directory="Shaders\"
      AL_Version="1.15"
      if path exist(mydocdir$()+"\Shaders")=0 then make directory mydocdir$()+"\Shaders"
      if path exist(mydocdir$()+"\Shaders\"+AL_Version)=0 then make directory mydocdir$()+"\Shaders\"+AL_Version
      AL_MydocDirectory=mydocdir$()+"\Shaders\"+AL_Version+"\"
      AL_Timer=1
      AL_ViewVec.x=iWidth
      AL_ViewVec.y=iHeight
      AL_PostViewVec.x=(iWidth/2)*km_postquality
      AL_PostViewVec.y=(iHeight/2)*km_postquality
      if AL_PostViewVec.y>iMaxHeight/2
         AL_PostViewVec.z=(iMaxHeight/2)/AL_PostViewVec.y
         AL_PostViewVec.x=(iWidth*AL_PostViewVec.z)/2
         AL_PostViewVec.y=(iHeight*AL_PostViewVec.z)/2
      endif
      AL_WorldSize=0.5
      AL_ShadowQuality=iShadowQuality
      if AL_ShadowQuality>4 then AL_ShadowQuality=4
      AL_DirShadowSize=AL_ViewVec.y
      AL_SpotShadowSize=AL_ViewVec.y
      AL_PointShadowSize=AL_ViewVec.y
      `if AL_DirShadowSize>1024 then AL_DirShadowSize=1024
      `if AL_SpotShadowSize>768 then AL_SpotShadowSize=768
      `if AL_PointShadowSize>512 then AL_PointShadowSize=512
      if AL_DirShadowSize>km_maxdirectlightshadows then AL_DirShadowSize=km_maxdirectlightshadows
      if AL_SpotShadowSize>km_maxspotlightshadows then AL_SpotShadowSize=km_maxspotlightshadows
      if AL_PointShadowSize>km_maxpointlightshadows then AL_PointShadowSize=km_maxpointlightshadows
      AL_PBR=1
      AL_HDR=1
      AL_D3dfmt=113
      AL_MotionBlurScale=0.04
      AL_FilmGrain.x=8
      AL_FilmGrain.y=0.025
      AL_BoxAmbientCount=-1
      AL_BoxAmbientVisibleCount=-1
      AL_BoxAmbientBatchCount=-1
      AL_SphereAmbientCount=-1
      AL_SphereAmbientVisibleCount=-1
      AL_SphereAmbientBatchCount=-1
      AL_DirLightSpecular=iSpecular
      AL_DirLightSubSurface=iSubSurface
      AL_SpotLightCount=-1
      AL_SpotLightBatchCount=-1
      AL_SpotLightVisibleCount=-1
      AL_SpotLightSpecular=iSpecular
      AL_SpotShadowUpdate=1
      AL_SpotLightDrawCount=-1
      AL_PointLightCount=-1
      AL_PointLightBatchCount=-1
      AL_PointLightVisibleCount=-1
      AL_PointLightSpecular=iSpecular
      AL_PointShadowUpdate=1
      AL_PointLightDrawCount=-1
      AL_ReflectionCount=-1
      AL_ReflectionLight.x=100
      AL_ReflectionLight.y=2
      AL_ReflectionTransitionRate=2
      AL_BoxReflectionCount=-1
      AL_BoxReflectionVisibleCount=-1
      AL_BoxReflectionEffectCount=-1
      AL_SphereReflectionCount=-1
      AL_SphereReflectionVisibleCount=-1
      AL_SphereReflectionEffectCount=-1
      AL_SetDefineArrayCount=-1
      AL_SetDefineArrayLines=-1
      AL_EffectCount=-1
      AL_EffectActiveCount=-1
      AL_ObjectCount=-1
      AL_ObjectActiveCount=-1
      AL_ObjectDynamicCount=-1
      AL_ObjectDynamicActiveCount=-1
      AL_ObjectDynamicTimer=2
      AL_ObjectAnimationCount=-1
      AL_InstanceCount=-1
      AL_InstanceObjectCount=-1
      AL_AlphaEffectCount=-1
      AL_AlphaEffectActiveCount=-1
      AL_AlphaObjectCount=-1
      AL_AlphaObjectActiveCount=-1
      AL_StaticBatchCount=-1
      AL_StaticBatchObjectCount=-1
      AL_BatchCount=-1
      AL_BatchDrawCount=-1
      AL_BatchGroupCount=-1
      AL_BatchPixelCount=-1
      AL_LODObjectCount=-1
      AL_LODTransitionCount=-1
      AL_LODTransitionRate=1
      AL_ImposterInstanceCount=-1
      AL_ImposterInstanceUpdateCount=-1
      AL_WaterEffectCount=-1
      AL_WaterEffectActiveCount=-1
      AL_WaterObjectCount=-1
      AL_WaterObjectActiveCount=-1
      AL_WaterUnder=-1
      AL_WaterCaustic.x=0.0005
      AL_WaterCaustic.y=0.003
      AL_WaterCaustic.z=0.001
      AL_WaterCaustic.w=-0.001
      AL_WaterDistortSpeed.x=0.001
      AL_WaterDistortSpeed.y=-0.0005
      AL_EmitterCount=-1
      AL_EmitterUpdate=-1
      AL_EmitterForceUpdateCount=-1
      AL_EmitterPixelCount=-1
      AL_EmitterWindDir.x=0.5
      AL_EmitterWindDir.y=0.5
      AL_EmitterTextureCount=-1
      AL_EmitterGroupCount=-1
      AL_ParticleCount=-1
      AL_ParticlePixelCount=-1
      Terrain_DecalObjectCount=-1

   `Arrays
      global dim AL_Camera(20) as integer
      global dim AL_Image(25) as integer
      global dim AL_ImageMRT(9) as integer
      global dim AL_RenderTargets(11) as integer
      global dim AL_FrameTarget(1) as AL_FrameTargetData
      global dim AL_RenderTarget(1) as AL_RenderTargetData
      global dim AL_PostProcessingObject(6) as integer
      global dim AL_PostProcessingEffect(6) as integer
      global dim AL_CameraView(3) as Vec4Float
      global dim AL_CameraData(8) as float
      global dim AL_LightVec(5) as Vec3Float
      global dim AL_Fog(17) as float
      global dim AL_Ambient(15) as float
      global dim AL_BoxAmbient() as AL_BoxAmbientData
      global dim AL_BoxAmbientVisible() as integer
      global dim AL_BoxAmbientBatch() as AL_BoxAmbientBatchData
      global dim AL_SphereAmbient() as AL_SphereAmbientData
      global dim AL_SphereAmbientVisible() as integer
      global dim AL_SphereAmbientBatch() as AL_SphereAmbientBatchData
      global dim AL_DirLightObject(2) as integer
      global dim AL_DirLightEffect(2) as integer
      global dim AL_DirLightCamera(4) as integer
      global dim AL_DirLightImage(4) as integer
      global dim AL_DirLightUpdate(4) as integer
      global dim AL_SpotLightObject(10) as integer
      global dim AL_SpotLightEffect(10) as integer
      global dim AL_SpotLightCamera(6) as integer
      global dim AL_SpotLightImage(6) as integer
      global dim AL_SpotLight() as AL_SpotLightData
      global dim AL_SpotLightBatch() as AL_SpotLightBatchData
      global dim AL_SpotLightVisible() as integer
      global dim AL_SpotLightDraw() as integer
      global dim AL_SpotShadowMap(16) as AL_SpotShadowMapData
      global dim AL_PointLightObject(10) as integer
      global dim AL_PointLightEffect(10) as integer
      global dim AL_PointLightCubeMap(15) as integer
      global dim AL_PointLight() as AL_PointLightData
      global dim AL_PointLightBatch() as AL_PointLightBatchData
      global dim AL_PointLightVisible() as integer
      global dim AL_PointLightDraw() as integer
      global dim AL_PointShadowMap(16) as AL_PointShadowMapData
      global dim AL_PointFaceUpdate(100) as integer
      global dim AL_PointFaceAngle(5) as Vec3Float
      global dim AL_ReflectionObject(4) as integer
      global dim AL_ReflectionEffect(4) as integer
      global dim AL_ReflectionCubeMap(2) as integer
      global dim AL_ReflectionUpdate(10) as integer
      global dim AL_ReflectionDist(3) as float
      global dim AL_Reflection() as AL_ReflectionData
      global dim AL_BoxReflection() as AL_BoxReflectionData
      global dim AL_BoxReflectionVisible() as integer
      global dim AL_BoxReflectionEffect(100) as integer
      global dim AL_SphereReflection() as AL_SphereReflectionData
      global dim AL_SphereReflectionVisible() as integer
      global dim AL_SphereReflectionEffect(100) as integer
      global dim AL_SetDefineDefine() as string
      global dim AL_SetDefineValue() as boolean
      global dim AL_SetDefineLine() as string
      global dim AL_Effect() as AL_EffectData
      global dim AL_EffectActive() as integer
      global dim AL_Object() as AL_ObjectData
      global dim AL_ObjectAnimation() as integer
      global dim AL_ObjectActive() as integer
      global dim AL_ObjectDynamic() as AL_DynamicObjectData
      global dim AL_ObjectDynamicActive() as integer
      global dim AL_ObjectBounds(4) as float
      global dim AL_Instance() as InstanceData
      global dim AL_InstanceObject() as InstanceObjectData
      global dim AL_AlphaEffect() as AL_AlphaEffectData
      global dim AL_AlphaEffectActive() as integer
      global dim AL_AlphaLights(32) as integer
      global dim AL_AlphaLightsDis(32) as float
      global dim AL_AlphaObject() as AL_AlphaObjectData
      global dim AL_AlphaObjectActive() as integer
      global dim AL_StaticBatch() as AL_StaticBatchData
      global dim AL_StaticBatchObject() as AL_StaticBatchObjectData
      global dim AL_Batch() as  AL_BatchData
      global dim AL_BatchDraw() as integer
      global dim AL_BatchGroup() as AL_BatchGroupData
      global dim AL_BatchPixel() as boolean
      global dim AL_BatchShader(256) as AL_BatchShaderData
      global dim AL_LODObject() as AL_LODObjectData
      global dim AL_LODInc(5) as integer
      global dim AL_LODDec(5) as integer
      global dim AL_LODTransitionLOD(16) as integer
      global dim AL_LODTransitionObject(16) as integer
      global dim AL_ImposterEffect(3) as integer
      global dim AL_Imposter(256) as AL_ImposterData
      global dim AL_ImposterInstance() as AL_ImposterInstanceData
      global dim AL_ImposterInstanceUpdate() as integer
      global dim AL_WaterEffect() as AL_WaterEffectData
      global dim AL_WaterEffectActive() as integer
      global dim AL_WaterObject() as AL_WaterObjectData
      global dim AL_WaterObjectActive() as integer
      global dim AL_Emitter() as AL_EmitterData
      global dim AL_EmitterUpdate() as integer
      global dim AL_EmitterForceUpdate() as integer
      global dim AL_EmitterPixel() as integer
      global dim AL_EmitterTexture() as AL_EmitterTextureData
      global dim AL_EmitterGroup() as AL_EmitterGroupData
      global dim AL_Particle() as AL_ParticleData
      global dim AL_ParticlePixel() as boolean
      global dim AL_ParticleObject(2) as integer
      global dim AL_ParticleEffect(3) as integer
      global dim AL_ParticleShader(256) as AL_ParticleShaderData
      global dim Terrain_DecalObject() as Terrain_DecalObjectData
      AL_CameraData(3)=61.9621391296
      AL_CameraData(4)=AL_ViewVec.x/AL_ViewVec.y
      AL_CameraView(1).z=AL_ViewVec.x
      AL_CameraView(1).w=AL_ViewVec.y
      AL_CameraView(2).x=AL_CameraView(1).z-AL_CameraView(1).x
      AL_CameraView(2).y=AL_CameraView(1).w-AL_CameraView(1).y
      AL_CameraView(2).z=AL_CameraView(2).x/AL_ViewVec.x
      AL_CameraView(2).w=AL_CameraView(2).y/AL_ViewVec.y
      AL_CameraView(3).x=AL_CameraView(1).x/AL_ViewVec.x
      AL_CameraView(3).y=AL_CameraView(1).y/AL_ViewVec.y
      AL_CameraView(3).z=AL_CameraView(1).z/AL_ViewVec.x
      AL_CameraView(3).w=AL_CameraView(1).w/AL_ViewVec.y
      AL_CameraData(1)=1
      AL_CameraData(2)=4000
      AL_CameraData(7)=AL_ViewVec.x
      AL_CameraData(8)=AL_ViewVec.y
      AL_PointFaceAngle(0).y=90
      AL_PointFaceAngle(1).y=270
      AL_PointFaceAngle(2).x=270
      AL_PointFaceAngle(3).x=90
      AL_PointFaceAngle(5).y=180

   `Culling
      FrustumCulling_SetUp()

   `Images resource
      AL_Image(16)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Null.dds",AL_Image(16)
      AL_Image(17)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Neutral LUT.dds",AL_Image(17),3
      AL_Image(18)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Lens Dirt.dds",AL_Image(18)
      AL_Image(19)=FreeUpImage(32500)
      load image AL_Directory+"Resources\BRDF lut.dds",AL_Image(19),1
      AL_Image(20)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Noise.dds",AL_Image(20)
      AL_Image(21)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Water Splash.dds",AL_Image(21)
      AL_Image(22)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Water detail.dds",AL_Image(22)
      AL_Image(23)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Water distort.dds",AL_Image(23)
      AL_Image(24)=FreeUpImage(32500)
      load image AL_Directory+"Resources\Flare gradient.dds",AL_Image(24)

   `Render Targets
      backdrop on AL_Camera(0)
      color backdrop AL_Camera(0),0
      AL_Camera(1)=FreeUpCamera()
      AL_ImageMRT(1)=FreeUpImage(32500)
      Camera_Create(AL_Camera(1),AL_ImageMRT(1),AL_ViewVec.x,AL_ViewVec.y,112)
      AL_ImageMRT(2)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(2),AL_ViewVec.x,AL_ViewVec.y,112
      AL_ImageMRT(3)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(3),AL_ViewVec.x,AL_ViewVec.y,21
      AL_ImageMRT(4)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(4),AL_ViewVec.x,AL_ViewVec.y,21
      AL_Camera(2)=FreeUpCamera()
      AL_Image(2)=FreeUpImage(32500)
      Camera_Create(AL_Camera(2),AL_Image(2),AL_PostViewVec.x,AL_PostViewVec.y,113)
      AL_ImageMRT(5)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(5),AL_PostViewVec.x,AL_PostViewVec.y,31
      backdrop on AL_Camera(2)
      color backdrop AL_Camera(2),0
      AL_Camera(3)=FreeUpCamera()
      AL_Image(3)=FreeUpImage(32500)
      Camera_Create(AL_Camera(3),AL_Image(3),AL_PostViewVec.x,AL_PostViewVec.y,20)
      AL_ImageMRT(6)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(6),AL_PostViewVec.x,AL_PostViewVec.y,21
      AL_ImageMRT(7)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(7),AL_PostViewVec.x,AL_PostViewVec.y,21
      backdrop on AL_Camera(3)
      color backdrop AL_Camera(3),0
      AL_Camera(4)=FreeUpEfxCam()
      AL_Image(4)=FreeUpImage(32500)
      Camera_CreateEfx(AL_Camera(4),AL_Image(4),768,768,21)
      AL_Camera(5)=FreeUpCamera()
      AL_Image(5)=FreeUpImage(32500)
      Camera_Create(AL_Camera(5),AL_Image(5),640,480,21)
      AL_Camera(6)=FreeUpCamera()
      AL_Image(6)=FreeUpImage(32500)
      Camera_Create(AL_Camera(6),AL_Image(6),256,256,116)
      AL_ImageMRT(8)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(8),256,256,116
      AL_Camera(7)=FreeUpCamera()
      AL_Image(7)=FreeUpImage(32500)
      Camera_Create(AL_Camera(7),AL_Image(7),256,256,113)
      AL_ImageMRT(9)=FreeUpImage(32500)
      MRT_MakeRenderTarget AL_ImageMRT(9),256,256,116
      AL_Camera(8)=FreeUpCamera()
      AL_Image(8)=FreeUpImage(32500)
      Camera_Create(AL_Camera(8),AL_Image(8),512,512,21)
      backdrop on AL_Camera(8)
      color backdrop AL_Camera(8),0
      set camera range AL_Camera(8),1,200
      set camera fov AL_Camera(8),90
      set camera aspect AL_Camera(8),1
      AL_Camera(9)=FreeUpCamera()
      AL_Image(9)=FreeUpImage(32500)
      Camera_Create(AL_Camera(9),AL_Image(9),256,256,113)
      set camera aspect AL_Camera(9),1
      set camera fov AL_Camera(9),90
      backdrop on AL_Camera(9)
      color backdrop AL_Camera(9),0
      AL_Camera(10)=FreeUpCamera()
      AL_Image(10)=FreeUpImage(32500)
      Camera_Create(AL_Camera(10),AL_Image(10),1,1,21)
      AL_Camera(11)=FreeUpEfxCam()
      AL_Image(11)=FreeUpImage(32500)
      Camera_CreateEfx(AL_Camera(11),AL_Image(11),768,768,21)
      AL_Camera(12)=FreeUpEfxCam()
      AL_Image(12)=FreeUpImage(32500)
      Camera_CreateEfx(AL_Camera(12),AL_Image(12),512,512,112)

   `Shadow depth maps
      for c=1 to 2
         AL_DirLightCamera(c)=FreeUpCamera()
         AL_DirLightImage(c)=FreeUpImage(32500)
         Camera_Create(AL_DirLightCamera(c),AL_DirLightImage(c),AL_DirShadowSize,AL_DirShadowSize,31)
         set camera aspect AL_DirLightCamera(c),1
      next c
      AL_DirLightCamera(3)=FreeUpEfxCam()
      AL_DirLightImage(3)=FreeUpImage(32500)
      Camera_CreateEfx(AL_DirLightCamera(3),AL_DirLightImage(3),AL_DirShadowSize,AL_DirShadowSize,34)
      for c=1 to 6
         AL_SpotLightCamera(c)=FreeUpCamera()
         AL_SpotLightImage(c)=FreeUpImage(32500)
         Camera_Create(AL_SpotLightCamera(c),AL_SpotLightImage(c),AL_SpotShadowSize,AL_SpotShadowSize,20)
         set camera aspect AL_SpotLightCamera(c),1
      next c
      for c=1 to 15
         if c>3 then AL_PointLightCubeMap(c)=CubeTex_MakeNew(AL_PointShadowSize/2,0,20) else AL_PointLightCubeMap(c)=CubeTex_MakeNew(AL_PointShadowSize,0,20)
      next c

   `Half depth and pixel velocity
      AL_DepthObject=FreeUpObject(32500)
      AL_DepthEffect=FreeUpEffect(32500)
      Object_CreateTarget(AL_DepthObject,AL_DepthEffect,AL_Directory+"Post Processing\Motion vector.fx")
      set effect constant vector AL_DepthEffect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      texture object AL_DepthObject,0,AL_ImageMRT(1)
      set object mask AL_DepthObject,2^AL_Camera(2)
      enable object zbias AL_DepthObject,-160000,160000
      exclude object on AL_DepthObject

   `Ambient lighting
      AL_AmbientLightObject=FreeUpObject(32500)
      AL_AmbientLightEffect=FreeUpEffect(32500)
      Object_CreateTarget(AL_AmbientLightObject,AL_AmbientLightEffect,AL_Directory+"Lighting\Ambient\Ambient.fx")
      set effect constant vector AL_AmbientLightEffect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      set effect constant vector AL_AmbientLightEffect,"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      set effect technique AL_AmbientLightEffect,"PBR"
      texture object AL_AmbientLightObject,0,AL_ImageMRT(1)
      texture object AL_AmbientLightObject,1,AL_ImageMRT(2)
      texture object AL_AmbientLightObject,2,AL_ImageMRT(3)
      texture object AL_AmbientLightObject,3,AL_ImageMRT(4)
      texture object AL_AmbientLightObject,4,AL_ImageMRT(6)
      texture object AL_AmbientLightObject,5,AL_Image(12)
      texture object AL_AmbientLightObject,6,AL_Image(4)
      texture object AL_AmbientLightObject,7,AL_ImageMRT(7)
      set object mask AL_AmbientLightObject,2^AL_Camera(0)
      disable object zwrite AL_AmbientLightObject
      exclude object on AL_AmbientLightObject
      BoxAmbient_LoadBatch()
      SphereAmbient_LoadBatch()

   `Shadow fill
      AL_ShadowFillObject=FreeUpObject(32500)
      AL_ShadowFillEffect=FreeUpEffect(32500)
      Object_CreateTarget(AL_ShadowFillObject,AL_ShadowFillEffect,AL_Directory+"Lighting\ShadowFill.fx")
      tMask=(2^AL_DirLightCamera(1))+(2^AL_DirLightCamera(2))
      for c=1 to 6:tMask=tMask+(2^AL_SpotLightCamera(c)):next c
      set object mask AL_ShadowFillObject,tMask
      exclude object on AL_ShadowFillObject

   `Directional light
      AL_DirLightObject(1)=FreeUpObject(32500)
      AL_DirLightEffect(1)=FreeUpEffect(32500)
      if AL_ShadowQuality=0 then Object_CreateTarget(AL_DirLightObject(1),AL_DirLightEffect(1),AL_Directory+"Lighting\Directional"+str$(AL_ShadowQuality)+"\"+str$(AL_DirLightSpecular)+str$(AL_DirLightSubSurface)+".fx")
      if AL_ShadowQuality=1 then Object_CreateTarget(AL_DirLightObject(1),AL_DirLightEffect(1),AL_Directory+"Lighting\Directional\Shadow1\"+str$(AL_DirLightSpecular)+str$(AL_DirLightSubSurface)+".fx")
      if AL_ShadowQuality=2 then Object_CreateTarget(AL_DirLightObject(1),AL_DirLightEffect(1),AL_Directory+"Lighting\Directional\Shadow2\"+str$(AL_DirLightSpecular)+str$(AL_DirLightSubSurface)+".fx")
      if AL_ShadowQuality>2 then Object_CreateTarget(AL_DirLightObject(1),AL_DirLightEffect(1),AL_Directory+"Lighting\Directional\Shadow3\"+str$(AL_DirLightSpecular)+str$(AL_DirLightSubSurface)+".fx")
      set effect technique AL_DirLightEffect(1),"PBR"
      set effect constant vector AL_DirLightEffect(1),"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      texture object AL_DirLightObject(1),0,AL_ImageMRT(1)
      texture object AL_DirLightObject(1),1,AL_ImageMRT(2)
      texture object AL_DirLightObject(1),2,AL_ImageMRT(3)
      texture object AL_DirLightObject(1),3,AL_ImageMRT(4)
      texture object AL_DirLightObject(1),4,AL_DirLightImage(1)
      texture object AL_DirLightObject(1),5,AL_DirLightImage(2)
      texture object AL_DirLightObject(1),6,AL_Image(16)
      set object mask AL_DirLightObject(1),2^AL_Camera(0)
      disable object zwrite AL_DirLightObject(1)
      exclude object on AL_DirLightObject(1)
      AL_DirLightObject(2)=FreeUpObject(32500)
      AL_DirLightEffect(2)=FreeUpEffect(32500+rnd(16250))
      Object_CreateTarget(AL_DirLightObject(2),AL_DirLightEffect(2),AL_Directory+"Lighting\VSM.fx")
      set object mask AL_DirLightObject(2),0
      EfxCam_SetObject AL_DirLightCamera(3),AL_DirLightObject(2)
      texture object AL_DirLightObject(2),0,AL_DirLightImage(2)
      set vector4 Vector4(1),1.0/AL_DirShadowSize,1.0/AL_DirShadowSize,0,0
      set effect constant vector AL_DirLightEffect(2),"ViewSize",Vector4(1)

   `Spot lights
      tMesh=FreeUpMesh()
      AL_SpotShadowMap(1).Object=FreeUpObject(32500)
  `    AL_SpotShadowMap(1).Object=loadobject(AL_Directory+"Resources\Spot.dbo","",0,0)
  	`  load object AL_Directory+"Resources\Spot.dbo",AL_SpotShadowMap(1).Object
  	  AL_SpotShadowMap(1).Object=makeobjectcube(-1000)
      convert object fvf AL_SpotShadowMap(1).Object,0x002||0x100
      make mesh from object tMesh,AL_SpotShadowMap(1).Object
      delete object AL_SpotShadowMap(1).Object
      for d=1 to 15
         lock vertexdata for mesh tMesh
            for v=0 to get vertexdata vertex count()-1:set vertexdata uv v,0,d-1,0:next v
         unlock vertexdata
         AL_SpotShadowMap(d).Object=FreeUpObject(32500)
         make object AL_SpotShadowMap(d).Object,tMesh,0
         texture object AL_SpotShadowMap(d).Object,0,AL_ImageMRT(1)
         texture object AL_SpotShadowMap(d).Object,1,AL_ImageMRT(2)
         texture object AL_SpotShadowMap(d).Object,2,AL_ImageMRT(3)
         texture object AL_SpotShadowMap(d).Object,3,AL_ImageMRT(4)
         if d<4 then texture object AL_SpotShadowMap(d).Object,5,AL_SpotLightImage(d)
         if d>3 then texture object AL_SpotShadowMap(d).Object,5,AL_SpotLightImage(6)
         if d>3 and d<12 then texture object AL_SpotShadowMap(d).Object,5,AL_SpotLightImage(5)
         if d>3 and d<8 then texture object AL_SpotShadowMap(d).Object,5,AL_SpotLightImage(4)
         set object mask AL_SpotShadowMap(d).Object,2^AL_Camera(0)
         set object radius AL_SpotShadowMap(d).Object,9999^9999
         disable object zwrite AL_SpotShadowMap(d).Object
         exclude object on AL_SpotShadowMap(d).Object
      next d
      delete mesh tMesh

   `Point lights
      AL_PointShadowMap(1).Object=FreeUpObject(32500)
    `  load object AL_Directory+"Resources\Point.dbo",AL_PointShadowMap(1).Object
      AL_PointShadowMap(1).Object=makeobjectcube(-1000)
     ` AL_PointShadowMap(1).Object=loadobject(AL_Directory+"Resources\Point.dbo","",0,0)
      convert object fvf AL_PointShadowMap(1).Object,0x002||0x100
      make mesh from object tMesh,AL_PointShadowMap(1).Object
      delete object AL_PointShadowMap(1).Object
      for d=1 to 15
         lock vertexdata for mesh tMesh
            for v=0 to get vertexdata vertex count()-1:set vertexdata uv v,0,d-1,0:next v
         unlock vertexdata
         AL_PointShadowMap(d).Object=FreeUpObject(32500)
         make object AL_PointShadowMap(d).Object,tMesh,0
         texture object AL_PointShadowMap(d).Object,0,AL_ImageMRT(1)
         texture object AL_PointShadowMap(d).Object,1,AL_ImageMRT(2)
         texture object AL_PointShadowMap(d).Object,2,AL_ImageMRT(3)
         texture object AL_PointShadowMap(d).Object,3,AL_ImageMRT(4)
         CubeTex_ApplyObject AL_PointLightCubeMap(d),AL_PointShadowMap(d).Object,5
         set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(1)
         set object mask AL_PointShadowMap(d).Object,2^AL_Camera(0)
         set object radius AL_PointShadowMap(d).Object,9999^9999
         disable object zwrite AL_PointShadowMap(d).Object
         exclude object on AL_PointShadowMap(d).Object
      next d
      delete mesh tMesh

   `Reflections
      AL_ReflectionCubeMap(1)=CubeTex_MakeNew(256,0,113)
      CubeTex_SetRange AL_ReflectionCubeMap(1),1,200
      AL_ReflectionCubeMap(2)=CubeTex_MakeNew(256,0,113)
      CubeTex_SetRange AL_ReflectionCubeMap(2),1,200
      AL_ReflectionObject(0)=FreeUpObject(32500)
      AL_ReflectionEffect(0)=FreeUpEffect(32500)
      Object_CreateTarget(AL_ReflectionObject(0),AL_ReflectionEffect(0),AL_Directory+"Lighting\Reflections\Reflections Update.fx")
      set effect technique AL_ReflectionEffect(0),"BRDFlut"
      set object mask AL_ReflectionObject(0),0
      texture object AL_ReflectionObject(0),0,AL_Image(19)
      CubeTex_ApplyObject AL_ReflectionCubeMap(1),AL_ReflectionObject(0),1
      CubeTex_ApplyObject AL_ReflectionCubeMap(2),AL_ReflectionObject(0),2
      EfxCam_SetObject AL_Camera(12),AL_ReflectionObject(0)
      EfxCam_SyncMask 2^AL_Camera(12)
      EfxCam_Sync
      texture object AL_ReflectionObject(0),0,AL_Image(11)
      set object mask AL_ReflectionObject(0),2^AL_Camera(10)
      exclude object on AL_ReflectionObject(0)
      AL_ReflectionObject(1)=FreeUpObject(32500)
      AL_ReflectionEffect(1)=FreeUpEffect(32500)
      Object_CreateTarget(AL_ReflectionObject(1),AL_ReflectionEffect(1),AL_Directory+"Lighting\Reflections\Reflections Update.fx")
      set effect technique AL_ReflectionEffect(1),"ReflectionCapture"
      set object mask AL_ReflectionObject(1),2^AL_Camera(8)
      set object radius AL_ReflectionObject(1),9999^9999
      texture object AL_ReflectionObject(1),0,AL_Image(9)
      exclude object on AL_ReflectionObject(1)
      AL_ReflectionObject(2)=FreeUpObject(32500)
      AL_ReflectionEffect(2)=FreeUpEffect(32500)
      make object sphere AL_ReflectionObject(2),-100
      load effect AL_Directory+"Lighting\Reflections\Reflections Update.fx",AL_ReflectionEffect(2),0,1
      set object effect AL_ReflectionObject(2),AL_ReflectionEffect(2)
      CubeTex_ApplyObject AL_ReflectionCubeMap(1),AL_ReflectionObject(2),1
      CubeTex_ApplyObject AL_ReflectionCubeMap(2),AL_ReflectionObject(2),2
      set object mask AL_ReflectionObject(2),2^AL_Camera(8)
      set object radius AL_ReflectionObject(2),9999^9999
      exclude object on AL_ReflectionObject(2)
      AL_ReflectionObject(3)=FreeUpObject(32500)
      AL_ReflectionEffect(3)=FreeUpEffect(32500)
      Object_CreateTarget(AL_ReflectionObject(3),AL_ReflectionEffect(3),AL_Directory+"Lighting\Reflections\Reflections Update.fx")
      set effect technique AL_ReflectionEffect(3),"OldRef"
      set object mask AL_ReflectionObject(3),0
      EfxCam_SetObject AL_Camera(11),AL_ReflectionObject(3)
      exclude object on AL_ReflectionObject(3)
      AL_ReflectionObject(4)=FreeUpObject(32500)
      AL_ReflectionEffect(4)=FreeUpEffect(32500)
      Object_CreateTarget(AL_ReflectionObject(4),AL_ReflectionEffect(4),AL_Directory+"Lighting\Reflections\Reflections Update.fx")
      set effect technique AL_ReflectionEffect(4),"Blend"
      set object mask AL_ReflectionObject(4),0
      EfxCam_SetObject AL_Camera(4),AL_ReflectionObject(4)
      exclude object on AL_ReflectionObject(4)

   `Water Fog
      AL_WaterFogEffect=FreeUpEffect(32500)
      load effect AL_Directory+"Lighting\Water Fog.fx",AL_WaterFogEffect,0,1
      Effect_SetConstants(AL_WaterFogEffect)
      AL_WaterFogObject=FreeUpObject(32500)
      make object sphere AL_WaterFogObject,-1,5,5
      convert object fvf AL_WaterFogObject,0x002
      set object effect AL_WaterFogObject,AL_WaterFogEffect
      texture object AL_WaterFogObject,0,AL_ImageMRT(1)
      texture object AL_WaterFogObject,1,AL_Image(22)
      texture object AL_WaterFogObject,2,AL_Image(23)
      set object mask AL_WaterFogObject,(2^AL_Camera(0))+(2^AL_Camera(3))
      set object radius AL_WaterFogObject,9999^9999
      set object transparency AL_WaterFogObject,2
      enable object zwrite AL_WaterFogObject
      enable object zdepth AL_WaterFogObject
      exclude object on AL_WaterFogObject

   `Particles
      AL_ParticleEffect(1)=FreeUpEffect(32500)
      load effect AL_Directory+"Particles\Particles.fx",AL_ParticleEffect(1),0,1
      AL_ParticleEffect(2)=FreeUpEffect(32500)
      load effect AL_Directory+"Particles\Particles Distort.fx",AL_ParticleEffect(2),0,1
      set vector4 Vector4(1),1,AL_CameraData(4),0,0
      set effect constant vector AL_ParticleEffect(1),"Aspect",Vector4(1)
      set effect constant vector AL_ParticleEffect(2),"Aspect",Vector4(1)
      null=AlphaEffect_Add(AL_ParticleEffect(1))
      null=AlphaEffect_Add(AL_ParticleEffect(2))
      AL_ParticleEffect(3)=FreeUpEffect(32500)
      AL_ParticleObject(2)=FreeUpObject(32500)
      Object_CreateTarget(AL_ParticleObject(2),AL_ParticleEffect(3),AL_Directory+"Particles\Particles Previous.fx")
      set object mask AL_ParticleObject(2),2^AL_Camera(6)
      texture object AL_ParticleObject(2),0,AL_ImageMRT(8)
      exclude object on AL_ParticleObject(2)

   `Imposters
      AL_ImposterEffect(1)=FreeUpEffect(32500)
      AL_ImposterObject=FreeUpObject(32500)
      Object_CreateTarget(AL_ImposterObject,AL_ImposterEffect(1),AL_Directory+"Imposter\Back Fill.fx")
      set object mask AL_ImposterObject,2^AL_Camera(8)
      enable object zbias AL_ImposterObject,-160000,160000
      exclude object on AL_ImposterObject
      AL_ImposterEffect(2)=FreeUpEffect(32500)
      load effect AL_Directory+"Imposter\Imposter.fx",AL_ImposterEffect(2),0,1
      AL_ImposterEffect(3)=FreeUpEffect(32500)
      load effect AL_Directory+"Imposter\Imposter Vegetation.fx",AL_ImposterEffect(3),0,1
      null=Effect_Add(AL_ImposterEffect(2))
      null=Effect_Add(AL_ImposterEffect(3))

   `Preset
      Ambient_SetColor(255,255,255)
      Ambient_SetIntensity(16)
      Ambient_SetEmissive(256)
      Fog_SetRange(160000,16)
      Fog_SetHeight(550,12000,0)
      Fog_SetHeightRange(160000,1)
      Fog_SetColor(128,128,128,128,128,128)
      DirectionalLight_SetAngle(45,45,0)
      DirectionalLight_SetRange(24000,3.0,3.0,3.0)
      DirectionalLight_SetColor(255,255,255)
      DirectionalLight_SetIntensity(128)

endfunction

`----------------------------------------------------
` Advanced Lighting Update
`----------------------------------------------------
function AdvLighting_Update(iTimer as float)
   gosub _AdvLighting_Arrays

   `Update Timer
      AL_Timer=iTimer
      inc AL_TimerINC,AL_Timer
      if AL_TimerINC>10000 then AL_TimerINC=0

   `Update Camera
      set current camera 0
      AL_CameraPos.x=camera position x():AL_CameraPos.y=camera position y():AL_CameraPos.z=camera position z()
      AL_CameraAng.x=camera angle x():AL_CameraAng.y=camera angle y():AL_CameraAng.z=camera angle z()
      position camera AL_Camera(0),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(0),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(1),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(2),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(2),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(3),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(3),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(5),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(5),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(7),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(7),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position camera AL_Camera(9),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z:rotate camera AL_Camera(9),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      rotate x matrix4 Matrix(1),wrapvalue(AL_CameraAng.x)*0.01745329251
      rotate y matrix4 Matrix(2),wrapvalue(AL_CameraAng.y)*0.01745329251
      rotate z matrix4 Matrix(3),wrapvalue(AL_CameraAng.z)*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      set vector3 Vector3(1),0,0,1
      transform normals vector3 Vector3(1),Vector3(1),Matrix(4)
      AL_CameraDir.x=x vector3(Vector3(1)):AL_CameraDir.y=y vector3(Vector3(1)):AL_CameraDir.z=z vector3(Vector3(1))
      view matrix4 Matrix(1)
      projection matrix4 Matrix(2)
      multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
      GetViewProjectFrustum(0,-1)
      if AL_Sky=1 then set effect constant matrix AL_SkyEffect(1),"ViewProj",Matrix(3)
      if AL_RenderTargets(9)>0
         set effect constant matrix PostFilter_GetRenderTargetEffect(AL_RenderTargets(9)),"ViewProj",Matrix(3)
         set effect constant matrix PostFilter_GetRenderTargetEffect(AL_RenderTargets(9)),"ViewMat",Matrix(1)
         set effect constant matrix PostFilter_GetRenderTargetEffect(AL_RenderTargets(10)),"ViewProj",Matrix(3)
         set effect constant matrix PostFilter_GetRenderTargetEffect(AL_RenderTargets(10)),"ViewMat",Matrix(1)
      endif
      transpose matrix4 Matrix(1),Matrix(4)
      r=inverse matrix4(Matrix(1),Matrix(1))
      r=inverse matrix4(Matrix(2),Matrix(2))
      multiply matrix4 Matrix(3),Matrix(2),Matrix(1)
      set effect constant matrix AL_DepthEffect,"ProjInverse",Matrix(3)
      set effect constant matrix AL_AmbientLightEffect,"ProjInverse",Matrix(3)
      set effect constant matrix AL_DirLightEffect(1),"ProjInverse",Matrix(3)
      if AL_PostProcessingEffect(2)>0 then set effect constant matrix AL_PostProcessingEffect(2),"ProjInverse",Matrix(3)
      set vector4 Vector4(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,0
      for e=0 to AL_EffectActiveCount
         set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"Timer",AL_TimerINC/10000
         set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"CameraPos",Vector4(1)
      next e

   `Updates
      if AL_ReflectionCapture=0
         gosub _Objects_Update
         gosub _Instance_Update
         gosub _Reflections_Update
         gosub _LOD_Update
         gosub _Sky_Update
         gosub _Clouds_Update
         gosub _Water_Update
        gosub _Ocean_Update
         Occlusion_Update()
         Emitter_Update()
         Terrain_Update()
         TerrainMesh_Update()
         gosub _SpotLights_Update
         gosub _PointLights_Update
         gosub _VertexLight_Update
      endif
      if AL_DirLightVisible=1 and AL_ShadowQuality>0
         if AL_ReflectionCapture=0
            DirectionalLight_Render(1,((AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)/AL_DirLightRange.w)
            if AL_DirLightUpdate(1)<4 and AL_DirLightUpdate(2)<8 then DirectionalLight_Render(2,(AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)
            if AL_DirLightUpdate(1)=4 then DirectionalLight_Render(3,AL_DirLightRange.x/AL_DirLightRange.y):AL_DirLightUpdate(1)=0
            if AL_DirLightUpdate(2)>7 and AL_DirLightUpdate(1)>0
               DirectionalLight_Render(4,AL_DirLightRange.x)
               DirectionalLight_Render(5,AL_DirLightRange.x*1.25)
               AL_DirLightUpdate(2)=0
            endif
            inc AL_DirLightUpdate(1)
            inc AL_DirLightUpdate(2)
         else
            DirectionalLight_Render(1,((AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)/AL_DirLightRange.w)
            DirectionalLight_Render(2,(AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)
            DirectionalLight_Render(3,AL_DirLightRange.x/AL_DirLightRange.y)
            DirectionalLight_Render(4,AL_DirLightRange.x)
         endif
      endif
      set current camera 0
      if AL_ReflectionCapture=0 then FrustumCulling_Query(0,1) else FrustumCulling_Query(0,0)
      Vector4Float(1).x=rnd(100):Vector4Float(1).y=rnd(100)
      set vector4 Vector4(1),AL_CameraView(2).x,AL_CameraView(2).y,0,0
      set effect constant vector AL_DirLightEffect(1),"ShadowNoise",Vector4(1)
      for e=1 to 4
         if AL_SpotLightEffect(e)>0 then set effect constant vector AL_SpotLightEffect(e),"ShadowNoise",Vector4(1)
         if AL_PointLightEffect(e)>0 then set effect constant vector AL_PointLightEffect(e),"ShadowNoise",Vector4(1)
      next d

   `Ocean Terrain Reflections
      if AL_Sky=1 then exclude object off AL_SkyObject(1)
      gosub _Terrain_Show
      if AL_OceanVisible=1 and AL_ReflectionCapture=0
         if AL_OceanUnder=0 and Terrain_Enabled=1 and Terrain_TextureRefresh=0
            for t=1 to 4:set effect technique Terrain_Effect(t),"Reflection":next t
            if AL_Sky=1 then set effect technique AL_SkyEffect(1),"Reflection"
            set camera clip AL_Camera(5),4,AL_CameraPos.x,AL_OceanHeight+(AL_OceanWaveHeight*0.5),AL_CameraPos.z,0,-1,0
            sync mask 2^AL_Camera(5)
            fastsync
         endif
      endif

   `Multiple Render Targets
      gosub _TerrainMesh_Show
      gosub _Batch_Show
      if AL_BatchObject>0 then exclude object off AL_BatchObject
      exclude object off AL_ParticleObject(2)
      MRT_Sync AL_Camera(6),AL_ImageMRT(9),0,0 : `Batch / prev particles
      if AL_BatchObject>0 then exclude object on AL_BatchObject
      exclude object on AL_ParticleObject(2)
      for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"Geometry":next e
      if AL_Sky=1
         exclude object off AL_SkyObject(2)
         if Terrain_Enabled=1 then set effect technique AL_SkyEffect(1),"GeometryClip" else set effect technique AL_SkyEffect(1),"Geometry"
      endif
      gosub _Objects_Show
      gosub _Imposter_Show
      if AL_LODTransitionCount>-1
         for o=0 to AL_LODTransitionCount:exclude object off AL_LODTransitionObject(o):next o
      endif
      MRT_Sync AL_Camera(1),AL_ImageMRT(2),AL_ImageMRT(3),AL_ImageMRT(4) : ` G-buffer
      gosub _Terrain_Hide
      gosub _Batch_Hide
      gosub _Imposter_Hide
      if AL_LODTransitionCount>-1
         for o=0 to AL_LODTransitionCount:exclude object on AL_LODTransitionObject(o):next o
      endif
      if AL_Sky=1
         if AL_SkyDynamic=0 then set effect technique AL_SkyEffect(1),"Sky" else set effect technique AL_SkyEffect(1),"SkyDynamic"
      endif
      if AL_MotionBlur=1 and AL_ObjectDynamicMVCount>0
         for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"MotionVector":next e
      endif
      exclude object off AL_DepthObject
      MRT_Sync AL_Camera(2),AL_ImageMRT(5),0,0 : `Motion Vector / 3D Clouds
      exclude object on AL_DepthObject
      set current camera 0
      view matrix4 Matrix(1)
      projection matrix4 Matrix(2)
      multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
      set effect constant matrix AL_DepthEffect,"ViewProjPrev",Matrix(3)
      if AL_MotionBlur=1
         AL_RenderTarget(AL_RenderTargets(5)).UpDate=0
         AL_RenderTarget(AL_RenderTargets(6)).UpDate=0
         if AL_ReflectionCapture=0 and AL_ObjectDynamicMVCount>0
            AL_RenderTarget(AL_RenderTargets(5)).UpDate=1
            AL_RenderTarget(AL_RenderTargets(6)).UpDate=1
            tIndex=1
            for o=0 to AL_ObjectDynamicMVCount-1
               tDynamic=AL_ObjectDynamic(o).Updated
               tObject=AL_ObjectDynamic(tDynamic).ObjectAL
               set object mask AL_Object(tObject).Object,AL_Object(tObject).Mask+(2^AL_Camera(2))+(2^AL_Camera(7))
               Shader_SetVectorVal AL_Object(tObject).pEffect,AL_Object(tObject).pMotionBlur,tIndex,0,0,0
               inc tIndex,AL_Object(tObject).MotionBlurVertex
            next o
            for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"VertexPrevious":next e
         endif
      endif
      if AL_ParticleObject(1)>0 then exclude object off AL_ParticleObject(1)
      MRT_Sync AL_Camera(7),AL_ImageMRT(8),0,0 : `Prev Vertex / Particles
      if AL_ParticleObject(1)>0 then exclude object on AL_ParticleObject(1)
      gosub _Objects_Hide
      for e=0 to AL_BoxAmbientBatchCount:set effect technique AL_BoxAmbientBatch(e).Effect,"Mask":next e
      for e=0 to AL_SphereAmbientBatchCount:set effect technique AL_SphereAmbientBatch(e).Effect,"Mask":next e
      for e=0 to AL_AlphaEffectActiveCount:set effect technique AL_AlphaEffect(AL_AlphaEffectActive(e)).Effect,"Mask":next e
      if AL_WaterUnder=-1
         for e=0 to AL_WaterEffectActiveCount:set effect technique AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"Mask":next e
      else
         for e=0 to AL_WaterEffectActiveCount:set effect technique AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"MaskUnder":next e
         set effect technique AL_WaterFogEffect,"Mask"
      endif
      gosub _Ambient_Show
      gosub _AlphaObjects_Show
      if AL_Ocean=1 then exclude object off AL_OceanObject
      if AL_SSR=0 then MRT_Sync AL_Camera(3),AL_ImageMRT(6),0,0 else MRT_Sync AL_Camera(3),AL_ImageMRT(6),AL_ImageMRT(7),0  : `Distort / Masks / SSR

   `Lighting pass / post processing
      if AL_PBR=0
         for e=0 to AL_BoxAmbientBatchCount:set effect technique AL_BoxAmbientBatch(e).Effect,"Diffuse":next e
         for e=0 to AL_SphereAmbientBatchCount:set effect technique AL_SphereAmbientBatch(e).Effect,"Diffuse":next e
      else
         for e=0 to AL_BoxAmbientBatchCount:set effect technique AL_BoxAmbientBatch(e).Effect,"PBR":next e
         for e=0 to AL_SphereAmbientBatchCount:set effect technique AL_SphereAmbientBatch(e).Effect,"PBR":next e
      endif
      for e=0 to AL_AlphaEffectActiveCount:set effect technique AL_AlphaEffect(AL_AlphaEffectActive(e)).Effect,"Lighting":next e
      if AL_WaterUnder=-1
         for e=0 to AL_WaterEffectActiveCount:set effect technique AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"Water":next e
      else
         for e=0 to AL_WaterEffectActiveCount:set effect technique AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"WaterUnder":next e
         set effect technique AL_WaterFogEffect,"Water"
      endif
      exclude object off AL_AmbientLightObject
      if AL_DirLightVisible=1 then exclude object off AL_DirLightObject(1)
      gosub _SpotLights_Show
      gosub _PointLights_Show

      if AL_PostFilter=1 and AL_ReflectionCapture=0
         set vector4 Vector4(1),0.1*AL_Timer,0.5*AL_Timer,0,0
         if AL_RenderTargets(3)>0 then set effect constant vector PostFilter_GetRenderTargetEffect(AL_RenderTargets(3)),"ElapsedTime",Vector4(1)
         if AL_RenderTargets(7)>0 then set effect constant float PostFilter_GetRenderTargetEffect(AL_RenderTargets(7)),"PixelBlur",(AL_MotionBlurScale*0.2)/AL_Timer
         if AL_RenderTargets(8)>0 then set effect constant float PostFilter_GetRenderTargetEffect(AL_RenderTargets(8)),"PixelBlur",AL_MotionBlurScale/AL_Timer
         inc AL_FilmGrain.z,AL_Timer
         if AL_FilmGrain.z>AL_FilmGrain.x
            set vector4 Vector4(1),64+rnd(64),AL_FilmGrain.y,0,0
            set effect constant vector PostFilter_GetFrameTargetEffect(AL_FinalComposite),"FilmGrain",Vector4(1)
            AL_FilmGrain.z=0
         endif
         if AL_WaterSplash.y>0
            if AL_WaterSplash.x>0 then AL_WaterSplash.x=AL_WaterSplash.x-(AL_WaterSplash.w*AL_Timer)
            if AL_WaterSplash.x<1 then AL_WaterSplash.x=0
            AL_WaterSplash.y=AL_WaterSplash.y-(AL_WaterSplash.w*0.25*AL_Timer)
            AL_WaterSplash.z=AL_WaterSplash.z+(AL_WaterSplash.w*2)*AL_Timer
         endif
         if AL_WaterSplash.y<1 then AL_WaterSplash.y=0
         set vector4 Vector4(1),AL_WaterSplash.x/100,AL_WaterSplash.y/25,0.5+(AL_WaterSplash.z/100),0
         set effect constant vector PostFilter_GetFrameTargetEffect(AL_FinalComposite),"WaterSplash",Vector4(1)
         gosub _Objects_ShowAnimation
         sync mask 2^AL_RenderTarget(0).Camera
         fastsync `sync
         gosub _Objects_HideAnimation
         exclude object on AL_AmbientLightObject
         exclude object on AL_DirLightObject(1)
         gosub _SpotLights_Hide
         gosub _PointLights_Hide
         gosub _Ambient_Hide
         gosub _AlphaObjects_Hide
         if AL_Ocean=1 then exclude object on AL_OceanObject
         if AL_Sky=1
            exclude object on AL_SkyObject(1)
            exclude object on AL_SkyObject(2)
         endif
         AL_RenderTarget(AL_RenderTargets(1)).UpDate=0
         AL_RenderTarget(AL_RenderTargets(2)).UpDate=0
         AL_RenderTarget(AL_RenderTargets(3)).UpDate=0
         inc AL_RenderTargets(0)
         if AL_RenderTargets(0)>3 then AL_RenderTargets(0)=1
         AL_RenderTarget(AL_RenderTargets(AL_RenderTargets(0))).UpDate=1
         for c=1 to AL_RenderTargetCount-1
            if AL_RenderTarget(c).UpDate=1 then tEfxCameraMask=tEfxCameraMask+(2^AL_RenderTarget(c).Camera)
         next c
      endif
      if AL_ReflectionTransition>0
         dec AL_ReflectionTransition,AL_ReflectionTransitionRate*AL_Timer
         if AL_ReflectionTransition<0 then AL_ReflectionTransition=0
         if AL_ReflectionUpdate(4)=0 then set effect constant float AL_ReflectionEffect(4),"TextureInvert",AL_ReflectionTransition/100 else set effect constant float AL_ReflectionEffect(4),"TextureInvert",1-(AL_ReflectionTransition/100)
         tEfxCameraMask=tEfxCameraMask+(2^AL_Camera(4))
      endif
      EfxCam_SyncMask tEfxCameraMask
      if tEfxCameraMask>0 then EfxCam_Sync
      if AL_ReflectionCapture=0
         sync mask 1
         if AL_PostFilter=0
            gosub _Objects_ShowAnimation
            fastsync `sync
            gosub _Objects_HideAnimation
         else
            fastsync
         endif
      else
         sync mask 2^AL_Camera(9)
         fastsync
      endif
      if AL_ReflectionCapture>0 or AL_PostFilter=0
         exclude object on AL_AmbientLightObject
         exclude object on AL_DirLightObject(1)
         gosub _SpotLights_Hide
         gosub _PointLights_Hide
         gosub _Ambient_Hide
         gosub _AlphaObjects_Hide
         if AL_Ocean=1 then exclude object on AL_OceanObject
         if AL_Sky=1
            exclude object on AL_SkyObject(1)
            exclude object on AL_SkyObject(2)
         endif
      endif

      for w=0 to AL_WaterObjectActiveCount
         tWaterObjectAL=AL_WaterObjectActive(w)
         if AL_WaterObject(tWaterObjectAL).InUse=1 then position object AL_WaterObject(tWaterObjectAL).Object,AL_WaterObject(tWaterObjectAL).PositionObject.x,AL_WaterObject(tWaterObjectAL).PositionObject.y,AL_WaterObject(tWaterObjectAL).PositionObject.z
      next w

endfunction

`----------------------------------------------------
` Enable/Diable physically based rendering
`----------------------------------------------------
function AdvLighting_SetPBR(iEnable as boolean)
   if AL_PBR<>iEnable
      AL_PBR=iEnable
      if iEnable=0
         set effect technique AL_AmbientLightEffect,"Diffuse"
         set effect technique AL_DirLightEffect(1),"Diffuse"
         for b=0 to AL_PointLightBatchCount
            for o=0 to AL_PointLightBatch(b).Count-1:set effect technique PeekInteger(AL_PointLightBatch(b).pEffectID+(o*4)),"Diffuse":next o
         next b
         for b=0 to AL_SpotLightBatchCount
            for o=0 to AL_SpotLightBatch(b).Count-1:set effect technique PeekInteger(AL_SpotLightBatch(b).pEffectID+(o*4)),"Diffuse":next o
         next b
         for t=1 to 4
            if AL_SpotLightEffect(t)>0 then set effect technique AL_SpotLightEffect(t),"Diffuse"
            if AL_PointLightEffect(t)>0 then set effect technique AL_PointLightEffect(t),"Diffuse"
         next t
         for d=1 to 15
            if AL_SpotLightEffect(1)>0 and AL_SpotShadowMap(d).effect<>0 then set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(1):AL_SpotShadowMap(d).effect=0:SpotLight_ShadowPtrs(d)
            if AL_PointLightEffect(1)>0 and AL_PointShadowMap(d).effect<>0 then set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(1):AL_PointShadowMap(d).effect=0:PointLight_ShadowPtrs(d)
         next d
         for r=0 to AL_BoxReflectionCount
            if AL_BoxReflection(r).InUse=1 then set object mask AL_BoxReflection(r).Object,0
         next r
         for r=0 to AL_SphereReflectionCount
            if AL_SphereReflection(r).InUse=1 then set object mask AL_SphereReflection(r).Object,0
         next r
      else
         set effect technique AL_AmbientLightEffect,"PBR"
         set effect technique AL_DirLightEffect(1),"PBR"
         for b=0 to AL_PointLightBatchCount
            for o=0 to AL_PointLightBatch(b).Count-1:set effect technique PeekInteger(AL_PointLightBatch(b).pEffectID+(o*4)),"PBR":next o
         next b
         for b=0 to AL_SpotLightBatchCount
            for o=0 to AL_SpotLightBatch(b).Count-1:set effect technique PeekInteger(AL_SpotLightBatch(b).pEffectID+(o*4)),"PBR":next o
         next b
         for t=1 to 4
            if AL_SpotLightEffect(t)>0 then set effect technique AL_SpotLightEffect(t),"PBR"
            if AL_PointLightEffect(t)>0 then set effect technique AL_PointLightEffect(t),"PBR"
         next t
         for r=0 to AL_BoxReflectionCount
            if AL_BoxReflection(r).InUse=1 then set object mask AL_BoxReflection(r).Object,2^AL_Camera(0)
         next r
         for r=0 to AL_SphereReflectionCount
            if AL_SphereReflection(r).InUse=1 then set object mask AL_SphereReflection(r).Object,2^AL_Camera(0)
         next r
      endif
   endif
endfunction

`----------------------------------------------------
`  AdvLighting Exit
`----------------------------------------------------
function AdvLighting_End()
   if executable running(HZB_Running)=1 then stop executable HZB_Running
   end
endfunction

`----------------------------------------------------
` Clear AdvLighting (useful for level switching)
`----------------------------------------------------
function AdvLighting_Clear()
   for x=0 to 63
      PokeInteger(HZB_pBounds+x*4,0)
      PokeInteger(HZB_pTerrain+x*4,0)
   next x
   PokeInteger(HZB_pBounds,1)
   gosub _AdvLighting_Arrays
   Sky_Delete()
   Clouds_Delete()
   for b=0 to VFC_BoundsCount
      if VFC_Bounds(b).InUse=1
         delete memory VFC_Bounds(b).pQuadTree
         delete memory VFC_Bounds(b).pQuadTreeIndex
      endif
   next b
   for b=0 to VFC_QuadTreeCount
      if VFC_QuadTree(b).InUse=1
         delete memory VFC_QuadTree(b).pBounds
      endif
   next b
   for b=0 to AL_BoxAmbientBatchCount
      set object effect AL_BoxAmbientBatch(b).Object,0
      delete object AL_BoxAmbientBatch(b).Object
      delete effect AL_BoxAmbientBatch(b).Effect
   next b
   for b=0 to AL_SphereAmbientBatchCount
      set object effect AL_SphereAmbientBatch(b).Object,0
      delete object AL_SphereAmbientBatch(b).Object
      delete effect AL_SphereAmbientBatch(b).Effect
   next b
   for b=0 to AL_PointLightBatchCount
      for o=0 to AL_PointLightBatch(b).Count-1
         set object effect PeekInteger(AL_PointLightBatch(b).pObjectID+(o*4)),0
         delete object PeekInteger(AL_PointLightBatch(b).pObjectID+(o*4))
         delete effect PeekInteger(AL_PointLightBatch(b).pEffectID+(o*4))
      next o
      delete memory AL_PointLightBatch(b).pIndex
      delete memory AL_PointLightBatch(b).pObjectID
      delete memory AL_PointLightBatch(b).pEffectID
      delete memory AL_PointLightBatch(b).pEffect
      delete memory AL_PointLightBatch(b).pData0
      delete memory AL_PointLightBatch(b).pData1
      delete memory AL_PointLightBatch(b).pData2
      delete memory AL_PointLightBatch(b).pData3
      delete memory AL_PointLightBatch(b).pData4
   next b
   for b=0 to AL_SpotLightBatchCount
      for o=0 to AL_SpotLightBatch(b).Count-1
         set object effect PeekInteger(AL_SpotLightBatch(b).pObjectID+(o*4)),0
         delete object PeekInteger(AL_SpotLightBatch(b).pObjectID+(o*4))
         delete effect PeekInteger(AL_SpotLightBatch(b).pEffectID+(o*4))
      next o
      delete memory AL_SpotLightBatch(b).pIndex
      delete memory AL_SpotLightBatch(b).pObjectID
      delete memory AL_SpotLightBatch(b).pEffectID
      delete memory AL_SpotLightBatch(b).pEffect
      delete memory AL_SpotLightBatch(b).pData0
      delete memory AL_SpotLightBatch(b).pData1
      delete memory AL_SpotLightBatch(b).pData2
      delete memory AL_SpotLightBatch(b).pData3
      delete memory AL_SpotLightBatch(b).pData4
      delete memory AL_SpotLightBatch(b).pData5
      delete memory AL_SpotLightBatch(b).pData6
      delete memory AL_SpotLightBatch(b).pData7
      delete memory AL_SpotLightBatch(b).pData8
   next b
   for d=1 to 15
      AL_PointShadowMap(d).Light=0
      AL_SpotShadowMap(d).Light=0
   next d
   for r=0 to AL_BoxReflectionCount
      if AL_BoxReflection(r).InUse=1
         set object effect AL_BoxReflection(r).Object,0
         delete object AL_BoxReflection(r).Object
      endif
   next r
   for r=0 to AL_SphereReflectionCount
      if AL_SphereReflection(r).InUse=1
         set object effect AL_SphereReflection(r).Object,0
         delete object AL_SphereReflection(r).Object
      endif
   next r
   for b=0 to AL_StaticBatchCount
      if AL_StaticBatch(b).InUse=1 then delete memory AL_StaticBatch(b).pObject
   next b
   for x=0 to AL_InstanceCount
      if AL_Instance(x).InUse=1
         for i=0 to AL_Instance(x).InstanceCount
            tInstanceObject=PeekInteger(AL_Instance(x).pInstance+(i*4))-1
            if AL_InstanceObject(tInstanceObject).Object>0 then delete object AL_InstanceObject(tInstanceObject).Object
         next i
         if AL_Instance(x).TransitionObject>0 then delete object AL_Instance(x).TransitionObject
         if AL_Instance(x).TransitionLOD1>0 then delete object AL_Instance(x).TransitionLOD1
         if AL_Instance(x).TransitionLOD2>0 then delete object AL_Instance(x).TransitionLOD2
         if AL_Instance(x).TransitionLOD3>0 then delete object AL_Instance(x).TransitionLOD3
         if AL_Instance(x).TransitionLOD4>0 then delete object AL_Instance(x).TransitionLOD4
         delete memory AL_Instance(x).pInstance
      endif
   next x
   for b=0 to AL_BatchGroupCount
      if AL_BatchGroup(b).InUse=1
         delete object AL_BatchGroup(b).Object
         for o=1 to AL_BatchGroup(b).ObjectCount
            delete object PeekInteger(AL_BatchGroup(b).pObject+(o*4))
         next o
         for p=0 to AL_BatchGroup(b).PixelCount
            tPixel=PeekInteger(AL_BatchGroup(b).pPixel+(p*4))-1
            AL_BatchPixel(tPixel)=0
         next p
         delete memory AL_BatchGroup(b).pBatch
         delete memory AL_BatchGroup(b).pObject
         delete memory AL_BatchGroup(b).pPixel
         delete memory AL_BatchGroup(b).pEffect
         delete memory AL_BatchGroup(b).pWMat1
         delete memory AL_BatchGroup(b).pWMat2
         delete memory AL_BatchGroup(b).pWMat3
      endif
   next b
   for o=0 to AL_LODTransitionCount
      delete object AL_LODTransitionObject(o)
   next o
   for i=0 to 256
      if AL_Imposter(i).InUse=1
         delete object AL_Imposter(i).Object
         delete memory AL_Imposter(i).pInstance
         delete memory AL_Imposter(i).pMeshLimb
         delete memory AL_Imposter(i).pMeshUpdate
         AL_Imposter(i).InUse=0
      endif
   next i
   for e=0 to AL_EffectCount
      delete memory AL_Effect(e).pMotionVec
   next e
   for e=0 to AL_EmitterCount
      if AL_Emitter(e).InUse=1
         delete object AL_Emitter(e).Object
         if AL_Emitter(e).Pixel=1
            for p=0 to AL_Emitter(e).Particles-1
               tParticle=PeekInteger(AL_Emitter(e).pParticle+(p*4))
               tPixel=AL_Particle(tParticle).Pixel-1
               if tPixel>-1
                  AL_ParticlePixel(tPixel)=0
                  AL_Particle(tParticle).Pixel=0
               endif
            next p
         endif
         delete memory AL_Emitter(e).pParticle
         delete memory AL_Emitter(e).pEmissionEvent
         delete memory AL_Emitter(e).pCollisionEvent
      endif
   next e
   for i=0 to AL_EmitterTextureCount
      delete image AL_EmitterTexture(i).Image
   next i
   exclude object on AL_WaterFogObject
   undim AL_BoxAmbient():global dim AL_BoxAmbient() as AL_BoxAmbientData
   undim AL_BoxAmbientVisible():global dim AL_BoxAmbientVisible() as integer
   undim AL_BoxAmbientBatch():global dim AL_BoxAmbientBatch() as AL_BoxAmbientBatchData
   undim AL_SphereAmbient():global dim AL_SphereAmbient() as AL_SphereAmbientData
   undim AL_SphereAmbientVisible():global dim AL_SphereAmbientVisible() as integer
   undim AL_SphereAmbientBatch():global dim AL_SphereAmbientBatch() as AL_SphereAmbientBatchData
   undim AL_SpotLight():global dim AL_SpotLight() as AL_SpotLightData
   undim AL_SpotLightBatch():global dim AL_SpotLightBatch() as AL_SpotLightBatchData
   undim AL_SpotLightVisible():global dim AL_SpotLightVisible() as integer
   undim AL_SpotLightDraw():global dim AL_SpotLightDraw() as integer
   undim AL_PointLight():global dim AL_PointLight() as AL_PointLightData
   undim AL_PointLightBatch():global dim AL_PointLightBatch() as AL_PointLightBatchData
   undim AL_PointLightVisible():global dim AL_PointLightVisible() as integer
   undim AL_PointLightDraw():global dim AL_PointLightDraw() as integer
   undim AL_Reflection():global dim AL_Reflection() as AL_ReflectionData
   undim AL_BoxReflection():global dim AL_BoxReflection() as AL_BoxReflectionData
   undim AL_BoxReflectionVisible():global dim AL_BoxReflectionVisible() as integer
   undim AL_SphereReflection():global dim AL_SphereReflection() as AL_SphereReflectionData
   undim AL_SphereReflectionVisible():global dim AL_SphereReflectionVisible() as integer
   undim AL_Effect():global dim AL_Effect() as AL_EffectData
   undim AL_EffectActive():global dim AL_EffectActive() as integer
   undim AL_Object():global dim AL_Object() as AL_ObjectData
   undim AL_ObjectActive():global dim AL_ObjectActive() as integer
   undim AL_ObjectDynamic():global dim AL_ObjectDynamic() as AL_DynamicObjectData
   undim AL_ObjectDynamicActive():global dim AL_ObjectDynamicActive() as integer
   undim AL_Instance():global dim AL_Instance() as InstanceData
   undim AL_InstanceObject():global dim AL_InstanceObject() as InstanceObjectData
   undim AL_AlphaEffect():global dim AL_AlphaEffect() as AL_AlphaEffectData
   undim AL_AlphaEffectActive():global dim AL_AlphaEffectActive() as integer
   undim AL_AlphaObject():global dim AL_AlphaObject() as AL_AlphaObjectData
   undim AL_AlphaObjectActive():global dim AL_AlphaObjectActive() as integer
   undim AL_StaticBatch():global dim AL_StaticBatch() as AL_StaticBatchData
   undim AL_StaticBatchObject():global dim AL_StaticBatchObject() as AL_StaticBatchObjectData
   undim AL_Batch():global dim AL_Batch() as  AL_BatchData
   undim AL_BatchDraw():global dim AL_BatchDraw() as integer
   undim AL_BatchGroup():global dim AL_BatchGroup() as AL_BatchGroupData
   undim AL_LODObject():global dim AL_LODObject() as AL_LODObjectData
   undim AL_LODInc():global dim AL_LODInc(5) as integer
   undim AL_LODDec():global dim AL_LODDec(5) as integer
   undim AL_LODTransitionLOD():global dim AL_LODTransitionLOD(16) as integer
   undim AL_LODTransitionObject():global dim AL_LODTransitionObject(16) as integer
   undim AL_WaterEffect():global dim AL_WaterEffect() as AL_WaterEffectData
   undim AL_WaterEffectActive():global dim AL_WaterEffectActive() as integer
   undim AL_WaterObject():global dim AL_WaterObject() as AL_WaterObjectData
   undim AL_WaterObjectActive():global dim AL_WaterObjectActive() as integer
   undim AL_Emitter():global dim AL_Emitter() as AL_EmitterData
   undim AL_EmitterUpdate():global dim AL_EmitterUpdate() as integer
   undim AL_EmitterForceUpdate():global dim AL_EmitterForceUpdate() as integer
   undim AL_EmitterPixel():global dim AL_EmitterPixel() as integer
   undim AL_EmitterTexture():global dim AL_EmitterTexture() as AL_EmitterTextureData
   undim AL_EmitterGroup():global dim AL_EmitterGroup() as AL_EmitterGroupData
   undim AL_Particle():global dim AL_Particle() as AL_ParticleData
   undim VFC_Bounds():global dim VFC_Bounds() as VFC_BoundsData
   undim VFC_BoundsUpdate():global dim VFC_BoundsUpdate() as integer
   undim VFC_InFrustum():global dim VFC_InFrustum() as integer
   undim VFC_VisibleCount():global dim VFC_VisibleCount(12) as integer
   undim VFC_Visible():global dim VFC_Visible(0,12) as integer
   undim VFC_QuadTree():global dim VFC_QuadTree() as VFC_QuadTreeData
   undim VFC_QuadTreeUpdate():global dim VFC_QuadTreeUpdate() as integer
   undim VFC_QuadTreeRemove():global dim VFC_QuadTreeRemove() as integer
   undim VFC_QuadTreeActive():global dim VFC_QuadTreeActive() as integer
   undim VFC_QuadTreeStart():global dim VFC_QuadTreeStart(128,128) as integer
   undim HZB_AddOcclusion():global dim HZB_AddOcclusion() as integer
   undim HZB_AddObject():global dim HZB_AddObject() as integer
   undim HZB_AddBatch():global dim HZB_AddBatch() as integer
   undim HZB_UpdateOcclusion():global dim HZB_UpdateOcclusion() as integer
   undim HZB_RemoveOcclusion():global dim HZB_RemoveOcclusion() as integer
   for x=0 to 12:VFC_VisibleCount(x)=-1:next x
   AL_BoxAmbientCount=-1
   AL_BoxAmbientVisibleCount=-1
   AL_BoxAmbientBatchCount=-1
   AL_BoxAmbientFreeUp=0
   AL_BoxAmbientVisibleRemove=0
   AL_BoxAmbientActiveCount=0
   AL_BoxAmbientActiveObject=0
   AL_BoxAmbientActiveIndex=0
   AL_BoxAmbientActiveOld=0
   AL_BoxAmbientActiveReflection=0
   AL_SphereAmbientCount=-1
   AL_SphereAmbientVisibleCount=-1
   AL_SphereAmbientBatchCount=-1
   AL_SphereAmbientFreeUp=0
   AL_SphereAmbientVisibleRemove=0
   AL_SphereAmbientActiveCount=0
   AL_SphereAmbientActiveObject=0
   AL_SphereAmbientActiveIndex=0
   AL_SphereAmbientActiveOld=0
   AL_SphereAmbientActiveReflection=0
   AL_SpotLightCount=-1
   AL_SpotLightBatchCount=-1
   AL_SpotLightVisibleCount=-1
   AL_SpotLightDrawCount=-1
   AL_SpotLightFreeUp=0
   AL_SpotLightVisibleRemove=0
   AL_SpotShadowUpdate=0
   AL_PointLightCount=-1
   AL_PointLightBatchCount=-1
   AL_PointLightVisibleCount=-1
   AL_PointLightDrawCount=-1
   AL_PointLightFreeUp=0
   AL_PointLightVisibleRemove=0
   AL_PointShadowUpdate=0
   AL_ReflectionCount=-1
   AL_BoxReflectionCount=-1
   AL_BoxReflectionVisibleCount=-1
   AL_BoxReflectionVisibleRemove=0
   AL_SphereReflectionCount=-1
   AL_SphereReflectionVisibleCount=-1
   AL_SphereReflectionVisibleRemove=0
   AL_EffectCount=-1
   AL_EffectActiveCount=-1
   AL_EffectFreeUp=0
   AL_EffectRemove=0
   AL_ObjectCount=-1
   AL_ObjectActiveCount=-1
   AL_ObjectFreeUp=0
   AL_ObjectRemove=0
   AL_ObjectDynamicCount=-1
   AL_ObjectDynamicActiveCount=-1
   AL_ObjectDynamicFreeUp=0
   AL_ObjectDynamicRemove=0
   AL_ObjectDynamicMVCount=0
   AL_ObjectAnimationCount=-1
   AL_InstanceCount=-1
   AL_InstanceFreeUp=0
   AL_InstanceObjectCount=-1
   AL_InstanceObjectFreeUp=0
   AL_InstanceUpdate=0
   AL_AlphaEffectCount=-1
   AL_AlphaEffectActiveCount=-1
   AL_AlphaEffectFreeUp=0
   AL_AlphaEffectRemove=0
   AL_AlphaLightsUpdate=0
   AL_AlphaObjectCount=-1
   AL_AlphaObjectActiveCount=-1
   AL_AlphaObjectFreeUp=0
   AL_AlphaObjectRemove=0
   AL_StaticBatchCount=-1
   AL_StaticBatchFreeup=0
   AL_StaticBatchObjectCount=-1
   AL_StaticBatchObjectFreeup=0
   AL_StaticBatchVertex=0
   AL_BatchCount=-1
   AL_BatchFreeUp=0
   AL_BatchDrawCount=-1
   AL_BatchGroupCount=-1
   AL_BatchGroupFreeUp=0
   AL_BatchPixelFreeUp=0
   AL_LODUpdate=0
   AL_LODObjectCount=-1
   AL_LODTransitionCount=-1
   AL_LODObjectFreeUp=0
   AL_LODTransitionTimer=0
   AL_LODCull=0
   AL_LODObjectUpdate=0
   AL_ImposterFreeUp=0
   AL_ImposterTotal=0
   AL_ImposterInstanceFreeUp=0
   AL_ImposterInstanceCount=-1
   AL_ImposterInstanceUpdateCount=-1
   AL_WaterEffectCount=-1
   AL_WaterEffectFreeUp=0
   AL_WaterEffectActiveCount=-1
   AL_WaterEffectRemove=0
   AL_WaterObjectCount=-1
   AL_WaterObjectFreeUp=0
   AL_WaterObjectActiveCount=-1
   AL_WaterObjectRemove=0
   AL_WaterUnder=-1
   AL_EmitterCount=-1
   AL_EmitterFreeUp=0
   AL_EmitterUpdate=-1
   AL_EmitterForceUpdateCount=-1
   AL_EmitterForceUpdateRemove=0
   AL_EmitterPixelCount=-1
   AL_EmitterPixelRemove=0
   AL_EmitterTextureCount=-1
   AL_EmitterGroupCount=-1
   AL_EmitterGroupFreeUp=0
   AL_ParticleCount=-1
   AL_ParticleFreeUp=0
   AL_ParticlePixelFreeUp=0
   VFC_BoundsCount=-1
   VFC_BoundsFreeup=0
   VFC_BoundsUpDateCount=-1
   VFC_FrustumIndex=0
   VFC_InFrustumCount=-1
   VFC_ResetQuerylist=0
   VFC_OccludeIndex=0
   VFC_QuadTreeCount=-1
   VFC_QuadTreeFreeup=0
   VFC_QuadTreeActiveCount=-1
   VFC_QuadTreeUpDateCount=-1
   VFC_QuadTreeRemoveCount=-1
   VFC_QuadTreeBoxCull.x=0
   VFC_QuadTreeBoxCull.y=0
   VFC_QuadTreeBoxCull.z=0
   VFC_QuadTreeBoxCull.w=0
   for x=0 to 12:VFC_VisibleCount(x)=-1:next x
   HZB_OcclusionCount=-1
   HZB_AddOcclusionCount=-1
   HZB_AddObjectCount=-1
   HZB_AddBatchCount=-1
   HZB_UpdateOcclusionCount=-1
   HZB_RemoveOcclusionCount=-1
   HZB_OcclusionActiveCount=-1
   BoxAmbient_LoadBatch()
   SphereAmbient_LoadBatch()
   null=AlphaEffect_Add(AL_ParticleEffect(1))
   null=AlphaEffect_Add(AL_ParticleEffect(2))
   null=Effect_Add(AL_ImposterEffect(2))
   null=Effect_Add(AL_ImposterEffect(3))
   if Terrain_Enabled>0
      for t=1 to 4
         Terrain_EffectAL(t)=Effect_Add(Terrain_Effect(t))
         for l=1 to 12
            Terrain_Bounds(t,l)=FrustumCulling_AddBounds(l,t+7)
            VFC_Bounds(Terrain_Bounds(t,l)).DirectionalShadow=-1
         next l
      next t
      Ocean_Delete()
      Terrain_Delete()
      for x=0 to Terrain_MeshCount
         if Terrain_Mesh(x).InUse=1
            delete memory Terrain_Mesh(x).pSegment
            delete memory Terrain_Mesh(x).pSegmentVisible
         endif
      next x
      for x=0 to Terrain_MeshSegmentCount
         if Terrain_MeshSegment(x).InUse=1 then delete memory Terrain_MeshSegment(x).pBatch
      next x
      undim Terrain_DecalObject():global dim Terrain_DecalObject() as Terrain_DecalObjectData
      undim Terrain_Mesh():global dim Terrain_Mesh() as Terrain_MeshData
      undim Terrain_MeshSegment():global dim Terrain_MeshSegment() as Terrain_MeshSegmentData
      undim Terrain_MeshBatch():global dim Terrain_MeshBatch() as Terrain_MeshBatchData
      undim Terrain_MeshUpdate():global dim Terrain_MeshUpdate() as integer
      undim Terrain_MeshUpdateSegment():global dim Terrain_MeshUpdateSegment() as integer
      Terrain_DecalObjectCount=-1
      Terrain_DecalObjectFreeup=0
      Terrain_MeshCount=-1
      Terrain_MeshFreeup=0
      Terrain_MeshSegmentCount=-1
      Terrain_MeshSegmentFreeup=0
      Terrain_MeshBatchCount=-1
      Terrain_MeshBatchFreeup=0
   endif
endfunction

`----------------------------------------------------
`Array Sorting
   _AdvLighting_Arrays:
      if AL_BoxAmbientVisibleRemove=1
         AL_BoxAmbientVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_BoxAmbient(AL_BoxAmbientVisible(tNextEelement)-1).Visible=2
               AL_BoxAmbient(AL_BoxAmbientVisible(tNextEelement)-1).Visible=0
               array delete element AL_BoxAmbientVisible(),tNextEelement
               dec AL_BoxAmbientVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_BoxAmbientVisibleCount
      endif
      if AL_SphereAmbientVisibleRemove=1
         AL_SphereAmbientVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_SphereAmbient(AL_SphereAmbientVisible(tNextEelement)-1).Visible=2
               AL_SphereAmbient(AL_SphereAmbientVisible(tNextEelement)-1).Visible=0
               array delete element AL_SphereAmbientVisible(),tNextEelement
               dec AL_SphereAmbientVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_SphereAmbientVisibleCount
      endif
      if AL_SpotLightVisibleRemove=1
         AL_SpotLightVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_SpotLight(AL_SpotLightVisible(tNextEelement)-1).Visible=2
               AL_SpotLight(AL_SpotLightVisible(tNextEelement)-1).Visible=0
               array delete element AL_SpotLightVisible(),tNextEelement
               dec AL_SpotLightVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_SpotLightVisibleCount
      endif
      if AL_PointLightVisibleRemove=1
         AL_PointLightVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_PointLight(AL_PointLightVisible(tNextEelement)-1).Visible=2
               AL_PointLight(AL_PointLightVisible(tNextEelement)-1).Visible=0
               array delete element AL_PointLightVisible(),tNextEelement
               dec AL_PointLightVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_PointLightVisibleCount
      endif
      if AL_BoxReflectionVisibleRemove=1
         AL_BoxReflectionVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_BoxReflection(AL_BoxReflectionVisible(tNextEelement)-1).Visible=2
               AL_BoxReflection(AL_BoxReflectionVisible(tNextEelement)-1).Visible=0
               array delete element AL_BoxReflectionVisible(),tNextEelement
               dec AL_BoxReflectionVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_BoxReflectionVisibleCount
      endif
      if AL_SphereReflectionVisibleRemove=1
         AL_SphereReflectionVisibleRemove=0
         tNextEelement=0
         repeat
            if AL_SphereReflection(AL_SphereReflectionVisible(tNextEelement)-1).Visible=2
               AL_SphereReflection(AL_SphereReflectionVisible(tNextEelement)-1).Visible=0
               array delete element AL_SphereReflectionVisible(),tNextEelement
               dec AL_SphereReflectionVisibleCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_SphereReflectionVisibleCount
      endif
      if AL_EffectRemove=1
         AL_EffectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_EffectActive(tNextEelement)
            if AL_Effect(tEelement).InUse=2
               if tEelement<AL_EffectFreeUp then AL_EffectFreeUp=tEelement
               AL_Effect(tEelement).InUse=0
               array delete element AL_EffectActive(),tNextEelement
               dec AL_EffectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_EffectActiveCount
      endif
      if AL_AlphaEffectRemove=1
         AL_AlphaEffectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_AlphaEffectActive(tNextEelement)
            if AL_AlphaEffect(tEelement).InUse=2
               if tEelement<AL_AlphaEffectFreeUp then AL_AlphaEffectFreeUp=tEelement
               AL_AlphaEffect(tEelement).InUse=0
               array delete element AL_AlphaEffectActive(),tNextEelement
               dec AL_AlphaEffectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_AlphaEffectActiveCount
      endif
      if AL_WaterEffectRemove=1
         AL_WaterEffectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_WaterEffectActive(tNextEelement)
            if AL_WaterEffect(tEelement).InUse=2
               if tEelement<AL_WaterEffectFreeUp then AL_WaterEffectFreeUp=tEelement
               AL_WaterEffect(tEelement).InUse=0
               array delete element AL_WaterEffectActive(),tNextEelement
               dec AL_WaterEffectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_WaterEffectActiveCount
      endif
      if AL_ObjectRemove=1
         AL_ObjectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_ObjectActive(tNextEelement)
            if AL_Object(tEelement).InUse=2
               if tEelement<AL_ObjectFreeUp then AL_ObjectFreeUp=tEelement
               AL_Object(tEelement).InUse=0
               array delete element AL_ObjectActive(),tNextEelement
               dec AL_ObjectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_ObjectActiveCount
      endif
      if AL_AlphaObjectRemove=1
         AL_AlphaObjectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_AlphaObjectActive(tNextEelement)
            if AL_AlphaObject(tEelement).InUse=2
               if tEelement<AL_AlphaObjectFreeUp then AL_AlphaObjectFreeUp=tEelement
               AL_AlphaObject(tEelement).InUse=0
               array delete element AL_AlphaObjectActive(),tNextEelement
               dec AL_AlphaObjectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_AlphaObjectActiveCount
      endif
      if AL_WaterObjectRemove=1
         AL_WaterObjectRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_WaterObjectActive(tNextEelement)
            if AL_WaterObject(tEelement).InUse=2
               if tEelement<AL_WaterObjectFreeUp then AL_WaterObjectFreeUp=tEelement
               AL_WaterObject(tEelement).InUse=0
               array delete element AL_WaterObjectActive(),tNextEelement
               dec AL_WaterObjectActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_WaterObjectActiveCount
      endif
      if AL_ObjectDynamicRemove=1
         AL_ObjectDynamicRemove=0
         tNextEelement=0
         repeat
            tEelement=AL_ObjectDynamicActive(tNextEelement)
            if AL_ObjectDynamic(tEelement).InUse=2
               if tEelement<AL_ObjectDynamicFreeUp then AL_ObjectDynamicFreeUp=tEelement
               AL_ObjectDynamic(tEelement).InUse=0
               array delete element AL_ObjectDynamicActive(),tNextEelement
               dec AL_ObjectDynamicActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_ObjectDynamicActiveCount
      endif
      if AL_EmitterPixelRemove=1
         AL_EmitterPixelRemove=0
         tNextEelement=0
         repeat
            if AL_Emitter(AL_EmitterPixel(tNextEelement)-1).Pixel=2
               AL_Emitter(AL_EmitterPixel(tNextEelement)-1).Pixel=0
               tEmitter=AL_EmitterPixel(tNextEelement)-1
               if AL_Emitter(tEmitter).InUse=1
                  for p=0 to AL_Emitter(tEmitter).Particles-1
                     tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(p*4))
                     tPixel=AL_Particle(tParticle).Pixel-1
                     if tPixel>0
                        AL_ParticlePixel(tPixel)=0
                        if AL_ParticlePixelFreeUp>tPixel then AL_ParticlePixelFreeUp=tPixel
                        AL_Particle(tParticle).Pixel=0
                     endif
                  next p
               endif
               array delete element AL_EmitterPixel(),tNextEelement
               dec AL_EmitterPixelCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_EmitterPixelCount
      endif
      if AL_EmitterForceUpdateRemove=1
         AL_EmitterForceUpdateRemove=0
         tNextEelement=0
         repeat
            if AL_Emitter(AL_EmitterForceUpdate(tNextEelement)-1).ForceUpdate=2
               AL_Emitter(AL_EmitterForceUpdate(tNextEelement)-1).ForceUpdate=0
               array delete element AL_EmitterForceUpdate(),tNextEelement
               dec AL_EmitterForceUpdateCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>AL_EmitterForceUpdateCount
      endif
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type Vec2Integer
   x as integer
   y as integer
endtype

type Vec2Float
   x as float
   y as float
endtype

type Vec3Integer
   x as integer
   y as integer
   z as integer
endtype

type Vec3Float
   x as float
   y as float
   z as float
endtype

type Vec4Integer
   x as integer
   y as integer
   z as integer
   w as integer
endtype

type Vec4Float
   x as float
   y as float
   z as float
   w as float
endtype

`----------------------------------------------------
` Common Globals
`----------------------------------------------------
function CommonGlobals()
   global MinVec as Vec3Float
   global MaxVec as Vec3Float
   global MinMaxPos as Vec3Float
   global MinMaxSize as Vec3Float
   global dim Vector2(15) as integer
   global dim Vector3(15) as integer
   global dim Vector4(15) as integer
   global dim Matrix(15) as integer
   global dim Vector4Float(32) as Vec4Float
   global dim Vector4Integer(32) as Vec4Integer
   global dim XZYObjectBounds(7) as Vec3Integer
   global dim ViewProjectVec(15) as float
   global dim ViewProjectFrustumVec(20,5,3) as float
   global dim QuickSortID(10000) as integer
   global dim QuickSortVal(10000) as integer
   for v=1 to 15
      Vector2(v)=v+200:null=make vector2(Vector2(v))
      Vector3(v)=v+215:null=make vector3(Vector3(v))
      Vector4(v)=v+230:null=make vector4(Vector4(v))
      Matrix(v)=v+245:null=make matrix4(Matrix(v))
   next v
   global dim XZYObjectBounds(7) as Vec3Integer
   for b=0 to 7
      XZYObjectBounds(b).x=1:XZYObjectBounds(b).y=1:XZYObjectBounds(b).z=1
   next b
   XZYObjectBounds(1).x=-1:XZYObjectBounds(2).y=-1:XZYObjectBounds(3).x=-1:XZYObjectBounds(3).y=-1
   XZYObjectBounds(4).z=-1:XZYObjectBounds(5).x=-1:XZYObjectBounds(5).z=-1:XZYObjectBounds(6).y=-1
   XZYObjectBounds(6).z=-1:XZYObjectBounds(7).x=-1:XZYObjectBounds(7).y=-1:XZYObjectBounds(7).z=-1
endfunction

`----------------------------------------------------
` Free Image
`----------------------------------------------------
function FreeUpImage(iFreeup as integer)
   repeat
      inc iFreeup
   until Image exist(iFreeup)=0
endfunction iFreeup

`----------------------------------------------------
` Free Object
`----------------------------------------------------
function FreeUpObject(iFreeup as integer)
   repeat
      inc iFreeup
   until object exist(iFreeup)=0
endfunction iFreeup

`----------------------------------------------------
` Free sound
`----------------------------------------------------
function FreeUpSound(iFreeup as integer)
   repeat
      inc iFreeup
   until Sound exist(iFreeup)=0
endfunction iFreeup

`----------------------------------------------------
` Free Effect
`----------------------------------------------------
function FreeUpEffect(iFreeup as integer)
   repeat
      inc iFreeup
   until Effect exist(iFreeup)=0
endfunction iFreeup

`----------------------------------------------------
` Free Camera
`----------------------------------------------------
function FreeUpCamera()
   tFreeup=0
   repeat
      inc tFreeup
   until camera exist(tFreeup)=0
endfunction tFreeup

`----------------------------------------------------
` Free Mesh
`----------------------------------------------------
function FreeUpMesh()
   tFreeup=35000
   repeat
      inc tFreeup
   until mesh exist(tFreeup)=0
endfunction tFreeup

`----------------------------------------------------
` Free File
`----------------------------------------------------
function FreeUpFile()
   tFreeup=0
   repeat
      inc tFreeup
   until file open(tFreeup)=0
endfunction tFreeup

`----------------------------------------------------
` Free Memblock
`----------------------------------------------------
function FreeUpMemblock()
   tFreeup=0
   repeat
      inc tFreeup
   until Memblock exist(tFreeup)=0
endfunction tFreeup

`----------------------------------------------------
` Pointers Peek Functions
`----------------------------------------------------
function PeekByte1(iPTR as dword)
   local tReturn as byte
   iPTR= *iPTR
   tReturn=iPTR && 0xff
endfunction tReturn
function PeekByte2(iPTR as dword)
   local tReturn as byte
   iPTR= *iPTR
   tReturn=(iPTR >> 8) && 0xff
endfunction tReturn
function PeekByte3(iPTR as dword)
   local tReturn as byte
   iPTR= *iPTR
   tReturn=(iPTR >> 16) && 0xff
endfunction tReturn
function PeekByte4(iPTR as dword)
   local tReturn as byte
   iPTR= *iPTR
   tReturn=(iPTR >> 24) && 0xff
endfunction tReturn
function PeekWord1(iPTR as dword)
   local tReturn as word
   iPTR= *iPTR
   tReturn=iPTR && 0xffff
endfunction tReturn
function PeekWord2(iPTR as dword)
   local tReturn as word
   iPTR= *iPTR
   tReturn=(iPTR >> 16) && 0xffff
endfunction tReturn
function PeekDword(iPTR as dword)
   local tReturn as dword
   tReturn= *iPTR
endfunction tReturn
function PeekInteger(iPTR as dword)
   local tReturn as integer
   tReturn= *iPTR
endfunction tReturn
function PeekFloat(iPTR as DWORD)
   local tResult as integer
   local tReturn as float
   local tExponent as float
   local tMantissa as float
   local tSign as float
   tResult= *iPTR
   tExponent=((tResult >> 23) and %00000000000000000000000011111111)-127
   tMantissa=((tResult and %00000000011111111111111111111111)/8388608.0)+1.0
   if tResult and %10000000000000000000000000000000 then tSign=-1.0 else tSign=1.0
   tReturn=tSign*(2^tExponent)*tMantissa
endfunction tReturn

`----------------------------------------------------
` Pointers Poke Functions
`----------------------------------------------------
function PokeByte1(iPTR as dword,iValue as byte)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0xffffff00) || (iValue && 0xff)
   *iPTR=tDword
endfunction
function PokeByte2(iPTR as dword,iValue as byte)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0xffff00ff) || ((iValue && 0xff) << 8)
   *iPTR=tDword
endfunction
function PokeByte3(iPTR as dword,iValue as byte)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0xff00ffff) || ((iValue && 0xff) << 16)
   *iPTR=tDword
endfunction
function PokeByte4(iPTR as dword,iValue as byte)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0x00ffffff) || ((iValue && 0xff) << 24)
   *iPTR=tDword
endfunction
function PokeWord1(iPTR as dword,iValue as word)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0xffff0000) || (iValue && 0xffff)
   *iPTR=tDword
endfunction
function PokeWord2(iPTR as dword,iValue as word)
   local tDword as dword
   tDword= *iPTR
   tDword=(tDword && 0x0000ffff) || ((iValue && 0xffff) << 16)
   *iPTR=tDword
endfunction
function PokeDword(iPTR as dword,iValue as dword)
   *iPTR=iValue
endfunction
function PokeInteger(iPTR as dword,iValue as integer)
   *iPTR=iValue
endfunction
function PokeFloat(iPTR as dword,iValue as float)
   *iPTR=iValue
endfunction

`----------------------------------------------------
` Quick Sort Array
`----------------------------------------------------
function QuickSortArray(iLeft as integer,iRight as integer)
   local tPivot as integer
   local tLeft as integer
   local tRight as integer
   tPivot=QuickSortVal((iLeft+iRight)/2)
   tLeft=iLeft
   tRight=iRight
   repeat
      while QuickSortVal(tLeft)<tPivot:inc tLeft:endwhile
      while tPivot<QuickSortVal(tRight):dec tRight:endwhile
      if tLeft<=tRight
         tSwap=QuickSortVal(tLeft)
         QuickSortVal(tLeft)=QuickSortVal(tRight)
         QuickSortVal(tRight)=tSwap
         tSwap=QuickSortID(tLeft)
         QuickSortID(tLeft)=QuickSortID(tRight)
         QuickSortID(tRight)=tSwap
         inc tLeft:dec tRight
      endif
   until tLeft>=tRight
   if iLeft<tRight then QuickSortArray(iLeft,tRight)
   if tLeft<iRight then QuickSortArray(tLeft,iRight)
endfunction

`----------------------------------------------------
` Min Max Set
`----------------------------------------------------
function MinMaxVecReSet()
   MinVec.x=9999999999:MinVec.y=9999999999:MinVec.z=9999999999
   MaxVec.x=-9999999999:MaxVec.y=-9999999999:MaxVec.z=-9999999999
endfunction

`----------------------------------------------------
` Min Max Get
`----------------------------------------------------
function MinMaxVec(iX as float,iY as float,iZ as float)
   if iX<MinVec.x then MinVec.x=iX
   if iX>MaxVec.x then MaxVec.x=iX
   if iY<MinVec.y then MinVec.y=iY
   if iY>MaxVec.y then MaxVec.y=iY
   if iZ<MinVec.z then MinVec.z=iZ
   if iZ>MaxVec.z then MaxVec.z=iZ
endfunction

`----------------------------------------------------
` Min Max Vec
`----------------------------------------------------
function MinMaxPositionSize()
   MinMaxSize.x=(MaxVec.x-MinVec.x)
   MinMaxSize.y=(MaxVec.y-MinVec.y)
   MinMaxSize.z=(MaxVec.z-MinVec.z)
   MinMaxPos.x=MinVec.x+(MinMaxSize.x/2)
   MinMaxPos.y=MinVec.y+(MinMaxSize.y/2)
   MinMaxPos.z=MinVec.z+(MinMaxSize.z/2)
endfunction

`----------------------------------------------------
` In Distance
`----------------------------------------------------
function InDistance(iX as float,iY as float,iZ as float,ipX as float,ipY as float,ipZ as float,iDis as float)
   set vector3 Vector3(1),iX-ipX,iY-ipY,iZ-ipZ
   if length vector3(Vector3(1))<iDis then exitfunction 1
endfunction 0

`----------------------------------------------------
` In Normal
`----------------------------------------------------
function InNormal(iFromX as float,iFromY as float,iFromZ as float,iX as float,iY as float,iZ as float,iNorX as float,iNorY as float,iNorZ as float)
   local tReturn as float
   iFromX=iFromX-iX:iFromY=iFromY-iY:iFromZ=iFromZ-iZ
   tReturn=iNorX*iFromX+iNorY*iFromY+iNorZ*iFromZ
endfunction tReturn

`----------------------------------------------------
` Box Collision
`----------------------------------------------------
function BoxCollision(iX as float,iY as float,iZ as float,ipX as float,ipY as float,ipZ as float,iSx as float,iSy as float,iSz as float)
   if iX<(ipX+(iSx/2)) and iX>(ipX-(iSx/2))
      if iY<(ipY+(iSy/2)) and iY>(ipY-(iSy/2))
         if iZ<(ipZ+(iSz/2)) and iZ>(ipZ-(iSz/2)) then exitfunction 1
      endif
   endif
endfunction 0

`----------------------------------------------------
` Plane Ray Cast
`----------------------------------------------------
function RayPlaneCast(iFromX as float,iFromY as float,iFromZ as float,iToX as float,iToY as float,iToZ as float,iX as float,iY as float,iZ as float,iNorX as float,iNorY as float,iNorZ as float)
   iFromX=iFromX-iX:iFromY=iFromY-iY:iFromZ=iFromZ-iZ
   iToX=iToX-iX:iToY=iToY-iY:iToZ=iToZ-iZ
   Vector4Float(0).x=iNorX*(iToX-iFromX)+iNorY*(iToY-iFromY)+iNorZ*(iToZ-iFromZ)
   Vector4Float(0).w=-(iNorX*iFromX+iNorY*iFromY+iNorZ*iFromZ)/Vector4Float(0).x
   Vector4Float(0).x=iX+(iFromX+Vector4Float(0).w*(iToX-iFromX))
   Vector4Float(0).y=iY+(iFromY+Vector4Float(0).w*(iToY-iFromY))
   Vector4Float(0).z=iZ+(iFromZ+Vector4Float(0).w*(iToZ-iFromZ))
endfunction

`----------------------------------------------------
` Triangle Ray Cast
`----------------------------------------------------
function RayTriangleCast(iFromX as float,iFromY as float,iFromZ as float,iToX as float,iToY as float,iToZ as float)
   iToX=iToX-iFromX:iToY=iToY-iFromY:iToZ=iToZ-iFromZ
   Vector4Float(4).x=Vector4Float(3).x-Vector4Float(1).x
   Vector4Float(4).y=Vector4Float(3).y-Vector4Float(1).y
   Vector4Float(4).z=Vector4Float(3).z-Vector4Float(1).z
   Vector4Float(5).x=Vector4Float(2).x-Vector4Float(1).x
   Vector4Float(5).y=Vector4Float(2).y-Vector4Float(1).y
   Vector4Float(5).z=Vector4Float(2).z-Vector4Float(1).z
   Vector4Float(6).x=(iToY*Vector4Float(5).z)-(Vector4Float(5).y*iToZ)
   Vector4Float(6).y=(iToZ*Vector4Float(5).x)-(Vector4Float(5).z*iToX)
   Vector4Float(6).z=(iToX*Vector4Float(5).y)-(Vector4Float(5).x*iToY)
   Vector4Float(4).w=(Vector4Float(4).x* Vector4Float(6).x)+(Vector4Float(4).y*Vector4Float(6).y)+(Vector4Float(4).z*Vector4Float(6).z)
   if Vector4Float(4).w>-0.00001 and Vector4Float(4).w<0.00001 then exitfunction 0
   Vector4Float(4).w=1.0/Vector4Float(4).w
   Vector4Float(7).x=iFromX-Vector4Float(1).x
   Vector4Float(7).y=iFromY-Vector4Float(1).y
   Vector4Float(7).z=iFromZ-Vector4Float(1).z
   Vector4Float(5).w=Vector4Float(4).w*((Vector4Float(7).x*Vector4Float(6).x)+(Vector4Float(7).y*Vector4Float(6).y)+(Vector4Float(7).z*Vector4Float(6).z))
   if Vector4Float(5).w<0 or Vector4Float(5).w>1 then exitfunction 0
   Vector4Float(8).x=(Vector4Float(7).y*Vector4Float(4).z)-(Vector4Float(4).y*Vector4Float(7).z)
   Vector4Float(8).y=(Vector4Float(7).z*Vector4Float(4).x)-(Vector4Float(4).z*Vector4Float(7).x)
   Vector4Float(8).z=(Vector4Float(7).x*Vector4Float(4).y)-(Vector4Float(4).x*Vector4Float(7).y)
   Vector4Float(6).w=Vector4Float(4).w*((iToX*Vector4Float(8).x)+(iToY*Vector4Float(8).y)+(iToZ*Vector4Float(8).z))
   if Vector4Float(6).w<0.0 or Vector4Float(5).w+Vector4Float(6).w>1.0 then exitfunction 0
   Vector4Float(7).w=Vector4Float(4).w*((Vector4Float(5).x*Vector4Float(8).x)+(Vector4Float(5).y*Vector4Float(8).y)+(Vector4Float(5).z*Vector4Float(8).z))
   if Vector4Float(7).w<0 or Vector4Float(7).w>1 then exitfunction 0
   Vector4Float(9).x=(Vector4Float(4).y*Vector4Float(5).z)-(Vector4Float(4).z*Vector4Float(5).y)
   Vector4Float(9).y=(Vector4Float(4).z*Vector4Float(5).x)-(Vector4Float(4).x*Vector4Float(5).z)
   Vector4Float(9).z=(Vector4Float(4).x*Vector4Float(5).y)-(Vector4Float(4).y*Vector4Float(5).x)
   Vector4Float(10).x=-Vector4Float(9).x*Vector4Float(1).x-Vector4Float(9).y*Vector4Float(1).y-Vector4Float(9).z*Vector4Float(1).z
   Vector4Float(10).y=Vector4Float(9).x*iToX+Vector4Float(9).y*iToY+Vector4Float(9).z*iToZ
   Vector4Float(10).z=-(Vector4Float(10).x+Vector4Float(9).x*iFromX+Vector4Float(9).y*iFromY+Vector4Float(9).z*iFromZ)/Vector4Float(10).y
   Vector4Float(0).x=iFromX+Vector4Float(10).z*iToX
   Vector4Float(0).y=iFromY+Vector4Float(10).z*iToY
   Vector4Float(0).z=iFromZ+Vector4Float(10).z*iToZ
endfunction 1

`----------------------------------------------------
` Get Object Bounds
`----------------------------------------------------
function GetObjectBounds(iObject as integer)
   if iObject>0
      Vector4Float(0).x=object size x(iObject,1)
      Vector4Float(0).y=object size y(iObject,1)
      Vector4Float(0).z=object size z(iObject,1)
      Vector4Float(1).x=object position x(iObject)
      Vector4Float(1).y=object position y(iObject)
      Vector4Float(1).z=object position z(iObject)
      Vector4Float(2).x=object angle x(iObject)
      Vector4Float(2).y=object angle y(iObject)
      Vector4Float(2).z=object angle z(iObject)
   else
      iObject=-iObject
   endif
   rotate x matrix4 Matrix(1),wrapvalue(Vector4Float(2).x)*0.01745329251
   rotate y matrix4 Matrix(2),wrapvalue(Vector4Float(2).y)*0.01745329251
   rotate z matrix4 Matrix(3),wrapvalue(Vector4Float(2).z)*0.01745329251
   multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
   multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
   MinMaxVecReSet()
   for b=0 to 7
      set vector3 Vector3(1),Vector4Float(0).x*XZYObjectBounds(b).x,Vector4Float(0).y*XZYObjectBounds(b).y,Vector4Float(0).z*XZYObjectBounds(b).z
      transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
      MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   next b
   MinMaxPositionSize()
   Vector4Float(3).x=MinMaxSize.x/2
   Vector4Float(3).y=MinMaxSize.y/2
   Vector4Float(3).z=MinMaxSize.z/2
   if Vector4Float(3).x=0 then Vector4Float(3).x=0.01
   if Vector4Float(3).y=0 then Vector4Float(3).y=0.01
   if Vector4Float(3).z=0 then Vector4Float(3).z=0.01
   Vector4Float(3).w=Vector4Float(3).x
   if Vector4Float(3).y>Vector4Float(3).w then Vector4Float(3).w=Vector4Float(3).y
   if Vector4Float(3).z>Vector4Float(3).w then Vector4Float(3).w=Vector4Float(3).z
   Vector4Float(4).x=Vector4Float(0).x/(object size x(iObject)/100)
   Vector4Float(4).y=Vector4Float(0).y/(object size y(iObject)/100)
   Vector4Float(4).z=Vector4Float(0).z/(object size z(iObject)/100)
   Vector4Float(5).x=object collision center x(iObject)
   Vector4Float(5).y=object collision center y(iObject)
   Vector4Float(5).z=object collision center z(iObject)
endfunction

`----------------------------------------------------
` Calculate object Tangents
`----------------------------------------------------
function CalculateObjectTangents(iObject as integer,iFVF as dword)
   local tUv1 as Vec2Float
   local tUv2 as Vec2Float
   if iFVF>0 then convert object fvf iObject,iFVF
   tLimb=0
   repeat
      lock vertexdata for limb iObject,tLimb,2
         local dim tVertexTangent(get vertexdata vertex count()) as Vec3Float
         for v=0 to get vertexdata index count()-1
            i1=get indexdata(v+0):i2=get indexdata(v+1):i3=get indexdata(v+2)
            Vector4Float(31).x=get vertexdata position x(i2)-get vertexdata position x(i1)
            Vector4Float(32).x=get vertexdata position x(i3)-get vertexdata position x(i1)
            Vector4Float(31).y=get vertexdata position y(i2)-get vertexdata position y(i1)
            Vector4Float(32).y=get vertexdata position y(i3)-get vertexdata position y(i1)
            Vector4Float(31).z=get vertexdata position z(i2)-get vertexdata position z(i1)
            Vector4Float(32).z=get vertexdata position z(i3)-get vertexdata position z(i1)
            set vector3 Vector3(1),Vector4Float(31).x,Vector4Float(31).y,Vector4Float(31).z
            set vector3 Vector3(2),Vector4Float(32).x,Vector4Float(32).y,Vector4Float(32).z
            cross product vector3 Vector3(1),Vector3(1),Vector3(2)
            normalize vector3 Vector3(1),Vector3(1)
            tUv1.x=get vertexdata u(i2,0)-get vertexdata u(i1,0)
            tUv2.x=get vertexdata u(i3,0)-get vertexdata u(i1,0)
            tUv1.y=get vertexdata v(i2,0)-get vertexdata v(i1,0)
            tUv2.y=get vertexdata v(i3,0)-get vertexdata v(i1,0)
            Vector4Float(30).w=1.0/(tUv1.x*tUv2.y-tUv2.x*tUv1.y)
            Vector4Float(30).x=(tUv2.y*Vector4Float(31).x-tUv1.y*Vector4Float(32).x)*Vector4Float(30).w
            Vector4Float(30).y=(tUv2.y*Vector4Float(31).y-tUv1.y*Vector4Float(32).y)*Vector4Float(30).w
            Vector4Float(30).z=(tUv2.y*Vector4Float(31).z-tUv1.y*Vector4Float(32).z)*Vector4Float(30).w
            set vector3 Vector3(2),Vector4Float(30).x,Vector4Float(30).y,Vector4Float(30).z
            Vector4Float(30).w=dot product vector3(Vector3(1),Vector3(2))
            Vector4Float(30).x=Vector4Float(30).x-x vector3(Vector3(1))*Vector4Float(30).w
            Vector4Float(30).y=Vector4Float(30).y-y vector3(Vector3(1))*Vector4Float(30).w
            Vector4Float(30).z=Vector4Float(30).z-z vector3(Vector3(1))*Vector4Float(30).w
            tVertexTangent(i1).x=tVertexTangent(i1).x+Vector4Float(30).x
            tVertexTangent(i1).y=tVertexTangent(i1).y+Vector4Float(30).y
            tVertexTangent(i1).z=tVertexTangent(i1).z+Vector4Float(30).z
            tVertexTangent(i2).x=tVertexTangent(i2).x+Vector4Float(30).x
            tVertexTangent(i2).y=tVertexTangent(i2).y+Vector4Float(30).y
            tVertexTangent(i2).z=tVertexTangent(i2).z+Vector4Float(30).z
            tVertexTangent(i3).x=tVertexTangent(i3).x+Vector4Float(30).x
            tVertexTangent(i3).y=tVertexTangent(i3).y+Vector4Float(30).y
            tVertexTangent(i3).z=tVertexTangent(i3).z+Vector4Float(30).z
            v=v+2
         next v
         for v=0 to get vertexdata vertex count()-1
            set vector3 Vector3(1),tVertexTangent(v).x,tVertexTangent(v).y,tVertexTangent(v).z
            normalize vector3 Vector3(1),Vector3(1)
            set vertexdata uv v,1,x vector3(Vector3(1)),y vector3(Vector3(1))
            set vertexdata uv v,2,z vector3(Vector3(1)),get vertexdata v(v,2)
         next v
         undim tVertexTangent()
      unlock vertexdata
      inc tLimb
   until limb exist(iObject,tLimb)=0
   if iFVF>0 then convert object fvf iObject,iFVF
endfunction

`----------------------------------------------------
` Get View Frustum matrix (by Lost in Thought)
`----------------------------------------------------
function GetViewProjectFrustum(iFrustumIndex as integer,iCamera as integer)
   if iCamera>0
      set current camera iCamera
      view matrix4 Matrix(1)
      projection matrix4 Matrix(2)
      multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
   endif
   for i=0 to 15
      ViewProjectVec(i)=get matrix4 element(Matrix(3),i)
   next i
   ViewProjectFrustumVec(iFrustumIndex,0,0)=ViewProjectVec(3)-ViewProjectVec(0)
   ViewProjectFrustumVec(iFrustumIndex,0,1)=ViewProjectVec(7)-ViewProjectVec(4)
   ViewProjectFrustumVec(iFrustumIndex,0,2)=ViewProjectVec(11)-ViewProjectVec(8)
   ViewProjectFrustumVec(iFrustumIndex,0,3)=ViewProjectVec(15)-ViewProjectVec(12)
   ViewProjectFrustumVec(iFrustumIndex,1,0)=ViewProjectVec(3)+ViewProjectVec(0)
   ViewProjectFrustumVec(iFrustumIndex,1,1)=ViewProjectVec(7)+ViewProjectVec(4)
   ViewProjectFrustumVec(iFrustumIndex,1,2)=ViewProjectVec(11)+ViewProjectVec(8)
   ViewProjectFrustumVec(iFrustumIndex,1,3)=ViewProjectVec(15)+ViewProjectVec(12)
   ViewProjectFrustumVec(iFrustumIndex,2,0)=ViewProjectVec(3)+ViewProjectVec(1)
   ViewProjectFrustumVec(iFrustumIndex,2,1)=ViewProjectVec(7)+ViewProjectVec(5)
   ViewProjectFrustumVec(iFrustumIndex,2,2)=ViewProjectVec(11)+ViewProjectVec(9)
   ViewProjectFrustumVec(iFrustumIndex,2,3)=ViewProjectVec(15)+ViewProjectVec(13)
   ViewProjectFrustumVec(iFrustumIndex,3,0)=ViewProjectVec(3)-ViewProjectVec(1)
   ViewProjectFrustumVec(iFrustumIndex,3,1)=ViewProjectVec(7)-ViewProjectVec(5)
   ViewProjectFrustumVec(iFrustumIndex,3,2)=ViewProjectVec(11)-ViewProjectVec(9)
   ViewProjectFrustumVec(iFrustumIndex,3,3)=ViewProjectVec(15)-ViewProjectVec(13)
   ViewProjectFrustumVec(iFrustumIndex,4,0)=ViewProjectVec(3)-ViewProjectVec(2)
   ViewProjectFrustumVec(iFrustumIndex,4,1)=ViewProjectVec(7)-ViewProjectVec(6)
   ViewProjectFrustumVec(iFrustumIndex,4,2)=ViewProjectVec(11)-ViewProjectVec(10)
   ViewProjectFrustumVec(iFrustumIndex,4,3)=ViewProjectVec(15)-ViewProjectVec(14)
   ViewProjectFrustumVec(iFrustumIndex,5,0)=ViewProjectVec(3)+ViewProjectVec(2)
   ViewProjectFrustumVec(iFrustumIndex,5,1)=ViewProjectVec(7)+ViewProjectVec(6)
   ViewProjectFrustumVec(iFrustumIndex,5,2)=ViewProjectVec(11)+ViewProjectVec(10)
   ViewProjectFrustumVec(iFrustumIndex,5,3)=ViewProjectVec(15)+ViewProjectVec(14)
   set vector3 Vector3(1),ViewProjectFrustumVec(iFrustumIndex,0,0),ViewProjectFrustumVec(iFrustumIndex,0,1),ViewProjectFrustumVec(iFrustumIndex,0,2)
   Vector4Float(1).x=1.0/length vector3(Vector3(1))
   set vector3 Vector3(1),ViewProjectFrustumVec(iFrustumIndex,2,0),ViewProjectFrustumVec(iFrustumIndex,2,1),ViewProjectFrustumVec(iFrustumIndex,2,2)
   Vector4Float(1).y=1.0/length vector3(Vector3(1))
   set vector3 Vector3(1),ViewProjectFrustumVec(iFrustumIndex,4,0),ViewProjectFrustumVec(iFrustumIndex,4,1),ViewProjectFrustumVec(iFrustumIndex,4,2)
   Vector4Float(1).z=1.0/length vector3(Vector3(1))
   set vector3 Vector3(1),ViewProjectFrustumVec(iFrustumIndex,5,0),ViewProjectFrustumVec(iFrustumIndex,5,1),ViewProjectFrustumVec(iFrustumIndex,5,2)
   Vector4Float(1).w=1.0/length vector3(Vector3(1))
   for c=0 to 3
      ViewProjectFrustumVec(iFrustumIndex,0,c)=ViewProjectFrustumVec(iFrustumIndex,0,c)*Vector4Float(1).x
      ViewProjectFrustumVec(iFrustumIndex,1,c)=ViewProjectFrustumVec(iFrustumIndex,1,c)*Vector4Float(1).x
      ViewProjectFrustumVec(iFrustumIndex,2,c)=ViewProjectFrustumVec(iFrustumIndex,2,c)*Vector4Float(1).y
      ViewProjectFrustumVec(iFrustumIndex,3,c)=ViewProjectFrustumVec(iFrustumIndex,3,c)*Vector4Float(1).y
      ViewProjectFrustumVec(iFrustumIndex,4,c)=ViewProjectFrustumVec(iFrustumIndex,4,c)*Vector4Float(1).z
      ViewProjectFrustumVec(iFrustumIndex,5,c)=ViewProjectFrustumVec(iFrustumIndex,5,c)*Vector4Float(1).w
   next c
endfunction

`----------------------------------------------------
` Sphere In Frustum
`----------------------------------------------------
function GetSphereInFrustum(iFrustumIndex as integer,iPosX as float,iPosY as float,iPosZ as float,iRadius as float)
   for e=0 to 5
      if (ViewProjectFrustumVec(iFrustumIndex,e,0)*iPosX)+(ViewProjectFrustumVec(iFrustumIndex,e,1)*iPosY)+(ViewProjectFrustumVec(iFrustumIndex,e,2)*iPosZ)+ViewProjectFrustumVec(iFrustumIndex,e,3)<-iRadius then exitfunction 0
   next e
endfunction 1

`----------------------------------------------------
` Box In Frustum
`----------------------------------------------------
function GetBoxInFrustum(iFrustumIndex as integer,iPosX as float,iPosY as float,iPosZ as float,iSizeX as float,iSizeY as float,iSizeZ as float)
   for e=0 to 5
      Vector4Float(1).x=ViewProjectFrustumVec(iFrustumIndex,e,0)*(iPosX-iSizeX)
      Vector4Float(2).x=ViewProjectFrustumVec(iFrustumIndex,e,0)*(iPosX+iSizeX)
      Vector4Float(1).y=ViewProjectFrustumVec(iFrustumIndex,e,1)*(iPosY-iSizeY)
      Vector4Float(2).y=ViewProjectFrustumVec(iFrustumIndex,e,1)*(iPosY+iSizeY)
      Vector4Float(1).z=ViewProjectFrustumVec(iFrustumIndex,e,2)*(iPosZ-iSizeZ)
      Vector4Float(2).z=ViewProjectFrustumVec(iFrustumIndex,e,2)*(iPosZ+iSizeZ)
      rCull=0
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
      if rCull=0
         if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
         if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
         if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
         if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
         if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
         if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0 then exitfunction 0
   next e
endfunction 1

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type VFC_BoundsData
   InUse as integer
   UpDate as boolean
   Handel as integer
   Group as integer
   Visible as boolean
   QueryVisible as boolean
   DrawDistance as float
   Dynamic as boolean
   Position as Vec3Float
   Size as Vec3Float
   Radious as float
   Min as Vec3Float
   Max as Vec3Float
   pQuadTree as dword
   pQuadTreeIndex as dword
   Occlude as Vec3Integer
   OccludeAdd as boolean
   OccludeRemove as boolean
   OccludeUpdate as boolean
   Shadow as boolean
   DirectionalShadow as integer
   Emitter as integer
   Object as integer
   ObjectAdd as boolean
   ObjectPosition as Vec3Float
   ObjectScale as Vec3Float
   ObjectAngle as Vec3Float
   BatchGroup as integer
   MapScape as Vec3Integer
endtype

type VFC_QuadTreeData
   InUse as integer
   UpDate as boolean
   QuadTreeStartX as integer
   QuadTreeStartZ as integer
   QuadTreeLevel as integer
   QuadTreeHandel as integer
   QuadTreeIndex as integer
   QuadTree1 as integer
   QuadTree2 as integer
   QuadTree3 as integer
   QuadTree4 as integer
   Position as Vec3Float
   Size as Vec3Float
   Radious as float
   Min as Vec3Float
   Max as Vec3Float
   BoundsMin as Vec3Integer
   BoundsMax as Vec3Integer
   BoundsCount as integer
   BoundsRemove as boolean
   BoundsMemSize as integer
   pBounds as dword
endtype

`----------------------------------------------------
` View Frustum Culling Setup
`----------------------------------------------------
function FrustumCulling_SetUp()

   `View frustum culling
      global VFC_BoundsCount as integer
      global VFC_BoundsFreeup as integer
      global VFC_BoundsUpDateCount as integer
      global VFC_FrustumIndex as integer
      global VFC_InFrustumCount as integer
      global VFC_ResetQuerylist as integer
      global VFC_OccludeIndex as integer
      global VFC_QuadTreeSize as integer
      global VFC_QuadTreeMaxLevel as integer
      global VFC_QuadTreeCount as integer
      global VFC_QuadTreeFreeup as integer
      global VFC_QuadTreeActiveCount as integer
      global VFC_QuadTreeUpDateCount as integer
      global VFC_QuadTreeRemoveCount as integer
      global VFC_DirectionalRange as Float
      global VFC_DirectionalCullRange as Float
      global VFC_QuadTreeBoxCull as Vec4Float
      global dim VFC_Bounds() as VFC_BoundsData
      global dim VFC_BoundsUpdate() as integer
      global dim VFC_InFrustum() as integer
      global dim VFC_VisibleCount(12) as integer
      global dim VFC_Visible(0,12) as integer
      global dim VFC_QuadTree() as VFC_QuadTreeData
      global dim VFC_QuadTreeUpdate() as integer
      global dim VFC_QuadTreeRemove() as integer
      global dim VFC_QuadTreeActive() as integer
      global dim VFC_QuadTreeStart(128,128) as integer
      VFC_BoundsCount=-1
      VFC_BoundsFreeup=0
      VFC_BoundsUpDateCount=-1
      VFC_InFrustumCount=-1
      VFC_QuadTreeSize=32000
      VFC_QuadTreeMaxLevel=5
      VFC_QuadTreeCount=-1
      VFC_QuadTreeFreeup=0
      VFC_QuadTreeActiveCount=-1
      VFC_QuadTreeUpDateCount=-1
      VFC_QuadTreeRemoveCount=-1
      VFC_DirectionalCullRange=66
      for x=0 to 12:VFC_VisibleCount(x)=-1:next x

   `Hierarchical z buffer occlusion
      global HZB_Running as integer
      global HZB_HWNDi as string
      global HZB_Mutex as integer
      global HZB_pCamera as dword
      global HZB_pBounds as dword
      global HZB_pTerrain as dword
      global HZB_pTerrainHeight as dword
      global HZB_pTerrainHeightEdit as dword
      global HZB_OcclusionCount as integer
      global HZB_AddOcclusionCount as integer
      global HZB_AddObjectCount as integer
      global HZB_AddBatchCount as integer
      global HZB_UpdateOcclusionCount as integer
      global HZB_RemoveOcclusionCount as integer
      global dim HZB_BankHandel(15) as integer
      global dim HZB_AddOcclusion() as integer
      global dim HZB_AddObject() as integer
      global dim HZB_AddBatch() as integer
      global dim HZB_UpdateOcclusion() as integer
      global dim HZB_RemoveOcclusion() as integer
      HZB_OcclusionCount=-1
      HZB_AddOcclusionCount=-1
      HZB_AddObjectCount=-1
      HZB_AddBatchCount=-1
      HZB_UpdateOcclusionCount=-1
      HZB_RemoveOcclusionCount=-1
      HZB_OcclusionActiveCount=-1
      tHWND=GetActiveWindow()
      HZB_HWNDi=str$(tHWND)
      HZB_HWNDi=mid$(HZB_HWNDi,len(HZB_HWNDi))+mid$(HZB_HWNDi,len(HZB_HWNDi)-1)+mid$(HZB_HWNDi,len(HZB_HWNDi)-2)
      HZB_Mutex=find free sysobj()
      make sysobj mutex HZB_Mutex,"hzbocc"+HZB_HWNDi
      lock sysobj HZB_Mutex
      HZB_BankHandel(0)=find free bank()
      map shared mem to bank "camera"+HZB_HWNDi,HZB_BankHandel(0),256
      zero bank HZB_BankHandel(0)
      HZB_pCamera=get bank ptr(HZB_BankHandel(0))
      HZB_BankHandel(1)=find free bank()
      map shared mem to bank "bounds"+HZB_HWNDi,HZB_BankHandel(1),256
      zero bank HZB_BankHandel(1)
      HZB_pBounds=get bank ptr(HZB_BankHandel(1))
      HZB_BankHandel(2)=find free bank()
      map shared mem to bank "terrain"+HZB_HWNDi,HZB_BankHandel(2),256
      zero bank HZB_BankHandel(2)
      HZB_pTerrain=get bank ptr(HZB_BankHandel(2))
      HZB_BankHandel(14)=find free bank()
      map shared mem to bank "terrainheight"+HZB_HWNDi,HZB_BankHandel(14),67240004
      zero bank HZB_BankHandel(14)
      HZB_pTerrainHeight=get bank ptr(HZB_BankHandel(14))
      HZB_BankHandel(15)=find free bank()
      map shared mem to bank "terrainheightedit"+HZB_HWNDi,HZB_BankHandel(15),16388
      zero bank HZB_BankHandel(15)
      HZB_pTerrainHeightEdit=get bank ptr(HZB_BankHandel(15))
      unlock sysobj HZB_Mutex
      HZB_Running=execute executable(AL_WorkingDirectory+"\Shaders\Occlusion\Occlusion Client.exe",str$(tHWND),AL_WorkingDirectory+"\Shaders\Occlusion\")

endfunction

`----------------------------------------------------
` Add View Frustum Culling Bounds
`----------------------------------------------------
function FrustumCulling_AddBounds(iHandel as integer,iGroup as integer)
   tBounds=-1
   for b=VFC_BoundsFreeup to VFC_BoundsCount
      if VFC_Bounds(b).InUse=0 then tBounds=b:exit
   next b
   if tBounds=-1
      tBounds=VFC_BoundsCount+1
      inc VFC_BoundsCount,100
      dim VFC_Bounds(VFC_BoundsCount)
      dim VFC_BoundsUpdate(VFC_BoundsCount)
      dim VFC_InFrustum(VFC_BoundsCount)
      dim VFC_Visible(VFC_BoundsCount,12)
   endif
   VFC_BoundsFreeup=tBounds
   VFC_Bounds(tBounds).InUse=1
   VFC_Bounds(tBounds).Handel=iHandel
   VFC_Bounds(tBounds).Group=iGroup
   VFC_Bounds(tBounds).Visible=1
   VFC_Bounds(tBounds).DrawDistance=30
   VFC_Bounds(tBounds).Dynamic=0
   VFC_Bounds(tBounds).Occlude.x=0
   VFC_Bounds(tBounds).Occlude.y=0
   VFC_Bounds(tBounds).Occlude.z=0
   VFC_Bounds(tBounds).Shadow=0
   VFC_Bounds(tBounds).DirectionalShadow=0
   VFC_Bounds(tBounds).Emitter=0
   VFC_Bounds(tBounds).Min.x=-99999999
   VFC_Bounds(tBounds).MapScape.x=0
   VFC_Bounds(tBounds).MapScape.y=0
   VFC_Bounds(tBounds).MapScape.z=0
   VFC_Bounds(tBounds).Object=0
   VFC_Bounds(tBounds).pQuadTree=make memory(VFC_QuadTreeMaxLevel*4)
   VFC_Bounds(tBounds).pQuadTreeIndex=make memory(VFC_QuadTreeMaxLevel*4)
   fill memory VFC_Bounds(tBounds).pQuadTree,0,VFC_QuadTreeMaxLevel*4
   fill memory VFC_Bounds(tBounds).pQuadTreeIndex,0,VFC_QuadTreeMaxLevel*4
   Occlusion_Add(tBounds)
endfunction tBounds

`----------------------------------------------------
` Remove View Frustum Culling Bounds
`----------------------------------------------------
function FrustumCulling_RemoveBounds(iBounds as integer)
   if VFC_Bounds(iBounds).InUse=1
      FrustumCulling_SetBoundsVisible(iBounds,0)
      Occlusion_Remove(iBounds)
      delete memory VFC_Bounds(iBounds).pQuadTree
      delete memory VFC_Bounds(iBounds).pQuadTreeIndex
      VFC_Bounds(iBounds).InUse=0
      if VFC_BoundsFreeup>iBounds then VFC_BoundsFreeup=iBounds
   endif
endfunction

`----------------------------------------------------
` Remove View Frustum Culling Bounds
`----------------------------------------------------
function FrustumCulling_SetBoundsVisible(iBounds as integer,iVisible as boolean)
   if VFC_Bounds(iBounds).InUse=1
      if VFC_Bounds(iBounds).Visible<>iVisible
         VFC_Bounds(iBounds).Visible=iVisible
         if VFC_Bounds(iBounds).Visible=1
            if VFC_Bounds(iBounds).UpDate=0 and VFC_Bounds(iBounds).Group<7
               VFC_Bounds(iBounds).UpDate=1
               inc VFC_BoundsUpDateCount
               VFC_BoundsUpdate(VFC_BoundsUpDateCount)=iBounds
            endif
            VFC_Bounds(iBounds).Occlude.x=0
            VFC_Bounds(iBounds).Occlude.y=0
            VFC_Bounds(iBounds).Occlude.z=0
         else
            if VFC_Bounds(iBounds).Group<7
               for x=0 to VFC_QuadTreeMaxLevel-1
                  tQuadTreeNode=PeekInteger(VFC_Bounds(iBounds).pQuadTree+(x*4))-1
                  if tQuadTreeNode>-1
                     tQuadTreeIndex=PeekInteger(VFC_Bounds(iBounds).pQuadTreeIndex+(x*4))-1
                     PokeInteger(VFC_QuadTree(tQuadTreeNode).pBounds+(tQuadTreeIndex*4),-1)
                     if VFC_QuadTree(tQuadTreeNode).BoundsRemove=0
                        VFC_QuadTree(tQuadTreeNode).BoundsRemove=1
                        inc VFC_QuadTreeRemoveCount
                        VFC_QuadTreeRemove(VFC_QuadTreeRemoveCount)=tQuadTreeNode
                     endif
                     if VFC_QuadTree(tQuadTreeNode).UpDate=0
                       if VFC_QuadTree(tQuadTreeNode).BoundsMin.x=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMin.y=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMin.z=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.x=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.y=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.z=iBounds
                           VFC_QuadTree(tQuadTreeNode).UpDate=1
                           inc VFC_QuadTreeUpDateCount
                           VFC_QuadTreeUpdate(VFC_QuadTreeUpDateCount)=tQuadTreeNode
                        endif
                     endif
                  endif
                  PokeInteger(VFC_Bounds(iBounds).pQuadTree+(x*4),0)
                  PokeInteger(VFC_Bounds(iBounds).pQuadTreeIndex+(x*4),0)
               next x
            endif
         endif
         Occlusion_BoundsUpdate(iBounds)
      endif
   endif
endfunction

`----------------------------------------------------
` Set View Frustum Culling Bounds
`----------------------------------------------------
function FrustumCulling_SetBounds(iBounds as integer,iPosX as float,iPosY as float,iPosZ as float,iSizeX as float,iSizeY as float,iSizeZ as float)
   if VFC_Bounds(iBounds).InUse=1
      VFC_Bounds(iBounds).Position.x=iPosX
      VFC_Bounds(iBounds).Position.y=iPosY
      VFC_Bounds(iBounds).Position.z=iPosZ
      VFC_Bounds(iBounds).Size.x=iSizeX
      VFC_Bounds(iBounds).Size.y=iSizeY
      VFC_Bounds(iBounds).Size.z=iSizeZ
      VFC_Bounds(iBounds).Radious=VFC_Bounds(iBounds).Size.x
      if VFC_Bounds(iBounds).Size.y>VFC_Bounds(iBounds).Radious then VFC_Bounds(iBounds).Radious=VFC_Bounds(iBounds).Size.y
      if VFC_Bounds(iBounds).Size.z>VFC_Bounds(iBounds).Radious then VFC_Bounds(iBounds).Radious=VFC_Bounds(iBounds).Size.z
      tDifference=0
      if VFC_Bounds(iBounds).Min.x<>iPosX-((iSizeX+0.1)*0.5) then VFC_Bounds(iBounds).Min.x=iPosX-((iSizeX+0.1)*0.5):tDifference=1
      if VFC_Bounds(iBounds).Min.y<>iPosY-((iSizeY+0.1)*0.5) then VFC_Bounds(iBounds).Min.y=iPosY-((iSizeY+0.1)*0.5):tDifference=1
      if VFC_Bounds(iBounds).Min.z<>iPosZ-((iSizeZ+0.1)*0.5) then VFC_Bounds(iBounds).Min.z=iPosZ-((iSizeZ+0.1)*0.5):tDifference=1
      if VFC_Bounds(iBounds).Max.x<>iPosX+((iSizeX+0.1)*0.5) then VFC_Bounds(iBounds).Max.x=iPosX+((iSizeX+0.1)*0.5):tDifference=1
      if VFC_Bounds(iBounds).Max.y<>iPosY+((iSizeY+0.1)*0.5) then VFC_Bounds(iBounds).Max.y=iPosY+((iSizeY+0.1)*0.5):tDifference=1
      if VFC_Bounds(iBounds).Max.z<>iPosZ+((iSizeZ+0.1)*0.5) then VFC_Bounds(iBounds).Max.z=iPosZ+((iSizeZ+0.1)*0.5):tDifference=1
      if tDifference=1
         if VFC_Bounds(iBounds).UpDate=0 and VFC_Bounds(iBounds).Group<7
            VFC_Bounds(iBounds).UpDate=1
            inc VFC_BoundsUpDateCount
            VFC_BoundsUpdate(VFC_BoundsUpDateCount)=iBounds
         endif
         Occlusion_BoundsUpdate(iBounds)
      endif
   endif
endfunction

`----------------------------------------------------
` Set View Frustum Culling Draw Distance
`----------------------------------------------------
function FrustumCulling_SetDrawDistance(iBounds as integer,iDrawDistance as float)
   if VFC_Bounds(iBounds).InUse=1
      VFC_Bounds(iBounds).DrawDistance=iDrawDistance
      Occlusion_BoundsUpdate(iBounds)
   endif
endfunction

`----------------------------------------------------
` Frustum Culling
`----------------------------------------------------
function FrustumCulling_Query(iFrustumIndex as integer,iOccludeIndex as integer)
tRemove=0

   `Add Bounds to Node
      for x=0 to VFC_BoundsUpDateCount
         tBounds=VFC_BoundsUpdate(x)
         if VFC_Bounds(tBounds).UpDate=1
            VFC_Bounds(tBounds).UpDate=0
            if VFC_Bounds(tBounds).Visible=1 and VFC_Bounds(tBounds).Group<7
               tX=floor(VFC_Bounds(tBounds).Position.x/VFC_QuadTreeSize)
               tZ=floor(VFC_Bounds(tBounds).Position.z/VFC_QuadTreeSize)
               tQuadTreeStart=VFC_QuadTreeStart(tX+64,tZ+64)
               tQuadTreeNode=FrustumCulling_QuadTreeUpdate(tBounds,VFC_QuadTreeStart(tX+64,tZ+64)-1,1,tX,tZ,0,0)
               VFC_QuadTreeStart(tX+64,tZ+64)=tQuadTreeNode+1
               VFC_QuadTree(tQuadTreeNode).QuadTreeStartX=tX
               VFC_QuadTree(tQuadTreeNode).QuadTreeStartZ=tZ
               if tQuadTreeStart=0
                  inc VFC_QuadTreeActiveCount
                  array insert at bottom VFC_QuadTreeActive()
                  VFC_QuadTreeActive(VFC_QuadTreeActiveCount)=tQuadTreeNode
               endif
            endif
         endif
      next x
      VFC_BoundsUpDateCount=-1

   `Remove Bounds from Node
      for x=0 to VFC_QuadTreeRemoveCount
         tQuadTreeNode=VFC_QuadTreeRemove(x)
         if VFC_QuadTree(tQuadTreeNode).BoundsRemove=1
            VFC_QuadTree(tQuadTreeNode).BoundsRemove=0
            tBoundsId=0
            tBoundsNext=0
            repeat
               tBounds=VFC_QuadTree(tQuadTreeNode).pBounds+((tBoundsId+tBoundsNext)*4)
               tBounds= *tBounds
               if tBounds=-1
                  inc tBoundsNext
                  dec VFC_QuadTree(tQuadTreeNode).BoundsCount
               else
                  PokeInteger(VFC_QuadTree(tQuadTreeNode).pBounds+(tBoundsId*4),tBounds)
                  inc tBoundsId
               endif
            until tBoundsId>VFC_QuadTree(tQuadTreeNode).BoundsCount-1
            if VFC_QuadTree(tQuadTreeNode).BoundsCount>0
               for b=0 to VFC_QuadTree(tQuadTreeNode).BoundsCount-1
                  tBounds=VFC_QuadTree(tQuadTreeNode).pBounds+(b*4)
                  tBounds= *tBounds
                  tLevel=VFC_QuadTree(tQuadTreeNode).QuadTreeLevel
                  PokeInteger(VFC_Bounds(tBounds).pQuadTreeIndex+(tLevel*4),b+1)
               next b
            else
               QHandel=VFC_QuadTree(tQuadTreeNode).QuadTreeHandel
               if VFC_QuadTree(tQuadTreeNode).QuadTreeIndex=1 then VFC_QuadTree(QHandel).QuadTree1=0
               if VFC_QuadTree(tQuadTreeNode).QuadTreeIndex=2 then VFC_QuadTree(QHandel).QuadTree2=0
               if VFC_QuadTree(tQuadTreeNode).QuadTreeIndex=3 then VFC_QuadTree(QHandel).QuadTree3=0
               if VFC_QuadTree(tQuadTreeNode).QuadTreeIndex=4 then VFC_QuadTree(QHandel).QuadTree4=0
               if VFC_QuadTreeFreeup>tQuadTreeNode then VFC_QuadTreeFreeup=tQuadTreeNode
               delete memory VFC_QuadTree(tQuadTreeNode).pBounds
               VFC_QuadTree(tQuadTreeNode).InUse=0
               VFC_QuadTree(tQuadTreeNode).UpDate=0
               tRemove=1
            endif
         endif
      next x
      VFC_QuadTreeRemoveCount=-1

   `Update Quad Tree culling Bounds
      for x=0 to VFC_QuadTreeUpDateCount
         tQuadTreeNode=VFC_QuadTreeUpdate(x)
         if VFC_QuadTree(tQuadTreeNode).UpDate=1
            VFC_QuadTree(tQuadTreeNode).UpDate=0
            VFC_QuadTree(tQuadTreeNode).Min.x=999999999
            VFC_QuadTree(tQuadTreeNode).Min.y=999999999
            VFC_QuadTree(tQuadTreeNode).Min.z=999999999
            VFC_QuadTree(tQuadTreeNode).Max.x=-999999999
            VFC_QuadTree(tQuadTreeNode).Max.y=-999999999
            VFC_QuadTree(tQuadTreeNode).Max.z=-999999999
            tDifference=0
            for b=0 to VFC_QuadTree(tQuadTreeNode).BoundsCount-1
               tBounds=VFC_QuadTree(tQuadTreeNode).pBounds+(b*4)
               tBounds= *tBounds
               if VFC_Bounds(tBounds).Min.x<VFC_QuadTree(tQuadTreeNode).Min.x then VFC_QuadTree(tQuadTreeNode).Min.x=VFC_Bounds(tBounds).Min.x:VFC_QuadTree(tQuadTreeNode).BoundsMin.x=tBounds:tDifference=1
               if VFC_Bounds(tBounds).Min.y<VFC_QuadTree(tQuadTreeNode).Min.y then VFC_QuadTree(tQuadTreeNode).Min.y=VFC_Bounds(tBounds).Min.y:VFC_QuadTree(tQuadTreeNode).BoundsMin.y=tBounds:tDifference=1
               if VFC_Bounds(tBounds).Min.z<VFC_QuadTree(tQuadTreeNode).Min.z then VFC_QuadTree(tQuadTreeNode).Min.z=VFC_Bounds(tBounds).Min.z:VFC_QuadTree(tQuadTreeNode).BoundsMin.z=tBounds:tDifference=1
               if VFC_Bounds(tBounds).Max.x>VFC_QuadTree(tQuadTreeNode).Max.x then VFC_QuadTree(tQuadTreeNode).Max.x=VFC_Bounds(tBounds).Max.x:VFC_QuadTree(tQuadTreeNode).BoundsMax.x=tBounds:tDifference=1
               if VFC_Bounds(tBounds).Max.y>VFC_QuadTree(tQuadTreeNode).Max.y then VFC_QuadTree(tQuadTreeNode).Max.y=VFC_Bounds(tBounds).Max.y:VFC_QuadTree(tQuadTreeNode).BoundsMax.y=tBounds:tDifference=1
               if VFC_Bounds(tBounds).Max.z>VFC_QuadTree(tQuadTreeNode).Max.z then VFC_QuadTree(tQuadTreeNode).Max.z=VFC_Bounds(tBounds).Max.z:VFC_QuadTree(tQuadTreeNode).BoundsMax.z=tBounds:tDifference=1
            next b
            if tDifference=1
               VFC_QuadTree(tQuadTreeNode).Size.x=VFC_QuadTree(tQuadTreeNode).Max.x-VFC_QuadTree(tQuadTreeNode).Min.x
               VFC_QuadTree(tQuadTreeNode).Size.y=VFC_QuadTree(tQuadTreeNode).Max.y-VFC_QuadTree(tQuadTreeNode).Min.y
               VFC_QuadTree(tQuadTreeNode).Size.z=VFC_QuadTree(tQuadTreeNode).Max.z-VFC_QuadTree(tQuadTreeNode).Min.z
               VFC_QuadTree(tQuadTreeNode).Position.x=VFC_QuadTree(tQuadTreeNode).Min.x+(VFC_QuadTree(tQuadTreeNode).Size.x/2)
               VFC_QuadTree(tQuadTreeNode).Position.y=VFC_QuadTree(tQuadTreeNode).Min.y+(VFC_QuadTree(tQuadTreeNode).Size.y/2)
               VFC_QuadTree(tQuadTreeNode).Position.z=VFC_QuadTree(tQuadTreeNode).Min.z+(VFC_QuadTree(tQuadTreeNode).Size.z/2)
               VFC_QuadTree(tQuadTreeNode).Radious=VFC_QuadTree(tQuadTreeNode).Size.x
               if VFC_QuadTree(tQuadTreeNode).Size.y>VFC_QuadTree(tQuadTreeNode).Radious then VFC_QuadTree(tQuadTreeNode).Radious=VFC_QuadTree(tQuadTreeNode).Size.y
               if VFC_QuadTree(tQuadTreeNode).Size.z>VFC_QuadTree(tQuadTreeNode).Radious then VFC_QuadTree(tQuadTreeNode).Radious=VFC_QuadTree(tQuadTreeNode).Size.z
            endif
         endif
      next x
      VFC_QuadTreeUpDateCount=-1

   `Remove Active Quad Tree
      if tRemove=1
         tNextEelement=0
         repeat
            tQuadTreeNode=VFC_QuadTreeActive(tNextEelement)
            if VFC_QuadTree(tQuadTreeNode).QuadTree1=0 and VFC_QuadTree(tQuadTreeNode).QuadTree2=0 and VFC_QuadTree(tQuadTreeNode).QuadTree3=0 and VFC_QuadTree(tQuadTreeNode).QuadTree4=0
               tX=VFC_QuadTree(tQuadTreeNode).QuadTreeStartX
               tZ=VFC_QuadTree(tQuadTreeNode).QuadTreeStartZ
               VFC_QuadTreeStart(tX+64,tZ+64)=0
               if VFC_QuadTreeFreeup>tQuadTreeNode then VFC_QuadTreeFreeup=tQuadTreeNode
               delete memory VFC_QuadTree(tQuadTreeNode).pBounds
               VFC_QuadTree(tQuadTreeNode).InUse=0
               VFC_QuadTree(tQuadTreeNode).UpDate=0
               array delete element VFC_QuadTreeActive(),tNextEelement
               dec VFC_QuadTreeActiveCount
               dec tNextEelement
            endif
            inc tNextEelement
         until tNextEelement>VFC_QuadTreeActiveCount
      endif

   `Visible Query List
      VFC_FrustumIndex=iFrustumIndex
      VFC_OccludeIndex=iOccludeIndex
      VFC_InFrustumCount=-1
      if iOccludeIndex<7
         for x=0 to VFC_QuadTreeActiveCount
            FrustumCulling_QuadTreeCulling(VFC_QuadTreeActive(x),1)
         next x
      else
         for x=0 to VFC_QuadTreeActiveCount
            FrustumCulling_QuadTreeCullingBox(VFC_QuadTreeActive(x),1)
         next x
      endif
      if iOccludeIndex<4 then VFC_ResetQuerylist=0
      if VFC_ResetQuerylist=0
         for x=0 to VFC_VisibleCount(12):VFC_Bounds(VFC_Visible(x,12)).QueryVisible=0:next x
         for x=0 to 12:VFC_VisibleCount(x)=-1:next x
      endif
      if iOccludeIndex>3 then VFC_ResetQuerylist=1
      if iOccludeIndex=-1
         for x=0 to VFC_InFrustumCount
              tGroup=VFC_Bounds(VFC_InFrustum(x)).Group
              inc VFC_VisibleCount(tGroup)
            VFC_Visible(VFC_VisibleCount(tGroup),tGroup)=VFC_InFrustum(x)
         next x
      endif
      if iOccludeIndex=0
         for x=0 to VFC_InFrustumCount
            FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=1
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).Occlude.x=0 then FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=2
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).Occlude.y=0 and VFC_Bounds(VFC_InFrustum(x)).DirectionalShadow>0 and VFC_Bounds(VFC_InFrustum(x)).Radious>VFC_DirectionalRange then FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=3
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).Occlude.y=0 and VFC_Bounds(VFC_InFrustum(x)).DirectionalShadow>1 and VFC_Bounds(VFC_InFrustum(x)).Radious>VFC_DirectionalRange then FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=4
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).Occlude.z=0 and VFC_Bounds(VFC_InFrustum(x)).DirectionalShadow>2 and VFC_Bounds(VFC_InFrustum(x)).Radious>VFC_DirectionalRange then FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=5
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).Occlude.z=0 and VFC_Bounds(VFC_InFrustum(x)).DirectionalShadow>3 and VFC_Bounds(VFC_InFrustum(x)).Radious>VFC_DirectionalRange then FrustumCulling_BoundsVisible(VFC_InFrustum(x))
         next x
      endif
      if iOccludeIndex=7
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).QueryVisible=0 and VFC_Bounds(VFC_InFrustum(x)).Shadow=1
               VFC_Bounds(VFC_InFrustum(x)).QueryVisible=1
               tGroup=VFC_Bounds(VFC_InFrustum(x)).Group
               inc VFC_VisibleCount(tGroup)
               VFC_Visible(VFC_VisibleCount(tGroup),tGroup)=VFC_InFrustum(x)
               inc VFC_VisibleCount(12)
               VFC_Visible(VFC_VisibleCount(12),12)=VFC_InFrustum(x)
            endif
         next x
      endif
      if iOccludeIndex=8
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).QueryVisible=0 and VFC_Bounds(VFC_InFrustum(x)).Dynamic=0 and VFC_Bounds(VFC_InFrustum(x)).Shadow=1
               VFC_Bounds(VFC_InFrustum(x)).QueryVisible=1
               tGroup=VFC_Bounds(VFC_InFrustum(x)).Group
               inc VFC_VisibleCount(tGroup)
               VFC_Visible(VFC_VisibleCount(tGroup),tGroup)=VFC_InFrustum(x)
               inc VFC_VisibleCount(12)
               VFC_Visible(VFC_VisibleCount(12),12)=VFC_InFrustum(x)
            endif
         next x
      endif
      if iOccludeIndex=9
         for x=0 to VFC_InFrustumCount
            if VFC_Bounds(VFC_InFrustum(x)).QueryVisible=0 and VFC_Bounds(VFC_InFrustum(x)).Dynamic=1 and VFC_Bounds(VFC_InFrustum(x)).Shadow=1
               VFC_Bounds(VFC_InFrustum(x)).QueryVisible=1
               tGroup=VFC_Bounds(VFC_InFrustum(x)).Group
               inc VFC_VisibleCount(tGroup)
               VFC_Visible(VFC_VisibleCount(tGroup),tGroup)=VFC_InFrustum(x)
               inc VFC_VisibleCount(12)
               VFC_Visible(VFC_VisibleCount(12),12)=VFC_InFrustum(x)
            endif
         next x
      endif

endfunction

`----------------------------------------------------
` Add Bounds to Visible list
`----------------------------------------------------
function FrustumCulling_BoundsVisible(iBounds)
   set vector3 Vector3(1),AL_CameraPos.x-VFC_Bounds(iBounds).Position.x,AL_CameraPos.y-VFC_Bounds(iBounds).Position.y,AL_CameraPos.z-VFC_Bounds(iBounds).Position.z
   if length vector3(Vector3(1))/VFC_Bounds(iBounds).Radious<VFC_Bounds(iBounds).DrawDistance
      tGroup=VFC_Bounds(iBounds).Group
      inc VFC_VisibleCount(tGroup)
      VFC_Visible(VFC_VisibleCount(tGroup),tGroup)=iBounds
   endif
endfunction

`----------------------------------------------------
` QuadTree Culling
`----------------------------------------------------
function FrustumCulling_QuadTreeCulling(iQuadTreeNode as integer,iLevel as integer)
   if VFC_QuadTree(iQuadTreeNode).QuadTree1>0 then FrustumCulling_NodeCulling(VFC_QuadTree(iQuadTreeNode).QuadTree1-1,iLevel)
   if VFC_QuadTree(iQuadTreeNode).QuadTree2>0 then FrustumCulling_NodeCulling(VFC_QuadTree(iQuadTreeNode).QuadTree2-1,iLevel)
   if VFC_QuadTree(iQuadTreeNode).QuadTree3>0 then FrustumCulling_NodeCulling(VFC_QuadTree(iQuadTreeNode).QuadTree3-1,iLevel)
   if VFC_QuadTree(iQuadTreeNode).QuadTree4>0 then FrustumCulling_NodeCulling(VFC_QuadTree(iQuadTreeNode).QuadTree4-1,iLevel)
endfunction

`----------------------------------------------------
` QuadTree Culling
`----------------------------------------------------
function FrustumCulling_QuadTreeCullingBox(iQuadTreeNode as integer,iLevel as integer)
   if VFC_QuadTree(iQuadTreeNode).QuadTree1>0
      tQuadTreeNode=VFC_QuadTree(iQuadTreeNode).QuadTree1-1
      if VFC_QuadTreeBoxCull.x<VFC_QuadTree(tQuadTreeNode).Max.x+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.x>VFC_QuadTree(tQuadTreeNode).Min.x-VFC_QuadTreeBoxCull.w
         if VFC_QuadTreeBoxCull.z<VFC_QuadTree(tQuadTreeNode).Max.z+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.z>VFC_QuadTree(tQuadTreeNode).Min.z-VFC_QuadTreeBoxCull.w
            if VFC_QuadTreeBoxCull.y<VFC_QuadTree(tQuadTreeNode).Max.y+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.y>VFC_QuadTree(tQuadTreeNode).Min.y-VFC_QuadTreeBoxCull.w then FrustumCulling_NodeCulling(tQuadTreeNode,iLevel)
         endif
      endif
   endif
   if VFC_QuadTree(iQuadTreeNode).QuadTree2>0
      tQuadTreeNode=VFC_QuadTree(iQuadTreeNode).QuadTree2-1
      if VFC_QuadTreeBoxCull.x<VFC_QuadTree(tQuadTreeNode).Max.x+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.x>VFC_QuadTree(tQuadTreeNode).Min.x-VFC_QuadTreeBoxCull.w
         if VFC_QuadTreeBoxCull.z<VFC_QuadTree(tQuadTreeNode).Max.z+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.z>VFC_QuadTree(tQuadTreeNode).Min.z-VFC_QuadTreeBoxCull.w
            if VFC_QuadTreeBoxCull.y<VFC_QuadTree(tQuadTreeNode).Max.y+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.y>VFC_QuadTree(tQuadTreeNode).Min.y-VFC_QuadTreeBoxCull.w then FrustumCulling_NodeCulling(tQuadTreeNode,iLevel)
         endif
      endif
   endif
   if VFC_QuadTree(iQuadTreeNode).QuadTree3>0
      tQuadTreeNode=VFC_QuadTree(iQuadTreeNode).QuadTree3-1
      if VFC_QuadTreeBoxCull.x<VFC_QuadTree(tQuadTreeNode).Max.x+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.x>VFC_QuadTree(tQuadTreeNode).Min.x-VFC_QuadTreeBoxCull.w
         if VFC_QuadTreeBoxCull.z<VFC_QuadTree(tQuadTreeNode).Max.z+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.z>VFC_QuadTree(tQuadTreeNode).Min.z-VFC_QuadTreeBoxCull.w
            if VFC_QuadTreeBoxCull.y<VFC_QuadTree(tQuadTreeNode).Max.y+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.y>VFC_QuadTree(tQuadTreeNode).Min.y-VFC_QuadTreeBoxCull.w then FrustumCulling_NodeCulling(tQuadTreeNode,iLevel)
         endif
      endif
   endif
   if VFC_QuadTree(iQuadTreeNode).QuadTree4>0
      tQuadTreeNode=VFC_QuadTree(iQuadTreeNode).QuadTree4-1
      if VFC_QuadTreeBoxCull.x<VFC_QuadTree(tQuadTreeNode).Max.x+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.x>VFC_QuadTree(tQuadTreeNode).Min.x-VFC_QuadTreeBoxCull.w
         if VFC_QuadTreeBoxCull.z<VFC_QuadTree(tQuadTreeNode).Max.z+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.z>VFC_QuadTree(tQuadTreeNode).Min.z-VFC_QuadTreeBoxCull.w
            if VFC_QuadTreeBoxCull.y<VFC_QuadTree(tQuadTreeNode).Max.y+VFC_QuadTreeBoxCull.w and VFC_QuadTreeBoxCull.y>VFC_QuadTree(tQuadTreeNode).Min.y-VFC_QuadTreeBoxCull.w then FrustumCulling_NodeCulling(tQuadTreeNode,iLevel)
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Node Culling
`----------------------------------------------------
function FrustumCulling_NodeCulling(iQuadTreeNode as integer,iLevel as integer)
   tCull=FrustumCulling_NodeInFrustum(iQuadTreeNode)
   if tCull=8
      for b=0 to VFC_QuadTree(iQuadTreeNode).BoundsCount-1
         tBounds=VFC_QuadTree(iQuadTreeNode).pBounds+(b*4)
         tBounds= *tBounds
         inc VFC_InFrustumCount:VFC_InFrustum(VFC_InFrustumCount)=tBounds
      next b
   else
      if tCull>0
         if iLevel=VFC_QuadTreeMaxLevel-2
            for b=0 to VFC_QuadTree(iQuadTreeNode).BoundsCount-1
               tBounds=VFC_QuadTree(iQuadTreeNode).pBounds+(b*4)
               tBounds= *tBounds
               if FrustumCulling_BoundsInFrustum(tBounds)=1 then inc VFC_InFrustumCount:VFC_InFrustum(VFC_InFrustumCount)=tBounds
            next b
         else
            if iLevel+1<VFC_QuadTreeMaxLevel then FrustumCulling_QuadTreeCulling(iQuadTreeNode,iLevel+1)
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Node In View Frustum
`----------------------------------------------------
function FrustumCulling_NodeInFrustum(iQuadTreeNode as integer)
   for e=0 to 5
      if (ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_QuadTree(iQuadTreeNode).Position.x)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_QuadTree(iQuadTreeNode).Position.y)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_QuadTree(iQuadTreeNode).Position.z)+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)<-VFC_QuadTree(iQuadTreeNode).Radious then exitfunction 0
   next e
   for e=0 to 4
      tVisible=0
      Vector4Float(1).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_QuadTree(iQuadTreeNode).Min.x
      Vector4Float(2).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_QuadTree(iQuadTreeNode).Max.x
      Vector4Float(1).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_QuadTree(iQuadTreeNode).Min.y
      Vector4Float(2).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_QuadTree(iQuadTreeNode).Max.y
      Vector4Float(1).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_QuadTree(iQuadTreeNode).Min.z
      Vector4Float(2).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_QuadTree(iQuadTreeNode).Max.z
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if tVisible<8 then exitfunction tVisible
   next e
endfunction tVisible

`----------------------------------------------------
` Bounds In View Frustum
`----------------------------------------------------
function FrustumCulling_BoundsInFrustum(iBounds as integer)
   for e=0 to 5
      if (ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Position.x)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Position.y)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Position.z)+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)<-VFC_Bounds(iBounds).Radious then exitfunction 0
   next e
   for e=0 to 4
      tVisible=0
      Vector4Float(1).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Min.x
      Vector4Float(2).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Max.x
      Vector4Float(1).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Min.y
      Vector4Float(2).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Max.y
      Vector4Float(1).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Min.z
      Vector4Float(2).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Max.z
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
      if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
      if tVisible=0
         if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
         if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
         if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
      endif
      if tVisible=0
         if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
         if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
         if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then tVisible=1
      endif
      if tVisible=0 then exitfunction 0
   next e
endfunction 1

`----------------------------------------------------
` Bounds In View Frustum
`----------------------------------------------------
function FrustumCulling_BoundsInFrustumPartially(iBounds as integer)
   for e=0 to 5
      if (ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Position.x)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Position.y)+(ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Position.z)+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)<-VFC_Bounds(iBounds).Radious then exitfunction 0
   next e
   for e=0 to 4
      tVisible=0
      Vector4Float(1).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Min.x
      Vector4Float(2).x=ViewProjectFrustumVec(VFC_FrustumIndex,e,0)*VFC_Bounds(iBounds).Max.x
      Vector4Float(1).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Min.y
      Vector4Float(2).y=ViewProjectFrustumVec(VFC_FrustumIndex,e,1)*VFC_Bounds(iBounds).Max.y
      Vector4Float(1).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Min.z
      Vector4Float(2).z=ViewProjectFrustumVec(VFC_FrustumIndex,e,2)*VFC_Bounds(iBounds).Max.z
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(1).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(1).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(1).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if Vector4Float(2).x+Vector4Float(2).y+Vector4Float(2).z+ViewProjectFrustumVec(VFC_FrustumIndex,e,3)>0 then inc tVisible
      if tVisible<8 then exitfunction tVisible
   next e
endfunction tVisible

`----------------------------------------------------
` UpDate Quad Tree
`----------------------------------------------------
function FrustumCulling_QuadTreeUpdate(iBounds as integer,iQuadTreeNode as integer,iLevel as integer,iX as integer,iZ as integer,iQuadTreeHandel as integer,iQuadTreeIndex as integer)
   if iLevel<VFC_QuadTreeMaxLevel
      tQuadTreeNode=iQuadTreeNode
      if iQuadTreeNode=-1
         tQuadTreeNode=-1
         for c=VFC_QuadTreeFreeup to VFC_QuadTreeCount
            if VFC_QuadTree(c).InUse=0 then tQuadTreeNode=c:exit
         next c
         if tQuadTreeNode=-1
            tQuadTreeNode=VFC_QuadTreeCount+1
            inc VFC_QuadTreeCount,100
            dim VFC_QuadTree(VFC_QuadTreeCount)
            dim VFC_QuadTreeUpdate(VFC_QuadTreeCount)
            dim VFC_QuadTreeRemove(VFC_QuadTreeCount)
         endif
         VFC_QuadTreeFreeup=tQuadTreeNode
         VFC_QuadTree(tQuadTreeNode).InUse=1
         VFC_QuadTree(tQuadTreeNode).BoundsCount=0
         VFC_QuadTree(tQuadTreeNode).BoundsMemSize=-1
         VFC_QuadTree(tQuadTreeNode).pBounds=make memory(4)
         VFC_QuadTree(tQuadTreeNode).QuadTreeLevel=iLevel
         VFC_QuadTree(tQuadTreeNode).QuadTreeHandel=iQuadTreeHandel
         VFC_QuadTree(tQuadTreeNode).QuadTreeIndex=iQuadTreeIndex
         VFC_QuadTree(tQuadTreeNode).Min.x=999999999:VFC_QuadTree(tQuadTreeNode).Min.y=999999999:VFC_QuadTree(tQuadTreeNode).Min.z=999999999
         VFC_QuadTree(tQuadTreeNode).Max.x=-999999999:VFC_QuadTree(tQuadTreeNode).Max.y=-999999999:VFC_QuadTree(tQuadTreeNode).Max.z=-999999999
      endif
      tLevel=2^iLevel
      tX=floor(VFC_Bounds(iBounds).Position.x/(VFC_QuadTreeSize/tLevel))
      tZ=floor(VFC_Bounds(iBounds).Position.z/(VFC_QuadTreeSize/tLevel))
      if tZ-(iZ*2)=0
         if tX-(iX*2)=0
            VFC_QuadTree(tQuadTreeNode).QuadTree1=FrustumCulling_QuadTreeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree1-1,iLevel+1,tX,tZ,tQuadTreeNode,1)+1
            FrustumCulling_NodeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree1-1)
         else
            VFC_QuadTree(tQuadTreeNode).QuadTree2=FrustumCulling_QuadTreeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree2-1,iLevel+1,tX,tZ,tQuadTreeNode,2)+1
            FrustumCulling_NodeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree2-1)
         endif
      else
         if tX-(iX*2)=0
            VFC_QuadTree(tQuadTreeNode).QuadTree3=FrustumCulling_QuadTreeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree3-1,iLevel+1,tX,tZ,tQuadTreeNode,3)+1
            FrustumCulling_NodeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree3-1)
         else
            VFC_QuadTree(tQuadTreeNode).QuadTree4=FrustumCulling_QuadTreeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree4-1,iLevel+1,tX,tZ,tQuadTreeNode,4)+1
            FrustumCulling_NodeUpdate(iBounds,VFC_QuadTree(tQuadTreeNode).QuadTree4-1)
         endif
      endif
   else
      exitfunction -1
   endif
endfunction tQuadTreeNode

`----------------------------------------------------
` UpDate Node
`----------------------------------------------------
function FrustumCulling_NodeUpdate(iBounds as integer,iQuadTreeNode as integer)
   if iQuadTreeNode>-1
      tLevel=VFC_QuadTree(iQuadTreeNode).QuadTreeLevel
      tQuadTreeNode=PeekInteger(VFC_Bounds(iBounds).pQuadTree+(tLevel*4))-1
      if tQuadTreeNode<>iQuadTreeNode
         if tQuadTreeNode>-1
            if VFC_QuadTree(tQuadTreeNode).BoundsRemove=0
               VFC_QuadTree(tQuadTreeNode).BoundsRemove=1
               inc VFC_QuadTreeRemoveCount
               VFC_QuadTreeRemove(VFC_QuadTreeRemoveCount)=tQuadTreeNode
            endif
            if VFC_QuadTree(tQuadTreeNode).UpDate=0
               if VFC_QuadTree(tQuadTreeNode).BoundsMin.x=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMin.y=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMin.z=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.x=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.y=iBounds or VFC_QuadTree(tQuadTreeNode).BoundsMax.z=iBounds
                  VFC_QuadTree(tQuadTreeNode).UpDate=1
                  inc VFC_QuadTreeUpDateCount
                  VFC_QuadTreeUpdate(VFC_QuadTreeUpDateCount)=tQuadTreeNode
               endif
            endif
            tQuadTreeIndex=PeekInteger(VFC_Bounds(iBounds).pQuadTreeIndex+(tLevel*4))-1
            PokeInteger(VFC_QuadTree(tQuadTreeNode).pBounds+(tQuadTreeIndex*4),-1)
         endif
         PokeInteger(VFC_Bounds(iBounds).pQuadTree+(tLevel*4),iQuadTreeNode+1)
         PokeInteger(VFC_Bounds(iBounds).pQuadTreeIndex+(tLevel*4),VFC_QuadTree(iQuadTreeNode).BoundsCount+1)
         if VFC_QuadTree(iQuadTreeNode).BoundsCount>VFC_QuadTree(iQuadTreeNode).BoundsMemSize
            inc VFC_QuadTree(iQuadTreeNode).BoundsMemSize,100
            pBounds=make memory((VFC_QuadTree(iQuadTreeNode).BoundsMemSize+1)*4)
            if VFC_QuadTree(iQuadTreeNode).BoundsCount>0 then copy memory pBounds,VFC_QuadTree(iQuadTreeNode).pBounds,VFC_QuadTree(iQuadTreeNode).BoundsCount*4
            delete memory VFC_QuadTree(iQuadTreeNode).pBounds
            VFC_QuadTree(iQuadTreeNode).pBounds=pBounds
         endif
         PokeInteger(VFC_QuadTree(iQuadTreeNode).pBounds+(VFC_QuadTree(iQuadTreeNode).BoundsCount*4),iBounds)
         inc VFC_QuadTree(iQuadTreeNode).BoundsCount
      endif
      tUpDate=0
      tDifference=0
      if VFC_Bounds(iBounds).Min.x<VFC_QuadTree(iQuadTreeNode).Min.x then VFC_QuadTree(iQuadTreeNode).Min.x=VFC_Bounds(iBounds).Min.x:VFC_QuadTree(iQuadTreeNode).BoundsMin.x=iBounds:tDifference=1
      if VFC_Bounds(iBounds).Min.y<VFC_QuadTree(iQuadTreeNode).Min.y then VFC_QuadTree(iQuadTreeNode).Min.y=VFC_Bounds(iBounds).Min.y:VFC_QuadTree(iQuadTreeNode).BoundsMin.y=iBounds:tDifference=1
      if VFC_Bounds(iBounds).Min.z<VFC_QuadTree(iQuadTreeNode).Min.z then VFC_QuadTree(iQuadTreeNode).Min.z=VFC_Bounds(iBounds).Min.z:VFC_QuadTree(iQuadTreeNode).BoundsMin.z=iBounds:tDifference=1
      if VFC_Bounds(iBounds).Max.x>VFC_QuadTree(iQuadTreeNode).Max.x then VFC_QuadTree(iQuadTreeNode).Max.x=VFC_Bounds(iBounds).Max.x:VFC_QuadTree(iQuadTreeNode).BoundsMax.x=iBounds:tDifference=1
      if VFC_Bounds(iBounds).Max.y>VFC_QuadTree(iQuadTreeNode).Max.y then VFC_QuadTree(iQuadTreeNode).Max.y=VFC_Bounds(iBounds).Max.y:VFC_QuadTree(iQuadTreeNode).BoundsMax.y=iBounds:tDifference=1
      if VFC_Bounds(iBounds).Max.z>VFC_QuadTree(iQuadTreeNode).Max.z then VFC_QuadTree(iQuadTreeNode).Max.z=VFC_Bounds(iBounds).Max.z:VFC_QuadTree(iQuadTreeNode).BoundsMax.z=iBounds:tDifference=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMin.x).Min.x>VFC_QuadTree(iQuadTreeNode).Min.x then tUpDate=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMin.y).Min.y>VFC_QuadTree(iQuadTreeNode).Min.y then tUpDate=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMin.z).Min.z>VFC_QuadTree(iQuadTreeNode).Min.z then tUpDate=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMax.x).Max.x<VFC_QuadTree(iQuadTreeNode).Max.x then tUpDate=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMax.y).Max.y<VFC_QuadTree(iQuadTreeNode).Max.y then tUpDate=1
      if VFC_Bounds(VFC_QuadTree(iQuadTreeNode).BoundsMax.z).Max.z<VFC_QuadTree(iQuadTreeNode).Max.z then tUpDate=1
      if tUpDate=1
         if VFC_QuadTree(iQuadTreeNode).UpDate=0
            VFC_QuadTree(iQuadTreeNode).UpDate=1
            inc VFC_QuadTreeUpDateCount
            VFC_QuadTreeUpdate(VFC_QuadTreeUpDateCount)=iQuadTreeNode
         endif
      else
         if tDifference=1
            VFC_QuadTree(iQuadTreeNode).Size.x=VFC_QuadTree(iQuadTreeNode).Max.x-VFC_QuadTree(iQuadTreeNode).Min.x
            VFC_QuadTree(iQuadTreeNode).Size.y=VFC_QuadTree(iQuadTreeNode).Max.y-VFC_QuadTree(iQuadTreeNode).Min.y
            VFC_QuadTree(iQuadTreeNode).Size.z=VFC_QuadTree(iQuadTreeNode).Max.z-VFC_QuadTree(iQuadTreeNode).Min.z
            VFC_QuadTree(iQuadTreeNode).Position.x=VFC_QuadTree(iQuadTreeNode).Min.x+(VFC_QuadTree(iQuadTreeNode).Size.x/2)
            VFC_QuadTree(iQuadTreeNode).Position.y=VFC_QuadTree(iQuadTreeNode).Min.y+(VFC_QuadTree(iQuadTreeNode).Size.y/2)
            VFC_QuadTree(iQuadTreeNode).Position.z=VFC_QuadTree(iQuadTreeNode).Min.z+(VFC_QuadTree(iQuadTreeNode).Size.z/2)
            VFC_QuadTree(iQuadTreeNode).Radious=VFC_QuadTree(iQuadTreeNode).Size.x
            if VFC_QuadTree(iQuadTreeNode).Size.y>VFC_QuadTree(iQuadTreeNode).Radious then VFC_QuadTree(iQuadTreeNode).Radious=VFC_QuadTree(iQuadTreeNode).Size.y
            if VFC_QuadTree(iQuadTreeNode).Size.z>VFC_QuadTree(iQuadTreeNode).Radious then VFC_QuadTree(iQuadTreeNode).Radious=VFC_QuadTree(iQuadTreeNode).Size.z
         endif
      endif
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Occlusion Update
`----------------------------------------------------
function Occlusion_Update()

   `Remove Occlusion Bounds
      if PeekInteger(HZB_pBounds+4)=0
         if HZB_RemoveOcclusionCount>-1
            if try lock sysobj(HZB_Mutex)=1
               if HZB_BankHandel(3)=0 then HZB_BankHandel(3)=find free bank() else delete bank HZB_BankHandel(3)
               map shared mem to bank "removeocc"+HZB_HWNDi,HZB_BankHandel(3),(HZB_RemoveOcclusionCount+1)*4
               zero bank HZB_BankHandel(3)
               pRemoveOcc=get bank ptr(HZB_BankHandel(3))
               for o=0 to HZB_RemoveOcclusionCount
                  tBounds=HZB_RemoveOcclusion(o)
                  if VFC_Bounds(tBounds).InUse=0 then PokeInteger(pRemoveOcc+(o*4),tBounds) else PokeInteger(pRemoveOcc+(o*4),-1)
                  VFC_Bounds(tBounds).OccludeRemove=0
               next o
               unlock sysobj HZB_Mutex
               PokeInteger(HZB_pBounds+4,HZB_RemoveOcclusionCount+1)
               HZB_RemoveOcclusionCount=-1
            endif
         endif
      endif

   `Add Occlusion Bounds
      if HZB_AddOcclusionCount>-1
         if PeekInteger(HZB_pBounds+8)=0
            if try lock sysobj(HZB_Mutex)=1
               if HZB_BankHandel(4)=0 then HZB_BankHandel(4)=find free bank() else delete bank HZB_BankHandel(4)
               map shared mem to bank "addocc"+HZB_HWNDi,HZB_BankHandel(4),(HZB_AddOcclusionCount+1)*4
               zero bank HZB_BankHandel(4)
               pAddOcc=get bank ptr(HZB_BankHandel(4))
               for o=0 to HZB_AddOcclusionCount
                  tBounds=HZB_AddOcclusion(o)
                  if VFC_Bounds(tBounds).InUse=1 then PokeInteger(pAddOcc+(o*4),tBounds) else PokeInteger(pAddOcc+(o*4),-1)
                  VFC_Bounds(tBounds).OccludeAdd=0
               next o
               unlock sysobj HZB_Mutex
               PokeInteger(HZB_pBounds+8,HZB_AddOcclusionCount+1)
               HZB_AddOcclusionCount=-1
            endif
         endif
      endif

   `Add Occlude object
      if HZB_AddObjectCount>-1
         if PeekInteger(HZB_pBounds+12)=0
            if try lock sysobj(HZB_Mutex)=1
               if HZB_BankHandel(5)=0 then HZB_BankHandel(5)=find free bank() else delete bank HZB_BankHandel(5)
               map shared mem to bank "addobj"+HZB_HWNDi,HZB_BankHandel(5),(HZB_AddObjectCount+1)*12
               zero bank HZB_BankHandel(5)
               pAddObj=get bank ptr(HZB_BankHandel(5))
               tVertexCountTotal=0
               for o=0 to HZB_AddObjectCount
                  tBounds=HZB_AddObject(o)
                  if VFC_Bounds(tBounds).InUse=1 and VFC_Bounds(tBounds).Object>0
                     tVertexCount=0
                     pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",VFC_Bounds(tBounds).Object)
                     pMesh=PeekDword(pObject+8)
                     for l=0 to PeekInteger(pObject)-1
                        pMeshLimb=PeekDword(pMesh+(l*4))
                        tVertexCountTotal=tVertexCountTotal+PeekDword(pMeshLimb+32)
                        tVertexCount=tVertexCount+PeekDword(pMeshLimb+32)
                     next l
                     PokeInteger(pAddObj+(o*12)+8,tVertexCount)
                  endif
               next o
               PokeInteger(HZB_pBounds+16,tVertexCountTotal+1)
               if HZB_BankHandel(6)=0 then HZB_BankHandel(6)=find free bank() else delete bank HZB_BankHandel(6)
               map shared mem to bank "addvert"+HZB_HWNDi,HZB_BankHandel(6),(tVertexCountTotal+1)*12
               zero bank HZB_BankHandel(6)
               pAddVert=get bank ptr(HZB_BankHandel(6))
               tVertexCountTotal=0
               for o=0 to HZB_AddObjectCount
                  tBounds=HZB_AddObject(o)
                  if VFC_Bounds(tBounds).InUse=1
                     PokeInteger(pAddObj+(o*12),tBounds)
                     PokeInteger(pAddObj+(o*12)+4,VFC_Bounds(tBounds).Object)
                     if VFC_Bounds(tBounds).Object>0
                        pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",VFC_Bounds(tBounds).Object)
                        pMesh=PeekDword(pObject+8)
                        for l=0 to PeekInteger(pObject)-1
                           pMeshLimb=PeekDword(pMesh+(l*4))
                           tFVFSize=PeekDword(pMeshLimb+8)
                           pVertexData=PeekDword(pMeshLimb+20)
                           pIndexData=PeekDword(pMeshLimb+24)
                           for v=0 to PeekDword(pMeshLimb+32)-1
                              pVertex=pVertexData+PeekWord1(pIndexData+(v*2))*tFVFSize
                              PokeFloat(pAddVert+(tVertexCountTotal*12),PeekFloat(pVertex))
                              PokeFloat(pAddVert+(tVertexCountTotal*12)+4,PeekFloat(pVertex+4))
                              PokeFloat(pAddVert+(tVertexCountTotal*12)+8,PeekFloat(pVertex+8))
                              inc tVertexCountTotal
                           next v
                        next l
                     endif
                  else
                     PokeInteger(pAddObj+(o*12),-1)
                  endif
                  VFC_Bounds(tBounds).ObjectAdd=0
               next o
               unlock sysobj HZB_Mutex
               PokeInteger(HZB_pBounds+12,HZB_AddObjectCount+1)
               HZB_AddObjectCount=-1
            endif
         endif
      endif

   `Add Occluder Batch
      if HZB_AddBatchCount>-1
         if PeekInteger(HZB_pBounds+20)=0
            if try lock sysobj(HZB_Mutex)=1
               if HZB_BankHandel(7)=0 then HZB_BankHandel(7)=find free bank() else delete bank HZB_BankHandel(7)
               map shared mem to bank "addbatch"+HZB_HWNDi,HZB_BankHandel(7),(HZB_AddBatchCount+1)*12
               zero bank HZB_BankHandel(7)
               pAddBatch=get bank ptr(HZB_BankHandel(7))
               tVertexCountTotal=0
               for o=0 to HZB_AddBatchCount
                  tBatchGroup=HZB_AddBatch(o)
                  tVertexCount=0
                  if AL_BatchGroup(tBatchGroup).Occlude=1
                     pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_BatchGroup(tBatchGroup).Object)
                     pMesh=PeekDword(pObject+8)
                     for l=0 to PeekInteger(pObject)-1
                        pMeshLimb=PeekDword(pMesh+(l*4))
                        tVertexCountTotal=tVertexCountTotal+PeekDword(pMeshLimb+32)
                        tVertexCount=tVertexCount+PeekDword(pMeshLimb+32)
                     next l
                  endif
                  PokeInteger(pAddBatch+(o*12)+8,tVertexCount)
               next o
               PokeInteger(HZB_pBounds+24,tVertexCountTotal+1)
               if HZB_BankHandel(8)=0 then HZB_BankHandel(8)=find free bank() else delete bank HZB_BankHandel(8)
               map shared mem to bank "addbatchvert"+HZB_HWNDi,HZB_BankHandel(8),(tVertexCountTotal+1)*12
               zero bank HZB_BankHandel(8)
               pAddBatchVert=get bank ptr(HZB_BankHandel(8))
               tVertexCountTotal=0
               for o=0 to HZB_AddBatchCount
                  tBatchGroup=HZB_AddBatch(o)
                  AL_BatchGroup(tBatchGroup).OccludeAdd=0
                  PokeInteger(pAddBatch+(o*12),tBatchGroup)
                  PokeInteger(pAddBatch+(o*12)+4,AL_BatchGroup(tBatchGroup).Batched)
                  if AL_BatchGroup(tBatchGroup).Occlude=1
                     pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_BatchGroup(tBatchGroup).Object)
                     pMesh=PeekDword(pObject+8)
                     for l=0 to PeekInteger(pObject)-1
                        pMeshLimb=PeekDword(pMesh+(l*4))
                        tFVFSize=PeekDword(pMeshLimb+8)
                        pVertexData=PeekDword(pMeshLimb+20)
                        pIndexData=PeekDword(pMeshLimb+24)
                        for v=0 to PeekDword(pMeshLimb+32)-1
                           pVertex=pVertexData+PeekWord1(pIndexData+(v*2))*tFVFSize
                           PokeFloat(pAddBatchVert+(tVertexCountTotal*12),PeekFloat(pVertex))
                           PokeFloat(pAddBatchVert+(tVertexCountTotal*12)+4,PeekFloat(pVertex+4))
                           PokeFloat(pAddBatchVert+(tVertexCountTotal*12)+8,PeekFloat(pVertex+8))
                           inc tVertexCountTotal
                        next v
                     next l
                  endif
               next o
               unlock sysobj HZB_Mutex
               PokeInteger(HZB_pBounds+20,HZB_AddBatchCount+1)
               HZB_AddBatchCount=-1
            endif
         endif
      endif

   `Update Occlusion Bounds
      if HZB_UpdateOcclusionCount>-1
         if PeekInteger(HZB_pBounds+32)=0
            if try lock sysobj(HZB_Mutex)=1
               if HZB_BankHandel(10)=0 then HZB_BankHandel(10)=find free bank() else delete bank HZB_BankHandel(10)
               map shared mem to bank "updateocc"+HZB_HWNDi,HZB_BankHandel(10),(HZB_UpdateOcclusionCount+1)*80
               zero bank HZB_BankHandel(10)
               pUpdateOcc=get bank ptr(HZB_BankHandel(10))
               for o=0 to HZB_UpdateOcclusionCount
                  tBounds=HZB_UpdateOcclusion(o)
                  if VFC_Bounds(tBounds).InUse=1
                     PokeInteger(pUpdateOcc+(o*80),tBounds)
                     PokeFloat(pUpdateOcc+(o*80)+4,VFC_Bounds(tBounds).Position.x)
                     PokeFloat(pUpdateOcc+(o*80)+8,VFC_Bounds(tBounds).Position.y)
                     PokeFloat(pUpdateOcc+(o*80)+12,VFC_Bounds(tBounds).Position.z)
                     PokeFloat(pUpdateOcc+(o*80)+16,VFC_Bounds(tBounds).Size.x)
                     PokeFloat(pUpdateOcc+(o*80)+20,VFC_Bounds(tBounds).Size.y)
                     PokeFloat(pUpdateOcc+(o*80)+24,VFC_Bounds(tBounds).Size.z)
                     PokeFloat(pUpdateOcc+(o*80)+28,VFC_Bounds(tBounds).DrawDistance)
                     PokeInteger(pUpdateOcc+(o*80)+32,VFC_Bounds(tBounds).Visible)
                     PokeFloat(pUpdateOcc+(o*80)+36,VFC_Bounds(tBounds).ObjectPosition.x)
                     PokeFloat(pUpdateOcc+(o*80)+40,VFC_Bounds(tBounds).ObjectPosition.y)
                     PokeFloat(pUpdateOcc+(o*80)+44,VFC_Bounds(tBounds).ObjectPosition.z)
                     PokeFloat(pUpdateOcc+(o*80)+48,VFC_Bounds(tBounds).ObjectScale.x)
                     PokeFloat(pUpdateOcc+(o*80)+52,VFC_Bounds(tBounds).ObjectScale.y)
                     PokeFloat(pUpdateOcc+(o*80)+56,VFC_Bounds(tBounds).ObjectScale.z)
                     PokeFloat(pUpdateOcc+(o*80)+60,VFC_Bounds(tBounds).ObjectAngle.x)
                     PokeFloat(pUpdateOcc+(o*80)+64,VFC_Bounds(tBounds).ObjectAngle.y)
                     PokeFloat(pUpdateOcc+(o*80)+68,VFC_Bounds(tBounds).ObjectAngle.z)
                     if VFC_Bounds(tBounds).Group>7
                        PokeInteger(pUpdateOcc+(o*80)+72,VFC_Bounds(tBounds).Group-7)
                        PokeInteger(pUpdateOcc+(o*80)+76,VFC_Bounds(tBounds).Handel)
                     else
                        PokeInteger(pUpdateOcc+(o*80)+72,VFC_Bounds(tBounds).BatchGroup)
                        PokeInteger(pUpdateOcc+(o*80)+76,0)
                     endif
                  else
                     PokeInteger(pUpdateOcc+(o*80),-1)
                  endif
                  VFC_Bounds(tBounds).OccludeUpdate=0
               next o
               unlock sysobj HZB_Mutex
               PokeInteger(HZB_pBounds+32,HZB_UpdateOcclusionCount+1)
               HZB_UpdateOcclusionCount=-1
            endif
         endif
      endif

   `Get Occlusion Results
      tUpdateOcclusion=PeekInteger(HZB_pBounds+36)
      if tUpdateOcclusion>0
         if try lock sysobj(HZB_Mutex)=1
            HZB_BankHandel(11)=find free bank()
            map shared mem to bank "occx"+HZB_HWNDi,HZB_BankHandel(11),tUpdateOcclusion*8
            pOccX=get bank ptr(HZB_BankHandel(11))
            for o=0 to tUpdateOcclusion-1
               tBounds=PeekInteger(pOccX+(o*8))
               VFC_Bounds(tBounds).Occlude.x=PeekInteger(pOccX+(o*8)+4)
            next o
            unlock sysobj HZB_Mutex
            PokeInteger(HZB_pBounds+36,0)
            delete bank HZB_BankHandel(11)
         endif
      endif
      tUpdateOcclusion=PeekInteger(HZB_pBounds+40)
      if tUpdateOcclusion>0
         if try lock sysobj(HZB_Mutex)=1
            HZB_BankHandel(12)=find free bank()
            map shared mem to bank "occy"+HZB_HWNDi,HZB_BankHandel(12),tUpdateOcclusion*8
            pOccY=get bank ptr(HZB_BankHandel(12))
            for o=0 to tUpdateOcclusion-1
               tBounds=PeekInteger(pOccY+(o*8))
               VFC_Bounds(tBounds).Occlude.y=PeekInteger(pOccY+(o*8)+4)
            next o
            unlock sysobj HZB_Mutex
            PokeInteger(HZB_pBounds+40,0)
            delete bank HZB_BankHandel(12)
         endif
      endif
      tUpdateOcclusion=PeekInteger(HZB_pBounds+44)
      if tUpdateOcclusion>0
         if try lock sysobj(HZB_Mutex)=1
            HZB_BankHandel(13)=find free bank()
            map shared mem to bank "occz"+HZB_HWNDi,HZB_BankHandel(13),tUpdateOcclusion*8
            pOccZ=get bank ptr(HZB_BankHandel(13))
            for o=0 to tUpdateOcclusion-1
               tBounds=PeekInteger(pOccZ+(o*8))
               VFC_Bounds(tBounds).Occlude.z=PeekInteger(pOccZ+(o*8)+4)
            next o
            unlock sysobj HZB_Mutex
            PokeInteger(HZB_pBounds+44,0)
            delete bank HZB_BankHandel(13)
         endif
      endif

   `Pass Camera data
      PokeFloat(HZB_pCamera+4,AL_CameraPos.x)
      PokeFloat(HZB_pCamera+8,AL_CameraPos.y)
      PokeFloat(HZB_pCamera+12,AL_CameraPos.z)
      PokeFloat(HZB_pCamera+16,AL_CameraAng.x)
      PokeFloat(HZB_pCamera+20,AL_CameraAng.y)
      PokeFloat(HZB_pCamera+24,AL_CameraAng.z)
      PokeFloat(HZB_pCamera+28,AL_CameraData(1))
      PokeFloat(HZB_pCamera+32,AL_CameraData(2))
      PokeFloat(HZB_pCamera+36,AL_CameraData(3))
      PokeFloat(HZB_pCamera+40,AL_CameraData(4))
      PokeInteger(HZB_pBounds+48,1)

endfunction

`----------------------------------------------------
` Occlusion Update
`----------------------------------------------------
function Occlusion_Add(iBounds as integer)
   if HZB_OcclusionCount<VFC_BoundsCount
      HZB_OcclusionCount=VFC_BoundsCount
      dim HZB_AddOcclusion(HZB_OcclusionCount)
      dim HZB_AddObject(HZB_OcclusionCount)
      dim HZB_UpdateOcclusion(HZB_OcclusionCount)
      dim HZB_RemoveOcclusion(HZB_OcclusionCount)
   endif
   if VFC_Bounds(iBounds).InUse=1
      VFC_Bounds(iBounds).ObjectPosition.x=0
      VFC_Bounds(iBounds).ObjectPosition.y=0
      VFC_Bounds(iBounds).ObjectPosition.z=0
      VFC_Bounds(iBounds).ObjectScale.x=0
      VFC_Bounds(iBounds).ObjectScale.y=0
      VFC_Bounds(iBounds).ObjectScale.z=0
      VFC_Bounds(iBounds).ObjectAngle.x=0
      VFC_Bounds(iBounds).ObjectAngle.y=0
      VFC_Bounds(iBounds).ObjectAngle.z=0
      if VFC_Bounds(iBounds).OccludeAdd=0
         VFC_Bounds(iBounds).OccludeAdd=1
         inc HZB_AddOcclusionCount
         HZB_AddOcclusion(HZB_AddOcclusionCount)=iBounds
      endif
   endif
endfunction

`----------------------------------------------------
` Occlusion Remove
`----------------------------------------------------
function Occlusion_Remove(iBounds as integer)
   if VFC_Bounds(iBounds).InUse=1
      if VFC_Bounds(iBounds).OccludeRemove=0
         VFC_Bounds(iBounds).OccludeRemove=1
         inc HZB_RemoveOcclusionCount
         HZB_RemoveOcclusion(HZB_RemoveOcclusionCount)=iBounds
      endif
   endif
endfunction

`----------------------------------------------------
` Occlusion Update
`----------------------------------------------------
function Occlusion_BoundsUpdate(iBounds as integer)
   if VFC_Bounds(iBounds).InUse=1
      if VFC_Bounds(iBounds).OccludeUpdate=0
         VFC_Bounds(iBounds).OccludeUpdate=1
         inc HZB_UpdateOcclusionCount
         HZB_UpdateOcclusion(HZB_UpdateOcclusionCount)=iBounds
      endif
   endif
endfunction

`----------------------------------------------------
` Set Occlusion Object
`----------------------------------------------------
function Occlusion_SetObject(iBounds as integer,iObject as integer)
   if VFC_Bounds(iBounds).InUse=1
      VFC_Bounds(iBounds).Object=iObject
      if VFC_Bounds(iBounds).ObjectAdd=0
         VFC_Bounds(iBounds).ObjectAdd=1
         inc HZB_AddObjectCount
         HZB_AddObject(HZB_AddObjectCount)=iBounds
      endif
   endif
endfunction

`----------------------------------------------------
` Set Occlusion Transform
`----------------------------------------------------
function Occlusion_SetObjectTransform(iBounds as integer,iPosX as float,iPosY as float,iPosZ as float,iScaleX as float,iScaleY as float,iScaleZ as float,iAngleX as float,iAngleY as float,iAngleZ as float)
   if VFC_Bounds(iBounds).InUse=1
      VFC_Bounds(iBounds).ObjectPosition.x=iPosX
      VFC_Bounds(iBounds).ObjectPosition.y=iPosY
      VFC_Bounds(iBounds).ObjectPosition.z=iPosZ
      VFC_Bounds(iBounds).ObjectScale.x=iScaleX
      VFC_Bounds(iBounds).ObjectScale.y=iScaleY
      VFC_Bounds(iBounds).ObjectScale.z=iScaleZ
      VFC_Bounds(iBounds).ObjectAngle.x=iAngleX
      VFC_Bounds(iBounds).ObjectAngle.y=iAngleY
      VFC_Bounds(iBounds).ObjectAngle.z=iAngleZ
      Occlusion_BoundsUpdate(iBounds)
   endif
endfunction

`----------------------------------------------------
` Occlusion Update
`----------------------------------------------------
function Occlusion_SetBatch(iBatchGroup as integer,iOcclude as boolean)
   if AL_BatchGroup(iBatchGroup).Occlude<>iOcclude
      AL_BatchGroup(iBatchGroup).Occlude=iOcclude
      if AL_BatchGroup(iBatchGroup).OccludeAdd=0
         AL_BatchGroup(iBatchGroup).OccludeAdd=1
         inc HZB_AddBatchCount
         if HZB_AddBatchCount>HZB_AddBatchArrayCount-1
            HZB_AddBatchArrayCount=HZB_AddBatchArrayCount+20
            dim HZB_AddBatch(HZB_AddBatchArrayCount)
         endif
         HZB_AddBatch(HZB_AddBatchCount)=iBatchGroup
      endif
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`--------------
` Free EfxCam
`--------------
function FreeUpEfxCam()
   tFreeup=0
   repeat
      inc tFreeup
   until EfxCam_GetExist(tFreeup)=0
endfunction tFreeup

`----------------------------------------------------
` Create Camera
`----------------------------------------------------
function Camera_Create(iCamera as integer,iImage as integer,iWidth as float,iHeight as float,iD3DFormat as integer)
   if camera exist(iCamera)=1 then delete camera iCamera
   if image exist(iImage)=1 then delete image iImage
   make camera iCamera
   set camera to image iCamera,iImage,iWidth,iHeight,3,iD3DFormat
   backdrop off iCamera
   set camera range iCamera,1,10
   set camera fov iCamera,90
endfunction

`----------------------------------------------------
` Create Efx Camera
`----------------------------------------------------
function Camera_CreateEfx(iCamera as integer,iImage as integer,iWidth as float,iHeight as float,iD3DFormat as integer)
   if EfxCam_GetExist(iCamera)=0
      EfxCam_MakeNew iCamera
      EfxCam_SetBackdropEnabled iCamera,0
   endif
   EfxCam_SetToImage iCamera,iImage,iWidth,iHeight,iD3DFormat
   EfxCam_SetBackdropEnabled iCamera,0
endfunction

`----------------------------------------------------
` Set Camera Range
`----------------------------------------------------
function Camera_SetRange(iRange as float)
   AL_CameraData(1)=iRange/64000
   AL_CameraData(2)=iRange
   set camera range AL_Camera(0),AL_CameraData(1),AL_CameraData(2)
   set camera range AL_Camera(1),AL_CameraData(1),AL_CameraData(2)
   set camera range AL_Camera(2),AL_CameraData(1),AL_CameraData(2)
   set camera range AL_Camera(3),AL_CameraData(1),AL_CameraData(2)
   set camera range AL_Camera(5),AL_CameraData(1)*4,AL_CameraData(2)*2
   set camera range AL_Camera(7),AL_CameraData(1),AL_CameraData(2)
   set camera range AL_Camera(9),AL_CameraData(1),AL_CameraData(2)
   set camera range 0,AL_CameraData(1),AL_CameraData(2)
   set effect constant float AL_DepthEffect,"ViewDist",AL_CameraData(1)*2
   set effect constant float AL_AmbientLightEffect,"ViewDist",AL_CameraData(1)*2
   set effect constant float AL_DirLightEffect(1),"ViewDist",AL_CameraData(1)*2
   if AL_PostProcessingEffect(2)>0 then set effect constant float AL_PostProcessingEffect(2),"ViewDist",AL_CameraData(1)*2
endfunction

`----------------------------------------------------
` Set Camera FOV
`----------------------------------------------------
function Camera_SetFOV(iFov as float)
   AL_CameraData(3)=iFov
   set camera fov AL_Camera(0),AL_CameraData(3)
   set camera fov AL_Camera(1),AL_CameraData(3)
   set camera fov AL_Camera(2),AL_CameraData(3)
   set camera fov AL_Camera(3),AL_CameraData(3)
   set camera fov AL_Camera(5),AL_CameraData(3)
   set camera fov AL_Camera(7),AL_CameraData(3)
   set camera fov AL_Camera(9),AL_CameraData(3)
   set camera fov 0,AL_CameraData(3)
endfunction

`----------------------------------------------------
` Set Camera Aspect
`----------------------------------------------------
function Camera_SetAspect(iAspect as float)
   AL_CameraData(4)=iAspect
   set camera aspect AL_Camera(0),AL_CameraData(4)
   set camera aspect AL_Camera(1),AL_CameraData(4)
   set camera aspect AL_Camera(2),AL_CameraData(4)
   set camera aspect AL_Camera(3),AL_CameraData(4)
   set camera aspect AL_Camera(5),AL_CameraData(4)
   set camera aspect AL_Camera(7),AL_CameraData(4)
   set camera aspect AL_Camera(9),AL_CameraData(4)
   set camera aspect 0,AL_CameraData(4)
   set vector4 Vector4(1),1,AL_CameraData(4),0,0
   set effect constant vector AL_ParticleEffect(1),"Aspect",Vector4(1)
   set effect constant vector AL_ParticleEffect(2),"Aspect",Vector4(1)
endfunction

`----------------------------------------------------
` Set Camera View
`----------------------------------------------------
function Camera_SetView(iLeft as float,iTop as float,iRight as float,iBottom as float)
   if AL_CameraView(1).x<>iLeft or AL_CameraView(1).y<>iTop or AL_CameraView(1).z<>iRight or AL_CameraView(1).w<>iBottom
      AL_CameraView(1).x=iLeft
      AL_CameraView(1).y=iTop
      AL_CameraView(1).z=iRight
      AL_CameraView(1).w=iBottom
      AL_CameraView(2).x=AL_CameraView(1).z-AL_CameraView(1).x
      AL_CameraView(2).y=AL_CameraView(1).w-AL_CameraView(1).y
      AL_CameraView(2).z=AL_CameraView(2).x/AL_ViewVec.x
      AL_CameraView(2).w=AL_CameraView(2).y/AL_ViewVec.y
      AL_CameraView(3).x=AL_CameraView(1).x/AL_ViewVec.x
      AL_CameraView(3).y=AL_CameraView(1).y/AL_ViewVec.y
      AL_CameraView(3).z=AL_CameraView(1).z/AL_ViewVec.x
      AL_CameraView(3).w=AL_CameraView(1).w/AL_ViewVec.y
      set camera view 0,0,0,AL_ViewVec.x,AL_ViewVec.y
      Camera_Create(AL_Camera(2),AL_Image(2),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),113)
      delete image AL_ImageMRT(5)
      MRT_MakeRenderTarget AL_ImageMRT(5),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),31
      backdrop on AL_Camera(2)
      color backdrop AL_Camera(2),0
      Camera_Create(AL_Camera(3),AL_Image(3),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),20)
      delete image AL_ImageMRT(6)
      MRT_MakeRenderTarget AL_ImageMRT(6),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),21
      delete image AL_ImageMRT(7)
      MRT_MakeRenderTarget AL_ImageMRT(7),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),21
      backdrop on AL_Camera(3)
      color backdrop AL_Camera(3),0
      Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      Camera_ViewVec(Vector4(2),int(AL_PostViewVec.x*AL_CameraView(2).z),int(AL_PostViewVec.y*AL_CameraView(2).w),0)
      Effect_SetAllConstantVector("ViewSize",x vector4(Vector4(1)),y vector4(Vector4(1)),z vector4(Vector4(1)),w vector4(Vector4(1)))
      Effect_SetAllConstantVector("ViewSize2",x vector4(Vector4(2)),y vector4(Vector4(2)),z vector4(Vector4(2)),w vector4(Vector4(2)))
      texture object AL_AmbientLightObject,4,AL_ImageMRT(6)
      texture object AL_AmbientLightObject,7,AL_ImageMRT(7)
      set effect constant vector AL_DepthEffect,"ViewSize",Vector4(1)
      set effect constant vector AL_DirLightEffect(1),"ViewSize",Vector4(1)
      for b=0 to AL_SpotLightBatchCount
         for o=0 to AL_SpotLightBatch(b).Count-1
            tEffect=PeekInteger(AL_SpotLightBatch(b).pEffectID+(o*4))
            set effect constant vector tEffect,"ViewSize",Vector4(1)
         next o
      next b
      for b=0 to AL_PointLightBatchCount
         for o=0 to AL_PointLightBatch(b).Count-1
            tEffect=PeekInteger(AL_PointLightBatch(b).pEffectID+(o*4))
            set effect constant vector tEffect,"ViewSize",Vector4(1)
         next o
      next b
      for e=1 to 4
         if AL_SpotLightEffect(e)>0 then set effect constant vector AL_SpotLightEffect(e),"ViewSize",Vector4(1)
         if AL_PointLightEffect(e)>0 then set effect constant vector AL_PointLightEffect(e),"ViewSize",Vector4(1)
      next e
      for b=0 to AL_BoxAmbientBatchCount
         texture object AL_BoxAmbientBatch(b).Object,4,AL_ImageMRT(6)
         set effect constant vector AL_BoxAmbientBatch(b).Effect,"ViewSize",Vector4(1)
         set effect constant vector AL_BoxAmbientBatch(b).Effect,"ViewSize2",Vector4(2)
      next b
      for b=0 to AL_SphereAmbientBatchCount
         texture object AL_SphereAmbientBatch(b).Object,4,AL_ImageMRT(6)
         set effect constant vector AL_SphereAmbientBatch(b).Effect,"ViewSize",Vector4(1)
         set effect constant vector AL_SphereAmbientBatch(b).Effect,"ViewSize2",Vector4(2)
      next b
      for e=0 to AL_BoxReflectionEffectCount
         set effect constant vector AL_BoxReflectionEffect(e),"ViewSize",Vector4(1)
         set effect constant vector AL_BoxReflectionEffect(e),"ViewSize2",Vector4(2)
      next e
      for e=0 to AL_SphereReflectionEffectCount
         set effect constant vector AL_SphereReflectionEffect(e),"ViewSize",Vector4(1)
         set effect constant vector AL_SphereReflectionEffect(e),"ViewSize2",Vector4(2)
      next e
      for r=0 to AL_BoxReflectionCount
         if AL_BoxReflection(r).InUse=1 then texture object AL_BoxReflection(r).Object,4,AL_ImageMRT(6)
      next r
      for r=0 to AL_SphereReflectionCount
         if AL_SphereReflection(r).InUse=1 then texture object AL_SphereReflection(r).Object,4,AL_ImageMRT(6)
      next r
      for w=0 to AL_WaterObjectActiveCount
         if AL_WaterObject(AL_WaterObjectActive(w)).InUse=1 then texture object AL_WaterObject(AL_WaterObjectActive(w)).Object,6,AL_Image(2)
      next w
      if AL_Sky=1
         texture object AL_SkyObject(1),1,AL_ImageMRT(5)
         texture object AL_SkyObject(2),0,AL_Image(2)
         texture object AL_SkyObject(2),1,AL_ImageMRT(5)
      endif
      if AL_Ocean=1 then texture object AL_OceanObject,2,AL_Image(2)
      if AL_PostProcessingObject(2)>0
         set effect constant vector AL_PostProcessingEffect(2),"ViewSize1",Vector4(1)
         set effect constant vector AL_PostProcessingEffect(2),"ViewSize2",Vector4(2)
         set vector4 Vector4(3),(0.5/int(AL_PostViewVec.x*AL_CameraView(2).z))+0.5,(0.5/int(AL_PostViewVec.y*AL_CameraView(2).w))+0.5,1,1
         set effect constant vector AL_PostProcessingEffect(2),"ViewSize3",Vector4(3)
         texture object AL_PostProcessingObject(2),3,AL_Image(2)
      endif
      if AL_Distortion=1 or AL_GodRays>0 or AL_MotionBlur=1 or AL_FXAA=1 or AL_Bloom=1 or AL_DOF=1
         Camera_Create(AL_RenderTarget(0).Camera,AL_RenderTarget(0).Image,int(AL_ViewVec.x*AL_CameraView(2).z),int(AL_ViewVec.y*AL_CameraView(2).w),AL_RenderTarget(0).D3DFormat)
         set effect constant vector AL_FrameTarget(AL_FinalComposite).Effect,"ViewSize1",Camera_ViewVec(Vector4(1),int(AL_ViewVec.x*AL_CameraView(2).z),int(AL_ViewVec.y*AL_CameraView(2).w),0)
         if AL_HDR=1 or AL_DOF=1 then PostFilter_SetRenderTargetImage(AL_RenderTargets(1),0,PostFilter_GetRenderTargetImage(AL_FrameRender))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(4),0,PostFilter_GetRenderTargetImage(AL_FrameRender))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(4),1,AL_Image(3))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(4),2,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
         if AL_MotionBlur=1
            PostFilter_SetRenderTargetImage(AL_RenderTargets(5),0,AL_Image(2))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(6),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(5)))
         endif
         if AL_DOF=1 or AL_MotionBlur=1
            PostFilter_SetRenderTargetImage(AL_RenderTargets(7),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(4)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(7),1,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(7),2,AL_Image(2))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(7),3,PostFilter_GetRenderTargetImage(AL_RenderTargets(6)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(8),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(7)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(8),1,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(8),2,AL_Image(2))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(8),3,PostFilter_GetRenderTargetImage(AL_RenderTargets(6)))
         endif
         if AL_Bloom=1 or AL_GodRays=1
            PostFilter_SetRenderTargetImage(AL_RenderTargets(9),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(4)))
            if AL_MotionBlur=1 or AL_DOF=1 then PostFilter_SetRenderTargetImage(AL_RenderTargets(9),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(8)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(9),1,AL_Image(3))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(10),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(9)))
         endif
         if AL_LensFlares=1
            PostFilter_SetRenderTargetImage(AL_RenderTargets(11),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(10)))
            PostFilter_SetRenderTargetImage(AL_RenderTargets(11),1,AL_Image(18))
         endif
         PostFilter_SetFrameTargetImage(AL_FinalComposite,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,1,AL_Image(3))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,2,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,3,PostFilter_GetRenderTargetImage(AL_RenderTargets(8)))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,4,PostFilter_GetRenderTargetImage(AL_RenderTargets(10)))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,5,PostFilter_GetRenderTargetImage(AL_RenderTargets(11)))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,6,AL_Image(17))
         PostFilter_SetFrameTargetImage(AL_FinalComposite,7,AL_Image(21))
         if AL_SSAO=1 or AL_SSR=1 then texture object AL_PostProcessingObject(2),4,PostFilter_GetRenderTargetImage(AL_FrameRender)
      endif
      set camera view 0,int(AL_ViewVec.x*AL_CameraView(3).x),int(AL_ViewVec.y*AL_CameraView(3).y),int(AL_ViewVec.x*AL_CameraView(3).z),int(AL_ViewVec.y*AL_CameraView(3).w)
      set camera view AL_Camera(1),int(AL_ViewVec.x*AL_CameraView(3).x),int(AL_ViewVec.y*AL_CameraView(3).y),int(AL_ViewVec.x*AL_CameraView(3).z),int(AL_ViewVec.y*AL_CameraView(3).w)
      Camera_SetRange(AL_CameraData(2))
      Camera_SetFOV(AL_CameraData(3))
      Camera_SetAspect(AL_CameraData(4))
   endif
endfunction

`----------------------------------------------------
` Camera View Vector
`----------------------------------------------------
function Camera_ViewVec(iVector4 as integer,iViewX as float,iViewY as float,iView as boolean)
   if iView=0 then set vector4 iVector4,0.5/iViewX,0.5/iViewY,1,1 else set vector4 iVector4,(0.5/iViewX)+AL_CameraView(3).x,(0.5/iViewY)+AL_CameraView(3).y,1*AL_CameraView(2).z,1*AL_CameraView(2).w
endfunction iVector4

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`Post frame target data
type AL_FrameTargetData
   Object as integer
   Effect as integer
endtype

`Post render target data
type AL_RenderTargetData
   UpDate as integer
   Camera as integer
   ViewVec as Vec2Float
   Image as integer
   Object as integer
   Effect as integer
   D3DFormat as integer
endtype

`----------------------------------------------------
` Post Processing SetUp
`----------------------------------------------------
function PostFilter_SetUp(iDistortion as boolean,iFXAA as boolean,iMotionBlur as boolean,iSSAO as boolean,iSSR as boolean,iGodRays as boolean,iBloom as boolean,iLensFlare as boolean,iDOF as boolean)
   AL_Distortion=iDistortion
   AL_SSAO=iSSAO
   AL_SSR=iSSR
   AL_GodRays=iGodRays
   AL_MotionBlur=iMotionBlur
   AL_FXAA=iFXAA
   AL_Bloom=iBloom
   AL_LensFlares=iLensFlare
   AL_DOF=iDOF
   AL_WaterSplash.w=100
   if AL_SSAO=1 or AL_SSR=1
      if fileexist(AL_MydocDirectory+"SSAOR"+str$(AL_SSAO)+str$(AL_SSR)+".fx")=0
         Effect_LockFile(AL_Directory+"Post Processing\SSAOR.fx")
         Effect_SetDefine("SSAO",AL_SSAO)
         Effect_SetDefine("SSR",AL_SSR)
         Effect_UnLockFile(AL_MydocDirectory+"SSAOR"+str$(AL_SSAO)+str$(AL_SSR)+".fx")
      endif
      AL_PostProcessingObject(2)=FreeUpObject(32500+rnd(16250))
      AL_PostProcessingEffect(2)=FreeUpEffect(32500+rnd(16250))
      Object_CreateTarget(AL_PostProcessingObject(2),AL_PostProcessingEffect(2),AL_MydocDirectory+"SSAOR"+str$(AL_SSAO)+str$(AL_SSR)+".fx")
      texture object AL_PostProcessingObject(2),0,AL_ImageMRT(1)
      texture object AL_PostProcessingObject(2),1,AL_ImageMRT(2)
      texture object AL_PostProcessingObject(2),2,AL_ImageMRT(4)
      texture object AL_PostProcessingObject(2),3,AL_Image(2)
      texture object AL_PostProcessingObject(2),5,AL_Image(20)
      set object mask AL_PostProcessingObject(2),2^AL_Camera(3)
      set effect constant vector AL_PostProcessingEffect(2),"ViewSize1",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      set effect constant vector AL_PostProcessingEffect(2),"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      set vector4 Vector4(1),(0.5/AL_PostViewVec.x)+0.5,(0.5/AL_PostViewVec.y)+0.5,1,1
      set effect constant vector AL_PostProcessingEffect(2),"ViewSize3",Vector4(1)
      disable object zwrite AL_PostProcessingObject(2)
      disable object zdepth AL_PostProcessingObject(2)
   endif
   if AL_Distortion=1 or AL_GodRays=1 or AL_MotionBlur=1 or AL_FXAA=1 or AL_Bloom=1 or AL_DOF=1
      AL_PostFilter=1
      AL_PostFilterViewVec.x=AL_ViewVec.x
      AL_PostFilterViewVec.y=AL_ViewVec.y
      AL_RenderTarget(0).UpDate=1
      AL_RenderTarget(0).Camera=FreeUpCamera()
      AL_RenderTarget(0).Image=FreeUpImage(32500+rnd(16250))
      AL_RenderTarget(0).ViewVec.x=AL_ViewVec.x
      AL_RenderTarget(0).ViewVec.y=AL_ViewVec.y
      AL_RenderTarget(0).D3DFormat=AL_D3dfmt
      Camera_Create(AL_RenderTarget(0).Camera,AL_RenderTarget(0).Image,AL_RenderTarget(0).ViewVec.x,AL_RenderTarget(0).ViewVec.y,AL_RenderTarget(0).D3DFormat)
      AL_Camera(0)=AL_RenderTarget(0).Camera
      AL_FrameRender=AL_RenderTargetCount
      inc AL_RenderTargetCount
      if AL_HDR=1 or AL_DOF=1
         AL_RenderTargets(1)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Luminance.fx",9,9,115)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(1),0,PostFilter_GetRenderTargetImage(AL_FrameRender))
         AL_RenderTargets(2)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Luminance blur.fx",3,3,116)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(2),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(1)))
         AL_RenderTargets(3)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Adapted luminance.fx",1,1,115)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(3),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(2)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(2),1,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
      endif
      if AL_DOF=1 or AL_MotionBlur=1 then tHDR=0 else tHDR=1
      if fileexist(AL_MydocDirectory+"Down Filter"+str$(tHDR)+str$(AL_Distortion)+str$(AL_DOF)+".fx")=0
         Effect_LockFile(AL_Directory+"Post Processing\Down Filter.fx")
         Effect_SetDefine("HDR",tHDR)
         Effect_SetDefine("DISTORTION",AL_Distortion)
         Effect_SetDefine("DOF",AL_DOF)
         Effect_UnLockFile(AL_MydocDirectory+"Down Filter"+str$(tHDR)+str$(AL_Distortion)+str$(AL_DOF)+".fx")
      endif
      AL_RenderTargets(4)=PostFilter_AddRenderTarget(AL_MydocDirectory+"Down Filter"+str$(tHDR)+str$(AL_Distortion)+str$(AL_DOF)+".fx",AL_PostViewVec.x,AL_PostViewVec.y,AL_D3dfmt)
      PostFilter_SetRenderTargetImage(AL_RenderTargets(4),0,PostFilter_GetRenderTargetImage(AL_FrameRender))
      PostFilter_SetRenderTargetImage(AL_RenderTargets(4),1,AL_Image(3))
      PostFilter_SetRenderTargetImage(AL_RenderTargets(4),2,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
      if AL_MotionBlur=1
         set effect technique AL_DepthEffect,"MotionVector"
         AL_RenderTargets(5)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Dilate H.fx",AL_PostViewVec.x/2,AL_PostViewVec.y/2,113)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(5),0,AL_Image(2))
         AL_RenderTargets(6)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Dilate V.fx",AL_PostViewVec.x/2,AL_PostViewVec.y/2,112)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(6),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(5)))
      endif
      if AL_DOF=1 or AL_MotionBlur=1
         if fileexist(AL_MydocDirectory+"Depth of field"+str$(AL_MotionBlur)+str$(AL_DOF)+".fx")=0
            Effect_LockFile(AL_Directory+"Post Processing\Depth of field.fx")
            Effect_SetDefine("MOTIONBLUR",AL_MotionBlur)
            Effect_SetDefine("DOF",AL_DOF)
            Effect_UnLockFile(AL_MydocDirectory+"Depth of field"+str$(AL_MotionBlur)+str$(AL_DOF)+".fx")
         endif
         AL_RenderTargets(7)=PostFilter_AddRenderTarget(AL_MydocDirectory+"Depth of field"+str$(AL_MotionBlur)+str$(AL_DOF)+".fx",AL_PostViewVec.x,AL_PostViewVec.y,AL_D3dfmt)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(7),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(4)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(7),1,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(7),2,AL_Image(2))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(7),3,PostFilter_GetRenderTargetImage(AL_RenderTargets(6)))
         if fileexist(AL_MydocDirectory+"Motion Blur"+str$(AL_HDR)+str$(AL_MotionBlur)+".fx")=0
            Effect_LockFile(AL_Directory+"Post Processing\Motion Blur.fx")
            Effect_SetDefine("HDR",AL_HDR)
            Effect_SetDefine("MOTIONBLUR",AL_MotionBlur)
            Effect_UnLockFile(AL_MydocDirectory+"Motion Blur"+str$(AL_HDR)+str$(AL_MotionBlur)+".fx")
         endif
         AL_RenderTargets(8)=PostFilter_AddRenderTarget(AL_MydocDirectory+"Motion Blur"+str$(AL_HDR)+str$(AL_MotionBlur)+".fx",AL_PostViewVec.x,AL_PostViewVec.y,AL_D3dfmt)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(8),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(7)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(8),1,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(8),2,AL_Image(2))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(8),3,PostFilter_GetRenderTargetImage(AL_RenderTargets(6)))
      endif
      if AL_Bloom=1 or AL_GodRays=1
         if fileexist(AL_MydocDirectory+"Bloom H"+str$(AL_GodRays)+str$(AL_Bloom)+".fx")=0
            Effect_LockFile(AL_Directory+"Post Processing\Bloom H.fx")
            Effect_SetDefine("GODRAYS",AL_GodRays)
            Effect_SetDefine("BLOOM",AL_Bloom)
            Effect_UnLockFile(AL_MydocDirectory+"Bloom H"+str$(AL_GodRays)+str$(AL_Bloom)+".fx")
         endif
         AL_RenderTargets(9)=PostFilter_AddRenderTarget(AL_MydocDirectory+"Bloom H"+str$(AL_GodRays)+str$(AL_Bloom)+".fx",AL_PostViewVec.x/2,AL_PostViewVec.y/2,AL_D3dfmt)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(9),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(4)))
         if AL_MotionBlur=1 or AL_DOF=1 then PostFilter_SetRenderTargetImage(AL_RenderTargets(9),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(8)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(9),1,AL_Image(3))
         if fileexist(AL_MydocDirectory+"Bloom V"+str$(AL_GodRays)+str$(AL_Bloom)+".fx")=0
            Effect_LockFile(AL_Directory+"Post Processing\Bloom V.fx")
            Effect_SetDefine("GODRAYS",AL_GodRays)
            Effect_SetDefine("BLOOM",AL_Bloom)
            Effect_UnLockFile(AL_MydocDirectory+"Bloom V"+str$(AL_GodRays)+str$(AL_Bloom)+".fx")
         endif
         AL_RenderTargets(10)=PostFilter_AddRenderTarget(AL_MydocDirectory+"Bloom V"+str$(AL_GodRays)+str$(AL_Bloom)+".fx",AL_PostViewVec.x/2,AL_PostViewVec.y/2,AL_D3dfmt)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(10),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(9)))
      endif
      if AL_LensFlares=1
         AL_RenderTargets(11)=PostFilter_AddRenderTarget(AL_Directory+"Post Processing\Lens flare.fx",AL_PostViewVec.x/4,AL_PostViewVec.y/4,AL_D3dfmt)
         PostFilter_SetRenderTargetImage(AL_RenderTargets(11),0,PostFilter_GetRenderTargetImage(AL_RenderTargets(10)))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(11),1,AL_Image(18))
         PostFilter_SetRenderTargetImage(AL_RenderTargets(11),2,AL_Image(24))
         Vector4Float(0).x=(360.0/6.0)/3
         for x=1 to 6
            set vector3 Vector3(1),0,0,1
            rotate y matrix4 Matrix(1),Vector4Float(0).x*0.01745329251
            transform normals vector3 Vector3(1),Vector3(1),Matrix(1)
            set vector4 Vector4(1),x vector3(Vector3(1)),z vector3(Vector3(1)),0,0
            set effect constant vector AL_RenderTarget(AL_RenderTargets(11)).Effect,"Dir"+str$(x),Vector4(1)
            Vector4Float(0).x=Vector4Float(0).x+60
         next x
      endif
      if fileexist(AL_MydocDirectory+"Final composite"+str$(AL_HDR)+str$(AL_Distortion)+str$(AL_MotionBlur)+str$(AL_GodRays)+str$(AL_FXAA)+str$(AL_Bloom)+str$(AL_LensFlares)+str$(AL_DOF)+".fx")=0
         Effect_LockFile(AL_Directory+"Post Processing\Final composite.fx")
         Effect_SetDefine("HDR",AL_HDR)
         Effect_SetDefine("DISTORTION",AL_Distortion)
         Effect_SetDefine("MOTIONBLUR",AL_MotionBlur)
         Effect_SetDefine("GODRAYS",AL_GodRays)
         Effect_SetDefine("FXAA",AL_FXAA)
         Effect_SetDefine("BLOOM",AL_Bloom)
         Effect_SetDefine("LENSFLARE",AL_LensFlares)
         Effect_SetDefine("DOF",AL_DOF)
         Effect_UnLockFile(AL_MydocDirectory+"Final composite"+str$(AL_HDR)+str$(AL_Distortion)+str$(AL_MotionBlur)+str$(AL_GodRays)+str$(AL_FXAA)+str$(AL_Bloom)+str$(AL_LensFlares)+str$(AL_DOF)+".fx")
      endif
      AL_FinalComposite=PostFilter_AddFrameTarget(AL_MydocDirectory+"Final composite"+str$(AL_HDR)+str$(AL_Distortion)+str$(AL_MotionBlur)+str$(AL_GodRays)+str$(AL_FXAA)+str$(AL_Bloom)+str$(AL_LensFlares)+str$(AL_DOF)+".fx")
      PostFilter_SetFrameTargetImage(AL_FinalComposite,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,1,AL_Image(3))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,2,PostFilter_GetRenderTargetImage(AL_RenderTargets(3)))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,3,PostFilter_GetRenderTargetImage(AL_RenderTargets(8)))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,4,PostFilter_GetRenderTargetImage(AL_RenderTargets(10)))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,5,PostFilter_GetRenderTargetImage(AL_RenderTargets(11)))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,6,AL_Image(17))
      PostFilter_SetFrameTargetImage(AL_FinalComposite,7,AL_Image(21))
      if AL_SSAO=1 or AL_SSR=1 then texture object AL_PostProcessingObject(2),4,PostFilter_GetRenderTargetImage(AL_FrameRender)
      set vector4 Vector4(1),(AL_DirLightColor.x/255)^2.2,(AL_DirLightColor.y/255)^2.2,(AL_DirLightColor.Z/255)^2.2,0
      set effect constant vector AL_FrameTarget(0).Effect,"LightDirectionColor",Vector4(1)
      set object mask AL_AmbientLightObject,2^AL_Camera(0)
      set object mask AL_DirLightObject(1),2^AL_Camera(0)
      set object mask AL_BoxAmbientBatch(0).Object,(2^AL_Camera(0))+(2^AL_Camera(3))
      set object mask AL_SphereAmbientBatch(0).Object,(2^AL_Camera(0))+(2^AL_Camera(3))
      set object mask AL_WaterFogObject,(2^AL_Camera(0))+(2^AL_Camera(3))
      for d=1 to 15
         set object mask AL_SpotShadowMap(d).Object,2^AL_Camera(0)
         set object mask AL_PointShadowMap(d).Object,2^AL_Camera(0)
      next d
   endif
endfunction

`----------------------------------------------------
` Water Screen Splash
`----------------------------------------------------
function PostFilter_WaterSplash()
   if AL_PostFilter=1
      AL_WaterSplash.x=100
      AL_WaterSplash.y=100
      AL_WaterSplash.z=0
      AL_WaterSplash.w=2
      Vector4Float(1).x=rnd(100)
      Vector4Float(1).y=rnd(100)
      set vector4 Vector4(1),Vector4Float(1).x/100,Vector4Float(1).y/100,0,0
      set effect constant vector PostFilter_GetFrameTargetEffect(AL_FinalComposite),"WaterSplashUv",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Add Frame Target
`----------------------------------------------------
function PostFilter_AddFrameTarget(iEffect as string)
   if AL_PostFilter=1
      array insert at bottom AL_FrameTarget()
      AL_FrameTarget(AL_FrameTargetCount).Object=FreeUpObject(32500+rnd(16250))
      AL_FrameTarget(AL_FrameTargetCount).Effect=FreeUpEffect(32500+rnd(16250))
      Object_CreateTarget(AL_FrameTarget(AL_FrameTargetCount).Object,AL_FrameTarget(AL_FrameTargetCount).Effect,iEffect)
      set object mask AL_FrameTarget(AL_FrameTargetCount).Object,2^0
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize1",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,0)
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize3",Camera_ViewVec(Vector4(1),AL_PostViewVec.x/2,AL_PostViewVec.y/2,0)
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize4",Camera_ViewVec(Vector4(1),AL_PostViewVec.x/4,AL_PostViewVec.y/4,0)
      tReturn=AL_FrameTargetCount
      inc AL_FrameTargetCount
   endif
endfunction tReturn

`----------------------------------------------------
` Texture Frame Target
`----------------------------------------------------
function PostFilter_SetFrameTargetImage(iTarget as integer,iStage as integer,iImage as integer)
   if iTarget>-1 and iTarget<AL_FrameTargetCount then texture object AL_FrameTarget(iTarget).Object,iStage,iImage
endfunction

`----------------------------------------------------
` Frame Target Effect
`----------------------------------------------------
function PostFilter_GetFrameTargetEffect(iTarget as integer)
   if iTarget>-1 and iTarget<AL_FrameTargetCount then  tEffect=AL_FrameTarget(iTarget).Effect
endfunction tEffect

`----------------------------------------------------
` Add Render Target
`----------------------------------------------------
function PostFilter_AddRenderTarget(iEffect as string,iWidth as integer,iHeight as integer,iD3DFormat as integer)
   tRenderTarget=-1
   if AL_PostFilter=1
      array insert at bottom AL_RenderTarget()
      AL_RenderTarget(AL_RenderTargetCount).UpDate=1
      AL_RenderTarget(AL_RenderTargetCount).Camera=FreeUpEfxCam()
      AL_RenderTarget(AL_RenderTargetCount).Image=FreeUpImage(32500+rnd(16250))
      AL_RenderTarget(AL_RenderTargetCount).Object=FreeUpObject(32500+rnd(16250))
      AL_RenderTarget(AL_RenderTargetCount).Effect=FreeUpEffect(32500+rnd(16250))
      AL_RenderTarget(AL_RenderTargetCount).ViewVec.x=iWidth
      AL_RenderTarget(AL_RenderTargetCount).ViewVec.y=iHeight
      AL_RenderTarget(AL_RenderTargetCount).D3DFormat=iD3DFormat
      Camera_CreateEfx(AL_RenderTarget(AL_RenderTargetCount).Camera,AL_RenderTarget(AL_RenderTargetCount).Image,AL_RenderTarget(AL_RenderTargetCount).ViewVec.x,AL_RenderTarget(AL_RenderTargetCount).ViewVec.y,AL_RenderTarget(AL_RenderTargetCount).D3DFormat)
      Object_CreateTarget(AL_RenderTarget(AL_RenderTargetCount).Object,AL_RenderTarget(AL_RenderTargetCount).Effect,iEffect)
      set object mask AL_RenderTarget(AL_RenderTargetCount).Object,0
      EfxCam_SetObject AL_RenderTarget(AL_RenderTargetCount).Camera,AL_RenderTarget(AL_RenderTargetCount).Object
      disable object zwrite AL_RenderTarget(AL_RenderTargetCount).Object
      disable object zdepth AL_RenderTarget(AL_RenderTargetCount).Object
      set effect constant vector AL_RenderTarget(AL_RenderTargetCount).Effect,"ViewSize",Camera_ViewVec(Vector4(1),AL_RenderTarget(AL_RenderTargetCount).ViewVec.x,AL_RenderTarget(AL_RenderTargetCount).ViewVec.y,0)
      tRenderTarget=AL_RenderTargetCount
      inc AL_RenderTargetCount
   endif
endfunction tRenderTarget

`----------------------------------------------------
` Texture Render Target
`----------------------------------------------------
function PostFilter_SetRenderTargetImage(iTarget as integer,iStage as integer,iImage as integer)
   if iTarget>-1 and iTarget<AL_RenderTargetCount then texture object AL_RenderTarget(iTarget).Object,iStage,iImage
endfunction

`----------------------------------------------------
` Render Target Image
`----------------------------------------------------
function PostFilter_GetRenderTargetImage(iTarget as integer)
   if iTarget>-1 and iTarget<AL_RenderTargetCount then tImage=AL_RenderTarget(iTarget).Image
endfunction tImage

`----------------------------------------------------
` Render Target Effect
`----------------------------------------------------
function PostFilter_GetRenderTargetEffect(iTarget as integer)
   if iTarget>-1 and iTarget<AL_RenderTargetCount then tEffect=AL_RenderTarget(iTarget).Effect
endfunction tEffect

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_BoxAmbientData
   InUse as boolean
   Visible as integer
   Bounds as integer
   DrawDistance as float
   Position as Vec3Float
   Scale as Vec3Float
   Angle as Vec3Float
   Padding1 as Vec3Float
   Padding2 as Vec3Float
   Color as Vec3Float
   Intensity as float
   Matrix1 as Vec3Float
   Matrix2 as Vec3Float
   Matrix3 as Vec3Float
   Reflection as boolean
   ReflectionId as integer
   ReflectionVis as integer
endtype

type AL_BoxAmbientBatchData
   Object as integer
   Effect as integer
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
   pData5 as dword
   pData6 as dword
   pData7 as dword
endtype

type AL_SphereAmbientData
   InUse as boolean
   Bounds as integer
   Object as integer
   Visible as integer
   Position as Vec3Float
   Range as float
   Padding as float
   DrawDistance as float
   Color as Vec3Float
   Intensity as float
   Reflection as boolean
   ReflectionId as integer
   ReflectionVis as integer
endtype

type AL_SphereAmbientBatchData
   Object as integer
   Effect as integer
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
endtype

`----------------------------------------------------
` Ambient Color
`----------------------------------------------------
function Ambient_SetColor(iRed as float,iGreen as float,iBlue as float)
   if AL_Ambient(1)<>iRed1 or AL_Ambient(2)<>iGreen or AL_Ambient(3)<>iBlue
      AL_Ambient(1)=iRed
      AL_Ambient(2)=iGreen
      AL_Ambient(3)=iBlue
      Effect_SetAllConstantVector("AmbientColor",(AL_Ambient(1)/255)^2.2,(AL_Ambient(2)/255)^2.2,(AL_Ambient(3)/255)^2.2,0)
   endif
endfunction

`----------------------------------------------------
` Ambient Intensity
`----------------------------------------------------
function Ambient_SetIntensity(iIntensity as float)
   if AL_Ambient(7)<>iIntensity
      AL_Ambient(7)=iIntensity
      Effect_SetAllConstantFloat("AmbientIntensity",AL_Ambient(7))
   endif
endfunction

`--------------
` Emissive Intensity
`--------------
function Ambient_SetEmissive(iIntensity as float)
   if AL_Ambient(9)<>iIntensity
      AL_Ambient(9)=iIntensity
      Effect_SetAllConstantFloat("EmissiveIntensity",AL_Ambient(9))
   endif
endfunction

`----------------------------------------------------
` Create Box Ambient
`----------------------------------------------------
function BoxAmbient_Create()
   tBoxAmbient=-1
   for a=AL_BoxAmbientFreeUp to AL_BoxAmbientCount
      if AL_BoxAmbient(a).InUse=0 then tBoxAmbient=a:exit
   next a
   if tBoxAmbient=-1
      tBoxAmbient=AL_BoxAmbientCount+1
      AL_BoxAmbientCount=AL_BoxAmbientCount+1000
      dim AL_BoxAmbient(AL_BoxAmbientCount)
   endif
   AL_BoxAmbientFreeUp=tBoxAmbient
   AL_BoxAmbient(tBoxAmbient).InUse=1
   AL_BoxAmbient(tBoxAmbient).DrawDistance=32
   AL_BoxAmbient(tBoxAmbient).Intensity=20
   AL_BoxAmbient(tBoxAmbient).Reflection=0
   AL_BoxAmbient(tBoxAmbient).Bounds=FrustumCulling_AddBounds(tBoxAmbient,4)
   FrustumCulling_SetDrawDistance(AL_BoxAmbient(tBoxAmbient).Bounds,AL_BoxAmbient(tBoxAmbient).DrawDistance)
   BoxAmbient_SetVisible(tBoxAmbient,1)
endfunction tBoxAmbient

`----------------------------------------------------
` Delete Box Ambient
`----------------------------------------------------
function BoxAmbient_Delete(iBoxAmbient as integer)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      BoxAmbient_SetVisible(iBoxAmbient,0)
      AL_BoxAmbient(iBoxAmbient).InUse=0
      FrustumCulling_RemoveBounds(AL_BoxAmbient(iBoxAmbient).Bounds)
      if AL_BoxAmbientFreeUp<iBoxAmbient then AL_BoxAmbientFreeUp=iBoxAmbient
   endif
endfunction

`----------------------------------------------------
` Box Ambient Set Visible
`----------------------------------------------------
function BoxAmbient_SetVisible(iBoxAmbient as integer,iVisible as boolean)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      if iVisible=1 and AL_BoxAmbient(iBoxAmbient).Visible<>1
         if AL_BoxAmbient(iBoxAmbient).Visible=0
            array insert at bottom AL_BoxAmbientVisible()
            inc AL_BoxAmbientVisibleCount
            AL_BoxAmbientVisible(AL_BoxAmbientVisibleCount)=iBoxAmbient+1
         endif
         FrustumCulling_SetBoundsVisible(AL_BoxAmbient(iBoxAmbient).Bounds,1)
         AL_BoxAmbient(iBoxAmbient).Visible=1
      endif
      if iVisible=0 and AL_BoxAmbient(iBoxAmbient).Visible=1
         FrustumCulling_SetBoundsVisible(AL_BoxAmbient(iBoxAmbient).Bounds,0)
         AL_BoxAmbient(iBoxAmbient).Visible=2
         AL_BoxAmbientVisibleRemove=1
      endif
   endif
endfunction

`----------------------------------------------------
` Box Ambient Set Postion
`----------------------------------------------------
function BoxAmbient_SetPosition(iBoxAmbient as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      AL_BoxAmbient(iBoxAmbient).Position.x=iPosX
      AL_BoxAmbient(iBoxAmbient).Position.y=iPosY
      AL_BoxAmbient(iBoxAmbient).Position.z=iPosZ
      BoxAmbient_Update(iBoxAmbient)
   endif
endfunction

`----------------------------------------------------
` Box Ambient Set Angle
`----------------------------------------------------
function BoxAmbient_SetAngle(iBoxAmbient as integer,iAngX as float,iAngY as float,iAngZ as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      AL_BoxAmbient(iBoxAmbient).Angle.x=iAngX
      AL_BoxAmbient(iBoxAmbient).Angle.y=iAngY
      AL_BoxAmbient(iBoxAmbient).Angle.z=iAngZ
      BoxAmbient_Update(iBoxAmbient)
   endif
endfunction

`----------------------------------------------------
` Box Ambient Set Scale
`----------------------------------------------------
function BoxAmbient_SetScale(iBoxAmbient as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      AL_BoxAmbient(iBoxAmbient).Scale.x=iScaleX
      AL_BoxAmbient(iBoxAmbient).Scale.y=iScaleY
      AL_BoxAmbient(iBoxAmbient).Scale.z=iScaleZ
      BoxAmbient_Update(iBoxAmbient)
   endif
endfunction

`----------------------------------------------------
` Box Ambient Set Padding
`----------------------------------------------------
function BoxAmbient_SetPadding(iBoxAmbient as integer,iPaddingPX as float,iPaddingNX as float,iPaddingPY as float,iPaddingNY as float,iPaddingPZ as float,iPaddingNZ as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
      AL_BoxAmbient(iBoxAmbient).Padding1.x=iPaddingPX
      AL_BoxAmbient(iBoxAmbient).Padding1.y=iPaddingPY
      AL_BoxAmbient(iBoxAmbient).Padding1.z=iPaddingPZ
      AL_BoxAmbient(iBoxAmbient).Padding2.x=iPaddingNX
      AL_BoxAmbient(iBoxAmbient).Padding2.y=iPaddingNY
      AL_BoxAmbient(iBoxAmbient).Padding2.z=iPaddingNZ
   endif
endfunction

`----------------------------------------------------
` Box Ambient Color
`----------------------------------------------------
function BoxAmbient_SetColor(iBoxAmbient as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1
       AL_BoxAmbient(iBoxAmbient).Color.x=iRed
       AL_BoxAmbient(iBoxAmbient).Color.y=iGreen
       AL_BoxAmbient(iBoxAmbient).Color.z=iBlue
   endif
endfunction

`----------------------------------------------------
` Box Ambient Intensity
`----------------------------------------------------
function BoxAmbient_SetIntensity(iBoxAmbient as integer,iIntensity as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1 then AL_BoxAmbient(iBoxAmbient).Intensity=iIntensity
endfunction

`----------------------------------------------------
` Box Ambient Draw Distance
`----------------------------------------------------
function BoxAmbient_SetDrawDistance(iBoxAmbient as integer,iDrawDistance as float)
   if AL_BoxAmbient(iBoxAmbient).InUse=1 and AL_BoxAmbient(iBoxAmbient).DrawDistance<>iDrawDistance
      AL_BoxAmbient(iBoxAmbient).DrawDistance=iDrawDistance
      FrustumCulling_SetDrawDistance(AL_BoxAmbient(iBoxAmbient).Bounds,AL_BoxAmbient(iBoxAmbient).DrawDistance)
   endif
endfunction

`----------------------------------------------------
` Create Sphere Ambient
`----------------------------------------------------
function SphereAmbient_Create()
   tSphereAmbient=-1
   for a=AL_SphereAmbientFreeUp to AL_SphereAmbientCount
      if AL_SphereAmbient(a).InUse=0 then tSphereAmbient=a:exit
   next a
   if tSphereAmbient=-1
      tSphereAmbient=AL_SphereAmbientCount+1
      AL_SphereAmbientCount=AL_SphereAmbientCount+1000
      dim AL_SphereAmbient(AL_SphereAmbientCount)
   endif
   AL_SphereAmbientFreeUp=tSphereAmbient
   AL_SphereAmbient(tSphereAmbient).InUse=1
   AL_SphereAmbient(tSphereAmbient).DrawDistance=32
   AL_SphereAmbient(tSphereAmbient).Intensity=20
   AL_SphereAmbient(tSphereAmbient).Reflection=0
   AL_SphereAmbient(tSphereAmbient).Bounds=FrustumCulling_AddBounds(tSphereAmbient,5)
   FrustumCulling_SetDrawDistance(AL_SphereAmbient(tSphereAmbient).Bounds,AL_SphereAmbient(tSphereAmbient).DrawDistance)
   SphereAmbient_SetVisible(tSphereAmbient,1)
endfunction tSphereAmbient

`----------------------------------------------------
` Delete Sphere Ambient
`----------------------------------------------------
function SphereAmbient_Delete(iSphereAmbient as integer)
   if AL_SphereAmbient(iSphereAmbient).InUse=1
      SphereAmbient_SetVisible(iSphereAmbient,0)
      AL_SphereAmbient(iSphereAmbient).InUse=0
      FrustumCulling_RemoveBounds(AL_SphereAmbient(iSphereAmbient).Bounds)
      if AL_SphereAmbientFreeUp<iSphereAmbient then AL_SphereAmbientFreeUp=iSphereAmbient
   endif
endfunction

`----------------------------------------------------
` Sphere Ambient Set Visible
`----------------------------------------------------
function SphereAmbient_SetVisible(iSphereAmbient as integer,iVisible as boolean)
   if AL_SphereAmbient(iSphereAmbient).InUse=1
      if iVisible=1 and AL_SphereAmbient(iSphereAmbient).Visible<>1
         if AL_SphereAmbient(iSphereAmbient).Visible=0
            array insert at bottom AL_SphereAmbientVisible()
            inc AL_SphereAmbientVisibleCount
            AL_SphereAmbientVisible(AL_SphereAmbientVisibleCount)=iSphereAmbient+1
         endif
         FrustumCulling_SetBoundsVisible(AL_SphereAmbient(iSphereAmbient).Bounds,1)
         AL_SphereAmbient(iSphereAmbient).Visible=1
      endif
      if iVisible=0 and AL_SphereAmbient(iSphereAmbient).Visible=1
         FrustumCulling_SetBoundsVisible(AL_SphereAmbient(iSphereAmbient).Bounds,0)
         AL_SphereAmbient(iSphereAmbient).Visible=2
         AL_SphereAmbientVisibleRemove=1
      endif
   endif
endfunction

`----------------------------------------------------
` Sphere Ambient Set Postion
`----------------------------------------------------
function SphereAmbient_SetPosition(iSphereAmbient as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1
      AL_SphereAmbient(iSphereAmbient).Position.x=iPosX
      AL_SphereAmbient(iSphereAmbient).Position.y=iPosY
      AL_SphereAmbient(iSphereAmbient).Position.z=iPosZ
      FrustumCulling_SetBounds(AL_SphereAmbient(iSphereAmbient).Bounds,AL_SphereAmbient(iSphereAmbient).Position.x,AL_SphereAmbient(iSphereAmbient).Position.y,AL_SphereAmbient(iSphereAmbient).Position.z,AL_SphereAmbient(iSphereAmbient).Range,AL_SphereAmbient(iSphereAmbient).Range,AL_SphereAmbient(iSphereAmbient).Range)
   endif
endfunction

`----------------------------------------------------
` Sphere Ambient Set Scale
`----------------------------------------------------
function SphereAmbient_SetRange(iSphereAmbient as integer,iRange as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1
      AL_SphereAmbient(iSphereAmbient).Range=iRange
      FrustumCulling_SetBounds(AL_SphereAmbient(iSphereAmbient).Bounds,AL_SphereAmbient(iSphereAmbient).Position.x,AL_SphereAmbient(iSphereAmbient).Position.y,AL_SphereAmbient(iSphereAmbient).Position.z,AL_SphereAmbient(iSphereAmbient).Range,AL_SphereAmbient(iSphereAmbient).Range,AL_SphereAmbient(iSphereAmbient).Range)
   endif
endfunction

`----------------------------------------------------
` Sphere Ambient Set Padding
`----------------------------------------------------
function SphereAmbient_SetPadding(iSphereAmbient as integer,iPadding as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1 then AL_SphereAmbient(iSphereAmbient).Padding=iPadding
endfunction

`----------------------------------------------------
` Sphere Ambient Color
`----------------------------------------------------
function SphereAmbient_SetColor(iSphereAmbient as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1
       AL_SphereAmbient(iSphereAmbient).Color.x=iRed
       AL_SphereAmbient(iSphereAmbient).Color.y=iGreen
       AL_SphereAmbient(iSphereAmbient).Color.z=iBlue
   endif
endfunction

`----------------------------------------------------
` Sphere Ambient Intensity
`----------------------------------------------------
function SphereAmbient_SetIntensity(iSphereAmbient as integer,iIntensity as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1 then AL_SphereAmbient(iSphereAmbient).Intensity=iIntensity
endfunction

`----------------------------------------------------
` Sphere Ambient Draw Distance
`----------------------------------------------------
function SphereAmbient_SetDrawDistance(iSphereAmbient as integer,iDrawDistance as float)
   if AL_SphereAmbient(iSphereAmbient).InUse=1 and AL_SphereAmbient(iSphereAmbient).DrawDistance<>iDrawDistance
      AL_SphereAmbient(iSphereAmbient).DrawDistance=iDrawDistance
      FrustumCulling_SetDrawDistance(AL_SphereAmbient(iSphereAmbient).Bounds,AL_SphereAmbient(iSphereAmbient).DrawDistance)
   endif
endfunction

`Show Local Ambient
   _Ambient_Show:
      AL_BoxAmbientActiveCount=-1:AL_BoxAmbientActiveObject=-1:AL_BoxAmbientActiveIndex=0:AL_BoxAmbientActiveReflection=-1
      for a=0 to VFC_VisibleCount(4)
         tBoxAmbient=VFC_Bounds(VFC_Visible(a,4)).Handel
         inc AL_BoxAmbientActiveCount
         if AL_BoxAmbientActiveIndex=0
            inc AL_BoxAmbientActiveObject
            if AL_BoxAmbientActiveObject>AL_BoxAmbientBatchCount then BoxAmbient_LoadBatch()
            exclude object off AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).Object
         endif
         Vector4Float(1).x=AL_BoxAmbient(tBoxAmbient).Padding1.x:Vector4Float(1).y=AL_BoxAmbient(tBoxAmbient).Padding1.y:Vector4Float(1).z=AL_BoxAmbient(tBoxAmbient).Padding1.z
         Vector4Float(2).x=AL_BoxAmbient(tBoxAmbient).Padding2.x:Vector4Float(2).y=AL_BoxAmbient(tBoxAmbient).Padding2.y:Vector4Float(2).z=AL_BoxAmbient(tBoxAmbient).Padding2.z
         for x=1 to 2
            if Vector4Float(x).x>AL_BoxAmbient(tBoxAmbient).Scale.x/2 then Vector4Float(x).x=AL_BoxAmbient(tBoxAmbient).Scale.x/2
            if Vector4Float(x).y>AL_BoxAmbient(tBoxAmbient).Scale.y/2 then Vector4Float(x).y=AL_BoxAmbient(tBoxAmbient).Scale.y/2
            if Vector4Float(x).z>AL_BoxAmbient(tBoxAmbient).Scale.z/2 then Vector4Float(x).z=AL_BoxAmbient(tBoxAmbient).Scale.z/2
         next x
         pEffect=AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pEffect
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData0,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix1.x,AL_BoxAmbient(tBoxAmbient).Matrix1.y,AL_BoxAmbient(tBoxAmbient).Matrix1.z,AL_BoxAmbient(tBoxAmbient).Scale.x/100
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData1,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix2.x,AL_BoxAmbient(tBoxAmbient).Matrix2.y,AL_BoxAmbient(tBoxAmbient).Matrix2.z,AL_BoxAmbient(tBoxAmbient).Scale.y/100
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData2,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix3.x,AL_BoxAmbient(tBoxAmbient).Matrix3.y,AL_BoxAmbient(tBoxAmbient).Matrix3.z,AL_BoxAmbient(tBoxAmbient).Scale.z/100
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData3,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Position.x,AL_BoxAmbient(tBoxAmbient).Position.y,AL_BoxAmbient(tBoxAmbient).Position.z,AL_BoxAmbient(tBoxAmbient).Intensity
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData4,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,(AL_BoxAmbient(tBoxAmbient).Color.x/255)^2.2,(AL_BoxAmbient(tBoxAmbient).Color.y/255)^2.2,(AL_BoxAmbient(tBoxAmbient).Color.z/255)^2.2,0
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData5,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z,AL_BoxAmbient(tBoxAmbient).Reflection
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData6,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,Vector4Float(2).x,Vector4Float(2).y,Vector4Float(2).z,1-AL_BoxAmbient(tBoxAmbient).Reflection
         pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(AL_BoxAmbientActiveObject).pData7,AL_BoxAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Scale.x,AL_BoxAmbient(tBoxAmbient).Scale.y,AL_BoxAmbient(tBoxAmbient).Scale.z,0
         if AL_BoxAmbient(tBoxAmbient).Reflection=1
            tBoxReflection=AL_BoxAmbient(tBoxAmbient).ReflectionId
            exclude object off AL_BoxReflection(tBoxReflection).Object
            pEffect=AL_BoxReflection(tBoxReflection).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData0,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix1.x,AL_BoxAmbient(tBoxAmbient).Matrix1.y,AL_BoxAmbient(tBoxAmbient).Matrix1.z,AL_BoxAmbient(tBoxAmbient).Scale.x/100
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData1,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix2.x,AL_BoxAmbient(tBoxAmbient).Matrix2.y,AL_BoxAmbient(tBoxAmbient).Matrix2.z,AL_BoxAmbient(tBoxAmbient).Scale.y/100
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData2,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Matrix3.x,AL_BoxAmbient(tBoxAmbient).Matrix3.y,AL_BoxAmbient(tBoxAmbient).Matrix3.z,AL_BoxAmbient(tBoxAmbient).Scale.z/100
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData3,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Position.x,AL_BoxAmbient(tBoxAmbient).Position.y,AL_BoxAmbient(tBoxAmbient).Position.z,AL_BoxAmbient(tBoxAmbient).Intensity
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData4,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_ReflectionLight.z*(1-(AL_ReflectionLightTransition/100)),AL_ReflectionLight.w*(AL_ReflectionLightTransition/100),0,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData5,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData6,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,Vector4Float(2).x,Vector4Float(2).y,Vector4Float(2).z,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxReflection(tBoxReflection).pData7,tBoxReflection)
            Shader_SetVectorVal pEffect,pElement,AL_BoxAmbient(tBoxAmbient).Scale.x,AL_BoxAmbient(tBoxAmbient).Scale.y,AL_BoxAmbient(tBoxAmbient).Scale.z,0
            inc AL_BoxAmbientActiveReflection
            AL_BoxAmbient(AL_BoxAmbientActiveReflection).ReflectionVis=AL_BoxReflection(tBoxReflection).Object
         endif
         inc AL_BoxAmbientActiveIndex
         if AL_BoxAmbientActiveIndex>24 then AL_BoxAmbientActiveIndex=0
      next a
      if AL_BoxAmbientActiveCount<AL_BoxAmbientActiveOld
         for a=AL_BoxAmbientActiveCount+1 to AL_BoxAmbientActiveOld
            tActiveObject=floor(a/25)
            tActiveIndex=a-(tActiveObject*25)
            pEffect=AL_BoxAmbientBatch(tActiveObject).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(tActiveObject).pData0,tActiveIndex)
            Shader_SetVectorVal pEffect,pElement,0,0,0,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(tActiveObject).pData1,tActiveIndex)
            Shader_SetVectorVal pEffect,pElement,0,0,0,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(tActiveObject).pData2,tActiveIndex)
            Shader_SetVectorVal pEffect,pElement,0,0,0,0
            pElement=Shader_GetParameterElement(pEffect,AL_BoxAmbientBatch(tActiveObject).pData3,tActiveIndex)
            Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
         next a
      endif
      AL_BoxAmbientActiveOld=AL_BoxAmbientActiveCount
      AL_SphereAmbientActiveCount=-1:AL_SphereAmbientActiveObject=-1:AL_SphereAmbientActiveIndex=0:AL_SphereAmbientActiveReflection=-1
      for a=0 to VFC_VisibleCount(5)
         tSphereAmbient=VFC_Bounds(VFC_Visible(a,5)).Handel
         inc AL_SphereAmbientActiveCount
         if AL_SphereAmbientActiveIndex=0
            inc AL_SphereAmbientActiveObject
            if AL_SphereAmbientActiveObject>AL_SphereAmbientBatchCount then SphereAmbient_LoadBatch()
            exclude object off AL_SphereAmbientBatch(AL_SphereAmbientActiveObject).Object
         endif
         Vector4Float(1).x=AL_SphereAmbient(tSphereAmbient).Padding
         if Vector4Float(1).x>AL_SphereAmbient(tSphereAmbient).Range then Vector4Float(1).x=AL_SphereAmbient(tSphereAmbient).Range
         pEffect=AL_SphereAmbientBatch(AL_SphereAmbientActiveObject).pEffect
         pElement=Shader_GetParameterElement(pEffect,AL_SphereAmbientBatch(AL_SphereAmbientActiveObject).pData0,AL_SphereAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_SphereAmbient(tSphereAmbient).Position.x,AL_SphereAmbient(tSphereAmbient).Position.y,AL_SphereAmbient(tSphereAmbient).Position.z,AL_SphereAmbient(tSphereAmbient).Range/100
         pElement=Shader_GetParameterElement(pEffect,AL_SphereAmbientBatch(AL_SphereAmbientActiveObject).pData1,AL_SphereAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,AL_SphereAmbient(tSphereAmbient).Range*0.5,Vector4Float(1).x,AL_SphereAmbient(tSphereAmbient).Reflection,1-AL_SphereAmbient(tSphereAmbient).Reflection
         pElement=Shader_GetParameterElement(pEffect,AL_SphereAmbientBatch(AL_SphereAmbientActiveObject).pData2,AL_SphereAmbientActiveIndex)
         Shader_SetVectorVal pEffect,pElement,(AL_SphereAmbient(tSphereAmbient).Color.x/255)^2.2,(AL_SphereAmbient(tSphereAmbient).Color.y/255)^2.2,(AL_SphereAmbient(tSphereAmbient).Color.z/255)^2.2,AL_SphereAmbient(tSphereAmbient).Intensity
         if AL_SphereAmbient(tSphereAmbient).Reflection=1
            tSphereReflection=AL_SphereAmbient(tSphereAmbient).ReflectionId
            exclude object off AL_SphereReflection(tSphereReflection).Object
            pEffect=AL_SphereReflection(tSphereReflection).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_SphereReflection(tSphereReflection).pData0,tSphereReflection)
            Shader_SetVectorVal pEffect,pElement,AL_SphereAmbient(tSphereAmbient).Position.x,AL_SphereAmbient(tSphereAmbient).Position.y,AL_SphereAmbient(tSphereAmbient).Position.z,AL_SphereAmbient(tSphereAmbient).Range/100
            pElement=Shader_GetParameterElement(pEffect,AL_SphereReflection(tSphereReflection).pData1,tSphereReflection)
            Shader_SetVectorVal pEffect,pElement,AL_SphereAmbient(tSphereAmbient).Range*0.5,Vector4Float(1).x,0,0
            pElement=Shader_GetParameterElement(pEffect,AL_SphereReflection(tSphereReflection).pData2,tSphereReflection)
            Shader_SetVectorVal pEffect,pElement,AL_ReflectionLight.z*(1-(AL_ReflectionLightTransition/100)),AL_ReflectionLight.w*(AL_ReflectionLightTransition/100),0,0
            inc AL_SphereAmbientActiveReflection
            AL_SphereAmbient(AL_SphereAmbientActiveReflection).ReflectionVis=AL_SphereReflection(tSphereReflection).Object
         endif
         inc AL_SphereAmbientActiveIndex
         if AL_SphereAmbientActiveIndex>24 then AL_SphereAmbientActiveIndex=0
      next a
      if AL_SphereAmbientActiveCount<AL_SphereAmbientActiveOld
         for a=AL_SphereAmbientActiveCount+1 to AL_SphereAmbientActiveOld
            tActiveObject=floor(a/25)
            tActiveIndex=a-(tActiveObject*25)
            pEffect=AL_SphereAmbientBatch(tActiveObject).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_SphereAmbientBatch(tActiveObject).pData0,tActiveIndex)
            Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
         next a
      endif
      AL_SphereAmbientActiveOld=AL_SphereAmbientActiveCount
   return

`Hide Local Ambient
   _Ambient_Hide:
      for b=0 to AL_BoxAmbientActiveObject:exclude object on AL_BoxAmbientBatch(b).Object:next b
      for r=0 to AL_BoxAmbientActiveReflection:exclude object on AL_BoxAmbient(r).ReflectionVis:next r
      for b=0 to AL_SphereAmbientActiveObject:exclude object on AL_SphereAmbientBatch(b).Object:next b
      for r=0 to AL_SphereAmbientActiveReflection:exclude object on AL_SphereAmbient(r).ReflectionVis:next r
   return

`----------------------------------------------------
` Update Box Ambient
`----------------------------------------------------
function BoxAmbient_Update(iBoxAmbient as integer)
   rotate x matrix4 Matrix(1),AL_BoxAmbient(iBoxAmbient).Angle.x*0.01745329251
   rotate y matrix4 Matrix(2),AL_BoxAmbient(iBoxAmbient).Angle.y*0.01745329251
   rotate z matrix4 Matrix(3),AL_BoxAmbient(iBoxAmbient).Angle.z*0.01745329251
   multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
   multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
   AL_BoxAmbient(iBoxAmbient).Matrix1.x=get matrix4 element(Matrix(4),0):AL_BoxAmbient(iBoxAmbient).Matrix1.y=get matrix4 element(Matrix(4),1):AL_BoxAmbient(iBoxAmbient).Matrix1.z=get matrix4 element(Matrix(4),2)
   AL_BoxAmbient(iBoxAmbient).Matrix2.x=get matrix4 element(Matrix(4),4):AL_BoxAmbient(iBoxAmbient).Matrix2.y=get matrix4 element(Matrix(4),5):AL_BoxAmbient(iBoxAmbient).Matrix2.z=get matrix4 element(Matrix(4),6)
   AL_BoxAmbient(iBoxAmbient).Matrix3.x=get matrix4 element(Matrix(4),8):AL_BoxAmbient(iBoxAmbient).Matrix3.y=get matrix4 element(Matrix(4),9):AL_BoxAmbient(iBoxAmbient).Matrix3.z=get matrix4 element(Matrix(4),10)
   MinMaxVecReSet()
   set vector3 Vector3(1),AL_BoxAmbient(iBoxAmbient).Scale.x,AL_BoxAmbient(iBoxAmbient).Scale.y,AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),-AL_BoxAmbient(iBoxAmbient).Scale.x,AL_BoxAmbient(iBoxAmbient).Scale.y,AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),AL_BoxAmbient(iBoxAmbient).Scale.x,AL_BoxAmbient(iBoxAmbient).Scale.y,-AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),-AL_BoxAmbient(iBoxAmbient).Scale.x,AL_BoxAmbient(iBoxAmbient).Scale.y,-AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),AL_BoxAmbient(iBoxAmbient).Scale.x,-AL_BoxAmbient(iBoxAmbient).Scale.y,AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),-AL_BoxAmbient(iBoxAmbient).Scale.x,-AL_BoxAmbient(iBoxAmbient).Scale.y,AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),AL_BoxAmbient(iBoxAmbient).Scale.x,-AL_BoxAmbient(iBoxAmbient).Scale.y,-AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   set vector3 Vector3(1),-AL_BoxAmbient(iBoxAmbient).Scale.x,-AL_BoxAmbient(iBoxAmbient).Scale.y,-AL_BoxAmbient(iBoxAmbient).Scale.z
   transform coords vector3 Vector3(2),Vector3(1),Matrix(4)
   MinMaxVec(x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2)))
   MinMaxPositionSize()
   FrustumCulling_SetBounds(AL_BoxAmbient(iBoxAmbient).Bounds,AL_BoxAmbient(iBoxAmbient).Position.x,AL_BoxAmbient(iBoxAmbient).Position.y,AL_BoxAmbient(iBoxAmbient).Position.z,MinMaxSize.x/2,MinMaxSize.y/2,MinMaxSize.z/2)
endfunction

`----------------------------------------------------
` Load Batch Effect/Object
`----------------------------------------------------
function BoxAmbient_LoadBatch()
   array insert at bottom AL_BoxAmbientBatch()
   inc AL_BoxAmbientBatchCount
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object=FreeUpObject(32500+rnd(16250))
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Effect=FreeUpEffect(32500+rnd(16250))
   `load object AL_Directory+"Resources\Mask Box.dbo",AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object=makeobjectcube(-1000)
   load effect AL_Directory+"Lighting\Ambient\Box.fx",AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Effect,0,1
   set object effect AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Effect
   texture object AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,0,AL_ImageMRT(1)
   texture object AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,1,AL_ImageMRT(2)
   texture object AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,2,AL_ImageMRT(3)
   texture object AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,3,AL_ImageMRT(4)
   texture object AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,4,AL_ImageMRT(6)
   set object mask AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,(2^AL_Camera(0))+(2^AL_Camera(3))
   set object radius AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,9999^9999
   disable object zwrite AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object
   exclude object on AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object
   set effect constant vector AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Effect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
   set effect constant vector AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Effect,"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect=Object_GetShaderPtr(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).Object,0)
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData0=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data0")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData1=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data1")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData2=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data2")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData3=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data3")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData4=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data4")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData5=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data5")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData6=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data6")
   AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pData7=Shader_GetParameterByName(AL_BoxAmbientBatch(AL_BoxAmbientBatchCount).pEffect,0,"Data7")
endfunction

`----------------------------------------------------
` Load Batch Effect/Object
`----------------------------------------------------
function SphereAmbient_LoadBatch()
   array insert at bottom AL_SphereAmbientBatch()
   inc AL_SphereAmbientBatchCount
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object=FreeUpObject(32500+rnd(16250))
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Effect=FreeUpEffect(32500+rnd(16250))
  ` load object AL_Directory+"Resources\Mask Sphere.dbo",AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object
  AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object=makeobjectcube(-1000)
   load effect AL_Directory+"Lighting\Ambient\Sphere.fx",AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Effect,0,1
   set object effect AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Effect
   texture object AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,0,AL_ImageMRT(1)
   texture object AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,1,AL_ImageMRT(2)
   texture object AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,2,AL_ImageMRT(3)
   texture object AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,3,AL_ImageMRT(4)
   texture object AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,4,AL_ImageMRT(6)
   set object mask AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,(2^AL_Camera(0))+(2^AL_Camera(3))
   set object radius AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,9999^9999
   disable object zwrite AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object
   exclude object on AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object
   set effect constant vector AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Effect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
   set effect constant vector AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Effect,"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pEffect=Object_GetShaderPtr(AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).Object,0)
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pData0=Shader_GetParameterByName(AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pEffect,0,"Data0")
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pData1=Shader_GetParameterByName(AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pEffect,0,"Data1")
   AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pData2=Shader_GetParameterByName(AL_SphereAmbientBatch(AL_SphereAmbientBatchCount).pEffect,0,"Data2")
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Set Fog Color
`----------------------------------------------------
function Fog_SetColor(iRed as float,iGreen as float,iBlue as float,iLightRed as float,iLightGreen as float,iLightBlue as float)
   if AL_Fog(8)<>iRed or AL_Fog(9)<>iGreen or AL_Fog(10)<>iBlue or AL_Fog(11)<>iLightRed or AL_Fog(12)<>iLightGreen or AL_Fog(13)<>iLightBlue
      AL_Fog(8)=iRed
      AL_Fog(9)=iGreen
      AL_Fog(10)=iBlue
      AL_Fog(11)=iLightRed
      AL_Fog(12)=iLightGreen
      AL_Fog(13)=iLightBlue
      Effect_SetAllConstantVector("FogColor1",(AL_Fog(8)/255)^2.2,(AL_Fog(9)/255)^2.2,(AL_Fog(10)/255)^2.2,0)
      Effect_SetAllConstantVector("FogColor2",(AL_Fog(11)/255)^2.2,(AL_Fog(12)/255)^2.2,(AL_Fog(13)/255)^2.2,0)
   endif
endfunction

`----------------------------------------------------
` Set Fog Range
`----------------------------------------------------
function Fog_SetRange(iRange as float,iPower as float)
   if AL_Fog(1)<>iRange or AL_Fog(3)<>iPower
      AL_Fog(1)=iRange
      AL_Fog(3)=iPower
      Effect_SetAllConstantVector("FogRange",AL_Fog(1),AL_Fog(2),AL_Fog(3),AL_Fog(4))
   endif
endfunction

`----------------------------------------------------
` Set Height Fog Height
`----------------------------------------------------
function Fog_SetHeight(iHeight as float,iRange as float,iAlpha as float)
   if AL_Fog(5)<>iHeight or AL_Fog(6)<>iRange or AL_Fog(7)<>iAlpha
      AL_Fog(5)=iHeight
      AL_Fog(6)=iRange
      AL_Fog(7)=iAlpha
      Effect_SetAllConstantVector("HeightFog",AL_Fog(5),AL_Fog(6),AL_Fog(7)/255,0)
   endif
endfunction

`----------------------------------------------------
` Set Height Fog Range
`----------------------------------------------------
function Fog_SetHeightRange(iRange as float,iPower as float)
   if AL_Fog(2)<>iRange or AL_Fog(4)<>iPower
      AL_Fog(2)=iRange
      AL_Fog(4)=iPower
      Effect_SetAllConstantVector("FogRange",AL_Fog(1),AL_Fog(2),AL_Fog(3),AL_Fog(4))
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Set Directional Light Visible
`----------------------------------------------------
function DirectionalLight_SetVisible(iVisible as boolean)
   if iVisible=0 then AL_DirLightVisible=0 else AL_DirLightVisible=1
endfunction

`----------------------------------------------------
` Set Directional Light Angle
`----------------------------------------------------
function DirectionalLight_SetAngle(iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_DirLightAngle.x<>wrapvalue(iAngleX) or AL_DirLightAngle.y<>wrapvalue(iAngleY) or AL_DirLightAngle.z<>wrapvalue(iAngleZ)
      AL_DirLightAngle.x=wrapvalue(iAngleX)
      AL_DirLightAngle.y=wrapvalue(iAngleY)
      AL_DirLightAngle.z=wrapvalue(iAngleZ)
      rotate x matrix4 Matrix(1),AL_DirLightAngle.x*0.01745329251
      rotate y matrix4 Matrix(2),AL_DirLightAngle.y*0.01745329251
      rotate z matrix4 Matrix(3),AL_DirLightAngle.z*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      set vector3 Vector3(1),0,0,1
      transform normals vector3 Vector3(1),Vector3(1),Matrix(4)
      AL_DirLightDirection.x=x vector3(Vector3(1))
      AL_DirLightDirection.y=y vector3(Vector3(1))
      AL_DirLightDirection.z=z vector3(Vector3(1))
      AL_DirLightPoint.x=asin(-AL_DirLightDirection.y)
      AL_DirLightPoint.y=wrapvalue(atanfull(AL_DirLightDirection.x,AL_DirLightDirection.z))
      set vector4 Vector4(1),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
      set effect constant vector AL_DirLightEffect(1),"LightDirection",Vector4(1)
      if AL_RenderTargets(9)>0 then set effect constant vector PostFilter_GetRenderTargetEffect(AL_RenderTargets(9)),"LightDirection",Vector4(1)
      if AL_RenderTargets(10)>0 then set effect constant vector PostFilter_GetRenderTargetEffect(AL_RenderTargets(10)),"LightDirection",Vector4(1)
      Effect_SetAllConstantVector("LightDirection",AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0)
   endif
endfunction

`----------------------------------------------------
` Set Directional Light Color
`----------------------------------------------------
function DirectionalLight_SetColor(iRed as float,iGreen as float,iBlue as float)
   if AL_DirLightColor.x<>iRed or AL_DirLightColor.y<>iGreen or AL_DirLightColor.z<>iBlue
      AL_DirLightColor.x=iRed
      AL_DirLightColor.y=iGreen
      AL_DirLightColor.z=iBlue
      set vector4 Vector4(1),(AL_DirLightColor.x/255)^2.2,(AL_DirLightColor.y/255)^2.2,(AL_DirLightColor.Z/255)^2.2,0
      set effect constant vector AL_DirLightEffect(1),"LightColor",Vector4(1)
      if AL_GodRays>0 then set effect constant vector AL_FrameTarget(0).Effect,"LightDirectionColor",Vector4(1)
      Effect_SetAllConstantVector("LightDirectionColor",(AL_DirLightColor.x/255)^2.2,(AL_DirLightColor.y/255)^2.2,(AL_DirLightColor.Z/255)^2.2,0)
   endif
endfunction

`----------------------------------------------------
` Set Directional Light Intensity
`----------------------------------------------------
function DirectionalLight_SetIntensity(iIntensity as float)
   if AL_DirLightIntensity<>iIntensity
      AL_DirLightIntensity=iIntensity
      set effect constant float AL_DirLightEffect(1),"LightIntensity",AL_DirLightIntensity
      Effect_SetAllConstantFloat("LightIntensity",AL_DirLightIntensity)
   endif
endfunction

`----------------------------------------------------
` Set Directional Light Range (shadows)
`----------------------------------------------------
function DirectionalLight_SetRange(iRange as float,iSplit1 as float,iSplit2 as float,iSplit3 as float)
   AL_DirLightRange.x=iRange
   AL_DirLightRange.y=iSplit1
   AL_DirLightRange.z=iSplit2
   AL_DirLightRange.w=iSplit3
   set vector4 Vector4(1),(((AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)/AL_DirLightRange.w)*2,((AL_DirLightRange.x/AL_DirLightRange.y)/AL_DirLightRange.z)*2,(AL_DirLightRange.x/AL_DirLightRange.y)*2,AL_DirLightRange.x
   set effect constant vector AL_DirLightEffect(1),"ShadowRange",Vector4(1)
   set effect constant float AL_DirLightEffect(1),"ShadowRangeVSM",AL_DirLightRange.x*1.25
endfunction

`----------------------------------------------------
` Render Directional Light
`----------------------------------------------------
function DirectionalLight_Render(iSplit as integer,iRange as float)
   tCamera=1
   if iSplit>3 then tCamera=2
   Vector4Float(2).w=iSplit
   Vector4Float(2).y=iRange*0.05
   Vector4Float(1).x=AL_CameraPos.x+(AL_CameraDir.x*(iRange/2.25))
   Vector4Float(1).y=AL_CameraPos.y+(AL_CameraDir.y*(iRange/2.25))
   Vector4Float(1).z=AL_CameraPos.z+(AL_CameraDir.z*(iRange/2.25))
   tDifference=1
   if iSplit=5
      tDifference=0
      if Vector4Float(1).x>AL_DirLightPositionVSM.x+Vector4Float(2).y or Vector4Float(1).x<AL_DirLightPositionVSM.x-Vector4Float(2).y then tDifference=1
      if Vector4Float(1).y>AL_DirLightPositionVSM.y+Vector4Float(2).y or Vector4Float(1).y<AL_DirLightPositionVSM.y-Vector4Float(2).y then tDifference=1
      if Vector4Float(1).z>AL_DirLightPositionVSM.z+Vector4Float(2).y or Vector4Float(1).z<AL_DirLightPositionVSM.z-Vector4Float(2).y then tDifference=1
      if AL_DirLightDirectionVSM.x>AL_DirLightDirection.x+0.005 or AL_DirLightDirectionVSM.x<AL_DirLightDirection.x-0.005 then tDifference=1
      if AL_DirLightDirectionVSM.y>AL_DirLightDirection.y+0.005 or AL_DirLightDirectionVSM.y<AL_DirLightDirection.y-0.005 then tDifference=1
      if AL_DirLightDirectionVSM.z>AL_DirLightDirection.z+0.005 or AL_DirLightDirectionVSM.z<AL_DirLightDirection.z-0.005 then tDifference=1
      if tDifference=1
         AL_DirLightPositionVSM.x=Vector4Float(1).x
         AL_DirLightPositionVSM.y=Vector4Float(1).y
         AL_DirLightPositionVSM.z=Vector4Float(1).z
         AL_DirLightDirectionVSM.x=AL_DirLightDirection.x
         AL_DirLightDirectionVSM.y=AL_DirLightDirection.y
         AL_DirLightDirectionVSM.z=AL_DirLightDirection.z
      endif
   endif
   if tDifference=1
      rotate x matrix4 Matrix(1),-AL_DirLightPoint.x*0.01745329251
      rotate y matrix4 Matrix(2),-AL_DirLightPoint.y*0.01745329251
      multiply matrix4 Matrix(4),Matrix(2),Matrix(1)
      set vector3 Vector3(1),Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z
      transform coords vector3 vector3(1),vector3(1),Matrix(4)
      Vector4Float(1).w=iRange*(16.0/AL_DirShadowSize)
      set vector3 Vector3(1),int(x vector3(vector3(1))/Vector4Float(1).w)*Vector4Float(1).w,int(y vector3(vector3(1))/Vector4Float(1).w)*Vector4Float(1).w,int(z vector3(vector3(1))/(iRange*(2.0/255)))*(iRange*(2.0/255))
      null=inverse matrix4(Matrix(4),Matrix(4))
      transform coords vector3 vector3(4),vector3(1),Matrix(4)
      Vector4Float(1).x=x vector3(vector3(4))
      Vector4Float(1).y=y vector3(vector3(4))
      Vector4Float(1).z=z vector3(vector3(4))
      AL_DirLightPosition.x=Vector4Float(1).x-(AL_DirLightDirection.x*AL_DirLightRange.x*2)
      AL_DirLightPosition.y=Vector4Float(1).y-(AL_DirLightDirection.y*AL_DirLightRange.x*2)
      AL_DirLightPosition.z=Vector4Float(1).z-(AL_DirLightDirection.z*AL_DirLightRange.x*2)
      set vector3 Vector3(1),0,0,0
      set vector3 Vector3(2),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z
      set vector3 Vector3(3),0,1,0
      build lookat lhmatrix4 Matrix(1),Vector3(1),Vector3(2),Vector3(3)
      if AL_DirLightDirection.y=1 then rotate x matrix4 Matrix(1),1.5707963259
      if AL_DirLightDirection.y=-1 then rotate x matrix4 Matrix(1),-1.5707963259
      translate matrix4 Matrix(2),-AL_DirLightPosition.x,-AL_DirLightPosition.y,-AL_DirLightPosition.z
      multiply matrix4 Matrix(2),Matrix(2),Matrix(1)
      build ortho lhmatrix4 Matrix(3),iRange,iRange,(AL_DirLightRange.x+(AL_DirLightRange.x*4))*0.005,(AL_DirLightRange.x+(AL_DirLightRange.x*4))
      multiply matrix4 Matrix(3),Matrix(2),Matrix(3)
      position camera AL_DirLightCamera(tCamera),0,0,0
      point camera AL_DirLightCamera(tCamera),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z
      position camera AL_DirLightCamera(tCamera),AL_DirLightPosition.x,AL_DirLightPosition.y,AL_DirLightPosition.z
      set camera range AL_DirLightCamera(tCamera),(AL_DirLightRange.x+(AL_DirLightRange.x*2))*0.005,AL_DirLightRange.x+(AL_DirLightRange.x*2)
      set camera fov AL_DirLightCamera(tCamera),(iRange/(AL_DirLightRange.x*2))*57.295
      set vector4 Vector4(1),Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z,0
      tRange=1
      if iSplit<4 then tRange=2
      set vector4 Vector4(2),Vector4Float(1).x-(AL_DirLightDirection.x*iRange*0.5*tRange),Vector4Float(1).y-(AL_DirLightDirection.y*iRange*0.5*tRange),Vector4Float(1).z-(AL_DirLightDirection.z*iRange*0.5*tRange),0
      set vector4 Vector4(3),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
      set effect constant vector AL_DirLightEffect(1),"ShadowPosition"+str$(iSplit),Vector4(2)
      set effect constant vector AL_DirLightEffect(1),"LightDirection"+str$(iSplit),Vector4(3)
      set effect constant matrix AL_DirLightEffect(1),"ShadowProj"+str$(iSplit),Matrix(3)
      GetViewProjectFrustum(18,0)
      if iSplit<5
         tSplit=iSplit
         if iSplit=4 then tSplit=1
         for e=0 to AL_EffectActiveCount
            set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"ShadowRange",iRange*tRange
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowPosition",Vector4(2)
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"LightDirection",Vector4(3)
            set effect constant matrix AL_Effect(AL_EffectActive(e)).Effect,"ShadowProj",Matrix(3)
            set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DirDepthMap"+str$(tSplit)
         next e
         Terrain_MeshCamMode=1
         set effect technique AL_ShadowFillEffect,"DepthMap"+str$(tSplit)
	 VFC_DirectionalRange=iRange/VFC_DirectionalCullRange
         FrustumCulling_Query(18,iSplit+1)
         gosub _Objects_Show
         gosub _TerrainMesh_Show
         gosub _Batch_Show
         gosub _Imposter_Show
         exclude object off AL_ShadowFillObject
         enable object zbias AL_ShadowFillObject,-(AL_DirLightRange.x+(AL_DirLightRange.x*2)),(AL_DirLightRange.x+(AL_DirLightRange.x*2))
         tCameraMask=2^AL_DirLightCamera(tCamera)
         if AL_BatchDrawCount>-1 then exclude object off AL_BatchObject:tCameraMask=tCameraMask+(2^AL_Camera(6))
         sync mask tCameraMask
         fastsync
         if AL_BatchDrawCount>-1 then exclude object on AL_BatchObject
         gosub _Objects_Hide
         gosub _Batch_Hide
         gosub _Imposter_Hide
         exclude object on AL_ShadowFillObject
         Terrain_MeshCamMode=0
      else
         if Terrain_Enabled=1
            for e=1 to 4
               set effect constant float Terrain_Effect(e),"ShadowRange",iRange/128
               set effect constant vector Terrain_Effect(e),"ShadowPosition",Vector4(2)
               set effect constant vector Terrain_Effect(e),"LightDirection",Vector4(3)
               set effect constant matrix Terrain_Effect(e),"ShadowProj",Matrix(3)
               set effect technique Terrain_Effect(e),"DirDepthMap"
               set effect constant vector Terrain_Effect(e),"ShadowPosition5",Vector4(2)
               set effect constant vector Terrain_Effect(e),"LightDirection5",Vector4(3)
               set effect constant matrix Terrain_Effect(e),"ShadowProj5",Matrix(3)
               set effect constant float Terrain_Effect(e),"ShadowRangeVSM",iRange
            next e
            if AL_Ocean=1
               set effect constant vector AL_OceanEffect,"ShadowPosition5",Vector4(2)
               set effect constant vector AL_OceanEffect,"LightDirection5",Vector4(3)
               set effect constant matrix AL_OceanEffect,"ShadowProj5",Matrix(3)
               set effect constant float AL_OceanEffect,"ShadowRangeVSM",iRange
            endif
            VFC_FrustumIndex=18
            VFC_OccludeIndex=6
            gosub _Terrain_Show
            sync mask 2^AL_DirLightCamera(2)
            fastsync
            gosub _Terrain_Hide
            EfxCam_SyncMask 2^AL_DirLightCamera(3)
            EfxCam_Sync
         endif
      endif
      if AL_ReflectionCapture=0 and iSplit<>5
         if iSplit=2 or iSplit=4
            if PeekInteger(HZB_pCamera)=0 then PokeInteger(HZB_pCamera,1)
            if iSplit=2
               PokeFloat(HZB_pCamera+44,AL_DirLightPosition.x)
               PokeFloat(HZB_pCamera+48,AL_DirLightPosition.y)
               PokeFloat(HZB_pCamera+52,AL_DirLightPosition.z)
               PokeFloat(HZB_pCamera+56,AL_DirLightDirection.x)
               PokeFloat(HZB_pCamera+60,AL_DirLightDirection.y)
               PokeFloat(HZB_pCamera+64,AL_DirLightDirection.z)
               PokeFloat(HZB_pCamera+68,AL_DirLightRange.x)
               PokeFloat(HZB_pCamera+72,iRange)
            else
               PokeFloat(HZB_pCamera+76,AL_DirLightPosition.x)
               PokeFloat(HZB_pCamera+80,AL_DirLightPosition.y)
               PokeFloat(HZB_pCamera+84,AL_DirLightPosition.z)
               PokeFloat(HZB_pCamera+88,AL_DirLightDirection.x)
               PokeFloat(HZB_pCamera+92,AL_DirLightDirection.y)
               PokeFloat(HZB_pCamera+96,AL_DirLightDirection.z)
               PokeFloat(HZB_pCamera+100,AL_DirLightRange.x)
               PokeFloat(HZB_pCamera+104,iRange)
            endif
         endif
      endif
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_SpotLightData
   InUse as boolean
   Batch as integer
   BatchIndex as integer
   Visible as integer
   Bounds as integer
   Distance as float
   Position as Vec3Float
   PositionCenter as Vec3Float
   Angle as Vec3Float
   Normal as Vec3Float
   Color as Vec3Float
   Intensity as float
   FOV as float
   Range as float
   ReflectionCapture as boolean
   Shadows as boolean
   ShadowMap as integer
   Matrix1 as Vec4Float
   Matrix2 as Vec4Float
   Matrix3 as Vec4Float
   Matrix4 as Vec4Float
   Matrix5 as Vec3Float
   Matrix6 as Vec3Float
   Matrix7 as Vec3Float
endtype

type AL_SpotLightBatchData
   Texture as integer
   FreeUp as integer
   Count as integer
   ActiveCount as integer
   ActiveObject as integer
   ActiveIndex as integer
   ActiveOld as integer
   pIndex as dword
   pObjectID as dword
   pEffectID as dword
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
   pData5 as dword
   pData6 as dword
   pData7 as dword
   pData8 as dword
endtype

type AL_SpotShadowMapData
   Light as integer
   Object as integer
   Overlap as integer
   Update as integer
   UpdateStatic as integer
   UpdateTimer as integer
   DynamicTimer as integer
   ShadowMix as integer
   Position as Vec3Integer
   Angle as Vec3Integer
   FOV as integer
   Range as integer
   Textured as boolean
   Effect as integer
   Sorted as boolean
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
   pData5 as dword
   pData6 as dword
   pData7 as dword
   pData8 as dword
   pData9 as dword
endtype

`----------------------------------------------------
` Create Spot Light
`----------------------------------------------------
function SpotLight_Create(iTexture as integer)
   tBatch=-1
   for b=0 to AL_SpotLightBatchCount
      if AL_SpotLightBatch(b).Texture=iTexture or AL_SpotLightBatch(b).Texture=-1
         if AL_SpotLightBatch(b).FreeUp<2500
            for l=AL_SpotLightBatch(b).FreeUp to 2499
               if PeekInteger(AL_SpotLightBatch(b).pIndex+(l*4))=0 then tBatch=b:tBatchIndex=l:exit
            next l
         endif
      endif
   next b
   if tBatch=-1
      array insert at bottom AL_SpotLightBatch()
      inc AL_SpotLightBatchCount
      AL_SpotLightBatch(AL_SpotLightBatchCount).Texture=iTexture
      AL_SpotLightBatch(AL_SpotLightBatchCount).Count=0
      AL_SpotLightBatch(AL_SpotLightBatchCount).pIndex=make memory(10000)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pObjectID=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pEffectID=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pEffect=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData0=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData1=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData2=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData3=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData4=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData5=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData6=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData7=make memory(400)
      AL_SpotLightBatch(AL_SpotLightBatchCount).pData8=make memory(400)
      fill memory AL_SpotLightBatch(AL_SpotLightBatchCount).pIndex,0,10000
      SpotLight_LoadBatch(AL_SpotLightBatchCount)
      tBatch=AL_SpotLightBatchCount
      tBatchIndex=0
   endif
   AL_SpotLightBatch(tBatch).FreeUp=tBatchIndex
   tLight=-1
   for l=AL_SpotLightFreeUp to AL_SpotLightCount
      if AL_SpotLight(l).InUse=0 then tLight=l:exit
   next l
   if tLight=-1
      tLight=AL_SpotLightCount+1
      AL_SpotLightCount=AL_SpotLightCount+1000
      dim AL_SpotLight(AL_SpotLightCount)
   endif
   AL_SpotLightFreeUp=tLight
   AL_SpotLight(tLight).InUse=1
   AL_SpotLight(tLight).Batch=tBatch
   AL_SpotLight(tLight).BatchIndex=tBatchIndex
   AL_SpotLight(tLight).ReflectionCapture=1
   AL_SpotLight(tLight).Shadows=0
   tObject=PeekInteger(AL_SpotLightBatch(Batch).pObjectID)
   AL_SpotLight(tLight).Bounds=FrustumCulling_AddBounds(tLight,2)
   FrustumCulling_SetDrawDistance(AL_SpotLight(tLight).Bounds,32)
   PokeInteger(AL_SpotLightBatch(tBatch).pIndex+(tBatchIndex*4),tLight+1)
   SpotLight_SetVisible(tLight,1)
   SpotLight_SetIntensity(tLight,2)
endfunction tLight

`----------------------------------------------------
` Delete Spot Light
`----------------------------------------------------
function SpotLight_Delete(iLight as integer)
   if AL_SpotLight(iLight).InUse=1
      SpotLight_SetVisible(iLight,0)
      SpotLight_SetShadow(iLight,0)
      FrustumCulling_RemoveBounds(AL_SpotLight(iLight).Bounds)
      tBatch=AL_SpotLight(tLight).Batch
      PokeInteger(AL_SpotLightBatch(tBatch).pIndex+(AL_SpotLight(iLight).BatchIndex*4),0)
      if AL_SpotLightBatch(tBatch).FreeUp<AL_SpotLight(iLight).BatchIndex then AL_SpotLightBatch(tBatch).FreeUp=AL_SpotLight(iLight).BatchIndex
      AL_SpotLight(iLight).InUse=0
      if AL_SpotLightFreeUp<iLight then AL_SpotLightFreeUp=iLight
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Visible
`----------------------------------------------------
function SpotLight_SetVisible(iLight as integer,iVisible as boolean)
   if AL_SpotLight(iLight).InUse=1
      if iVisible=1 and AL_SpotLight(iLight).Visible<>1
         if AL_SpotLight(iLight).Visible=0
            array insert at bottom AL_SpotLightVisible()
            inc AL_SpotLightVisibleCount
            AL_SpotLightVisible(AL_SpotLightVisibleCount)=iLight+1
         endif
         AL_SpotLight(iLight).Visible=1
         FrustumCulling_SetBoundsVisible(AL_SpotLight(iLight).Bounds,1)
      endif
      if iVisible=0 and AL_SpotLight(iLight).Visible=1
         AL_SpotLight(iLight).Visible=2
         AL_SpotLightVisibleRemove=1
         FrustumCulling_SetBoundsVisible(AL_SpotLight(iLight).Bounds,0)
         if AL_SpotLight(iLight).ShadowMap>0
            AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).Light=0
            AL_SpotLight(iLight).ShadowMap=0
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Draw Distance
`----------------------------------------------------
function SpotLight_SetDrawDistance(iLight as integer,iDrawDistance as float)
   if AL_SpotLight(iLight).InUse=1 then FrustumCulling_SetDrawDistance(AL_SpotLight(iLight).Bounds,iDrawDistance)
endfunction

`----------------------------------------------------
` Set Spot Light Shadows
`----------------------------------------------------
function SpotLight_SetShadow(iLight as integer,iShadows as boolean)
   if AL_SpotLight(iLight).InUse=1 and AL_SpotLight(iLight).Shadows<>iShadows
      AL_SpotLight(iLight).Shadows=iShadows
      if AL_SpotLight(iLight).ShadowMap>0
         AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).Light=0
         AL_SpotLight(iLight).ShadowMap=0
      endif
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Position
`----------------------------------------------------
function SpotLight_SetPosition(iLight as integer,iPositionX as float,iPositionY as float,iPositionZ as float)
   if AL_SpotLight(iLight).InUse=1
      AL_SpotLight(iLight).Position.x=iPositionX
      AL_SpotLight(iLight).Position.y=iPositionY
      AL_SpotLight(iLight).Position.z=iPositionZ
      SpotLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Angle
`----------------------------------------------------
function SpotLight_SetAngle(iLight as integer,iAngleX as float,iAngleY as float,iAngleZ as float,iFov as float)
   if AL_SpotLight(iLight).InUse=1
      AL_SpotLight(iLight).Angle.x=wrapvalue(iAngleX)
      AL_SpotLight(iLight).Angle.y=wrapvalue(iAngleY)
      AL_SpotLight(iLight).Angle.z=wrapvalue(iAngleZ)
      AL_SpotLight(iLight).FOV=iFov
      SpotLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Color Spot Light
`----------------------------------------------------
function SpotLight_SetColor(iLight as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_SpotLight(iLight).InUse=1
      AL_SpotLight(iLight).Color.x=iRed
      AL_SpotLight(iLight).Color.y=iGreen
      AL_SpotLight(iLight).Color.z=iBlue
      SpotLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Spot Light Intensity
`----------------------------------------------------
function SpotLight_SetIntensity(iLight as integer,iIntensity as float)
   if AL_SpotLight(iLight).InUse=1
      AL_SpotLight(iLight).Intensity=iIntensity
      SpotLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Range
`----------------------------------------------------
function SpotLight_SetRange(iLight as integer,iRange as float)
   if AL_SpotLight(iLight).InUse=1
      AL_SpotLight(iLight).Range=iRange
      SpotLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Set Spot Light Reflection Capture
`----------------------------------------------------
function SpotLight_SetReflectionCapture(iLight as integer,iReflectionCapture as boolean)
   if AL_SpotLight(iLight).InUse=1 then AL_SpotLight(iLight).ReflectionCapture=iReflectionCapture
endfunction

`----------------------------------------------------
`Show Spot Lights
   _SpotLights_Show:
      for b=0 to AL_SpotLightBatchCount
         AL_SpotLightBatch(b).ActiveCount=-1
         AL_SpotLightBatch(b).ActiveObject=-1
         AL_SpotLightBatch(b).ActiveIndex=0
      next b
      AL_SpotLightDrawCount=-1
      for a=0 to VFC_VisibleCount(2)
         tLight=VFC_Bounds(VFC_Visible(a,2)).Handel
         tBatch=AL_SpotLight(tLight).Batch
         inc AL_SpotLightBatch(tBatch).ActiveCount
         if AL_SpotLightBatch(tBatch).ActiveIndex=0
            inc AL_SpotLightBatch(tBatch).ActiveObject
            if AL_SpotLightBatch(tBatch).ActiveObject>AL_SpotLightBatch(tBatch).Count-1 then SpotLight_LoadBatch(tBatch)
            inc AL_SpotLightDrawCount
            AL_SpotLightDraw(AL_SpotLightDrawCount)=PeekInteger(AL_SpotLightBatch(tBatch).pObjectID+(AL_SpotLightBatch(tBatch).ActiveObject*4))
            exclude object off AL_SpotLightDraw(AL_SpotLightDrawCount)
         endif
         pEffect=PeekDword(AL_SpotLightBatch(tBatch).pEffect+(AL_SpotLightBatch(tBatch).ActiveObject*4))
         if AL_SpotLight(tLight).ShadowMap>0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData0+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,0,0,0,0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData6+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
            tShadowMap=AL_SpotLight(tLight).ShadowMap
            exclude object off AL_SpotShadowMap(tShadowMap).Object
            pEffect=AL_SpotShadowMap(tShadowMap).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData0,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix5.x,AL_SpotLight(tLight).Matrix5.y,AL_SpotLight(tLight).Matrix5.z,(tan(AL_SpotLight(tLight).FOV/2)*(AL_SpotLight(tLight).Range*2))/50
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData1,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix6.x,AL_SpotLight(tLight).Matrix6.y,AL_SpotLight(tLight).Matrix6.z,AL_SpotLight(tLight).Range/100
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData2,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix7.x,AL_SpotLight(tLight).Matrix7.y,AL_SpotLight(tLight).Matrix7.z,AL_SpotShadowMap(tShadowMap).ShadowMix
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData3,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix1.x,AL_SpotLight(tLight).Matrix1.y,AL_SpotLight(tLight).Matrix1.z,AL_SpotLight(tLight).Matrix1.w
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData4,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix2.y,AL_SpotLight(tLight).Matrix2.z,AL_SpotLight(tLight).Matrix2.w,AL_SpotLight(tLight).Matrix4.x
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData5,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix3.x,AL_SpotLight(tLight).Matrix3.y,AL_SpotLight(tLight).Matrix3.z,AL_SpotLight(tLight).Matrix3.w
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData6,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData7,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,(AL_SpotLight(tLight).Color.x/255)^2.2,(AL_SpotLight(tLight).Color.y/255)^2.2,(AL_SpotLight(tLight).Color.z/255)^2.2,AL_SpotLight(tLight).Intensity*(1+(AL_SpotLight(tLight).Range/500))
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData8,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,-AL_SpotLight(tLight).Normal.x,-AL_SpotLight(tLight).Normal.y,-AL_SpotLight(tLight).Normal.z,1-(0.25*tan(AL_SpotLight(tLight).FOV/2))
            pElement=Shader_GetParameterElement(pEffect,AL_SpotShadowMap(tShadowMap).pData9,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,0,0,1,1
            if tShadowMap=4 or tShadowMap=8 or tShadowMap=12 then Shader_SetVectorVal pEffect,pElement,0,0,0.5,0.5
            if tShadowMap=5 or tShadowMap=9 or tShadowMap=13 then Shader_SetVectorVal pEffect,pElement,0.5,0,0.5,0.5
            if tShadowMap=6 or tShadowMap=10 or tShadowMap=14 then Shader_SetVectorVal pEffect,pElement,0,0.5,0.5,0.5
            if tShadowMap=7 or tShadowMap=11 or tShadowMap=15 then Shader_SetVectorVal pEffect,pElement,0.5,0.5,0.5,0.5
         else
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData0+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix5.x,AL_SpotLight(tLight).Matrix5.y,AL_SpotLight(tLight).Matrix5.z,(tan(AL_SpotLight(tLight).FOV/2)*(AL_SpotLight(tLight).Range*2))/100
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData1+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix6.x,AL_SpotLight(tLight).Matrix6.y,AL_SpotLight(tLight).Matrix6.z,AL_SpotLight(tLight).Range/100
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData2+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix7.x,AL_SpotLight(tLight).Matrix7.y,AL_SpotLight(tLight).Matrix7.z,0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData3+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix1.x,AL_SpotLight(tLight).Matrix1.y,AL_SpotLight(tLight).Matrix1.z,AL_SpotLight(tLight).Matrix1.w
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData4+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix2.y,AL_SpotLight(tLight).Matrix2.z,AL_SpotLight(tLight).Matrix2.w,AL_SpotLight(tLight).Matrix4.x
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData5+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Matrix3.x,AL_SpotLight(tLight).Matrix3.y,AL_SpotLight(tLight).Matrix3.z,AL_SpotLight(tLight).Matrix3.w
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData6+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData7+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,(AL_SpotLight(tLight).Color.x/255)^2.2,(AL_SpotLight(tLight).Color.y/255)^2.2,(AL_SpotLight(tLight).Color.z/255)^2.2,AL_SpotLight(tLight).Intensity*(1+(AL_SpotLight(tLight).Range/500))
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(tBatch).pData8+(AL_SpotLightBatch(tBatch).ActiveObject*4)),AL_SpotLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,-AL_SpotLight(tLight).Normal.x,-AL_SpotLight(tLight).Normal.y,-AL_SpotLight(tLight).Normal.z,1-(0.25*tan(AL_SpotLight(tLight).FOV/2))
         endif
         inc AL_SpotLightBatch(tBatch).ActiveIndex
         if AL_SpotLightBatch(tBatch).ActiveIndex>24 then AL_SpotLightBatch(tBatch).ActiveIndex=0
      next l
      for b=0 to AL_SpotLightBatchCount
         if AL_SpotLightBatch(b).ActiveCount<AL_SpotLightBatch(b).ActiveOld
            for l=AL_SpotLightBatch(b).ActiveCount+1 to AL_SpotLightBatch(b).ActiveOld
               tActiveObject=floor(l/25)
               tActiveIndex=l-(tActiveObject*25)
               pEffect=PeekDword(AL_SpotLightBatch(b).pEffect+(tActiveObject*4))
               pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(b).pData0+(tActiveObject*4)),tActiveIndex)
               Shader_SetVectorVal pEffect,pElement,0,0,0,0
               pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_SpotLightBatch(b).pData6+(tActiveObject*4)),tActiveIndex)
               Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
            next l
         endif
         AL_SpotLightBatch(b).ActiveOld=AL_SpotLightBatch(b).ActiveCount
      next b
   return

`----------------------------------------------------
`Hide Spot Lights
   _SpotLights_Hide:
      for b=0 to AL_SpotLightDrawCount:exclude object on AL_SpotLightDraw(b):next b
      for b=0 to 15:exclude object on AL_SpotShadowMap(b).Object:next b
   return

`----------------------------------------------------
`Update Spot Lights
   _SpotLights_Update:
      tShadowMap=0
      Vector4Float(0).x=0
      for d=1 to 15
         tLight=AL_SpotShadowMap(d).Light-1
         if tLight>-1
            set vector3 Vector3(1),AL_CameraPos.x-AL_SpotLight(tLight).PositionCenter.x,AL_CameraPos.y-AL_SpotLight(tLight).PositionCenter.y,AL_CameraPos.z-AL_SpotLight(tLight).PositionCenter.z
            AL_SpotLight(tLight).Distance=((length vector3(Vector3(1))-AL_SpotLight(tLight).Range)/100)*(1+(AL_SpotLight(tLight).Range/500))
            if AL_SpotLight(tLight).Distance>Vector4Float(0).x then Vector4Float(0).x=AL_SpotLight(tLight).Distance:tShadowMap=d
            if AL_PBR=1
               if AL_SpotLight(tLight).Distance<8 and AL_ShadowQuality>1
                  if AL_SpotShadowMap(d).effect<>1
                     if AL_SpotShadowMap(d).Textured=0 then set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(2) else set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(4)
                     AL_SpotShadowMap(d).effect=1
                     SpotLight_ShadowPtrs(d)
                  endif
               else
                  if AL_SpotShadowMap(d).effect<>0
                     if AL_SpotShadowMap(d).Textured=0 then set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(1) else set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(3)
                     AL_SpotShadowMap(d).effect=0
                     SpotLight_ShadowPtrs(d)
                  endif
               endif
            endif
         else
            if Vector4Float(0).x<99999999 then Vector4Float(0).x=99999999:tShadowMap=d
         endif
         AL_SpotShadowMap(d).Sorted=0
      next d
      tGetLight=-1
      for l=0 to AL_SpotLightVisibleCount
         tLight=AL_SpotLightVisible(l)-1
         if AL_SpotLight(tLight).Shadows=1 and AL_SpotLight(tLight).ShadowMap=0
            set vector3 Vector3(1),AL_CameraPos.x-AL_SpotLight(tLight).PositionCenter.x,AL_CameraPos.y-AL_SpotLight(tLight).PositionCenter.y,AL_CameraPos.z-AL_SpotLight(tLight).PositionCenter.z
            AL_SpotLight(tLight).Distance=(length vector3(Vector3(1))/100)*(AL_SpotLight(tLight).Range/100)
            if AL_SpotLight(tLight).Distance<Vector4Float(0).x then tGetLight=tLight:Vector4Float(0).x=AL_SpotLight(tLight).Distance
         endif
      next l
      if tGetLight>-1
         if AL_SpotShadowMap(tShadowMap).Light>0 then AL_SpotLight(AL_SpotShadowMap(tShadowMap).Light-1).ShadowMap=0
         AL_SpotLight(tGetLight).ShadowMap=tShadowMap
         AL_SpotShadowMap(tShadowMap).Light=tGetLight+1
         AL_SpotShadowMap(tShadowMap).Update=1
         AL_SpotShadowMap(tShadowMap).UpdateStatic=1
         AL_SpotShadowMap(tShadowMap).Textured=0
         tBatch=AL_SpotLight(tGetLight).Batch
         if AL_SpotLightBatch(tBatch).Texture>0
            texture object AL_SpotShadowMap(tShadowMap).Object,4,AL_SpotLightBatch(tBatch).Texture
            AL_SpotShadowMap(tShadowMap).Textured=1
         endif
         if AL_SpotShadowMap(tShadowMap).Textured=0 then set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(1) else set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(3)
         AL_SpotShadowMap(tShadowMap).effect=0
         SpotLight_ShadowPtrs(tShadowMap)
      endif
      for s=1 to 3
         tShadowMap=-1
         Vector4Float(0).x=9999999
         for d=1 to 3
            tLight=AL_SpotShadowMap(d).Light-1
            if tLight>-1 and AL_SpotShadowMap(d).Sorted=0
               if AL_SpotLight(tLight).Distance<Vector4Float(0).x then Vector4Float(0).x=AL_SpotLight(tLight).Distance:tShadowMap=d
            endif
         next d
         if tShadowMap>-1 then AL_SpotShadowMap(tShadowMap).Sorted=1
      next s
      tShadowMapSwap=0
      for d=4 to 15
         tLight=AL_SpotShadowMap(d).Light-1
         if tLight>-1
            if AL_SpotLight(tLight).Distance<Vector4Float(0).x then Vector4Float(0).x=AL_SpotLight(tLight).Distance:tShadowMapSwap=d
         endif
      next d
      if tShadowMapSwap>0 and tShadowMap>-1
         tLight1=AL_SpotShadowMap(tShadowMap).Light-1
         tLight2=AL_SpotShadowMap(tShadowMapSwap).Light-1
         AL_SpotLight(tLight1).ShadowMap=tShadowMapSwap
         AL_SpotLight(tLight2).ShadowMap=tShadowMap
         AL_SpotShadowMap(tShadowMapSwap).Light=tLight1+1
         AL_SpotShadowMap(tShadowMap).Light=tLight2+1
         AL_SpotShadowMap(tShadowMapSwap).Update=1
         AL_SpotShadowMap(tShadowMap).Update=1
         AL_SpotShadowMap(tShadowMapSwap).UpdateStatic=1
         AL_SpotShadowMap(tShadowMap).UpdateStatic=1
         AL_SpotShadowMap(tShadowMap).Textured=0
         AL_SpotShadowMap(tShadowMapSwap).Textured=0
         tBatch=AL_SpotLight(tLight1).Batch
         if AL_SpotLightBatch(tBatch).Texture>0 then texture object AL_SpotShadowMap(tShadowMapSwap).Object,4,AL_SpotLightBatch(tBatch).Texture:AL_SpotShadowMap(tShadowMapSwap).Textured=1
         tBatch=AL_SpotLight(tLight2).Batch
         if AL_SpotLightBatch(tBatch).Texture>0 then texture object AL_SpotShadowMap(tShadowMap).Object,4,AL_SpotLightBatch(tBatch).Texture:AL_SpotShadowMap(tShadowMap).Textured=1
         if AL_SpotShadowMap(tShadowMapSwap).effect=1
            if AL_SpotShadowMap(tShadowMapSwap).Textured=0 then set object effect AL_SpotShadowMap(tShadowMapSwap).Object,AL_SpotLightEffect(2) else set object effect AL_SpotShadowMap(tShadowMapSwap).Object,AL_SpotLightEffect(4)
         else
            if AL_SpotShadowMap(tShadowMapSwap).Textured=0 then set object effect AL_SpotShadowMap(tShadowMapSwap).Object,AL_SpotLightEffect(1) else set object effect AL_SpotShadowMap(tShadowMapSwap).Object,AL_SpotLightEffect(3)
         endif
         if AL_SpotShadowMap(tShadowMap).effect=1
            if AL_SpotShadowMap(tShadowMap).Textured=0 then set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(2) else set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(4)
         else
            if AL_SpotShadowMap(tShadowMap).Textured=0 then set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(1) else set object effect AL_SpotShadowMap(tShadowMap).Object,AL_SpotLightEffect(3)
         endif
         SpotLight_ShadowPtrs(tShadowMapSwap)
         SpotLight_ShadowPtrs(tShadowMap)
      endif
      tUpdate=1
      tUpdateShadow=0
      repeat
         if AL_SpotShadowUpdate>15 then AL_SpotShadowUpdate=1
         tLight=AL_SpotShadowMap(AL_SpotShadowUpdate).Light-1
         if tLight>-1
            tDifference=0
            if GetSphereInFrustum(0,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,AL_SpotLight(tLight).Range)=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.x<>int(AL_SpotLight(tLight).Position.x/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.y<>int(AL_SpotLight(tLight).Position.y/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.z<>int(AL_SpotLight(tLight).Position.z/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.x<>int(AL_SpotLight(tLight).Angle.x*8) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.y<>int(AL_SpotLight(tLight).Angle.y*8) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.z<>int(AL_SpotLight(tLight).Angle.z*8) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).FOV<>int(AL_SpotLight(tLight).FOV) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Range<>int(AL_SpotLight(tLight).Range/AL_WorldSize) then tDifference=1
               if tDifference=1
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.x=int(AL_SpotLight(tLight).Position.x/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.y=int(AL_SpotLight(tLight).Position.y/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.z=int(AL_SpotLight(tLight).Position.z/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.x=int(AL_SpotLight(tLight).Angle.x*8)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.y=int(AL_SpotLight(tLight).Angle.y*8)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.z=int(AL_SpotLight(tLight).Angle.z*8)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).FOV=int(AL_SpotLight(tLight).FOV)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Range=int(AL_SpotLight(tLight).Range/AL_WorldSize)
                  if AL_SpotShadowMap(AL_SpotShadowUpdate).Update<>1 then AL_SpotShadowMap(AL_SpotShadowUpdate).Update=3
                  inc tUpdateShadow
               endif
            endif
         endif
         inc AL_SpotShadowUpdate
         inc tUpdate
      until tUpdate>15 or tUpdateShadow>2
      for d=1 to 15
         tCamera=d
         if d>3 then tCamera=6
         if d>3 and d<12 then tCamera=5
         if d>3 and d<8 then tCamera=4
         tLight=AL_SpotShadowMap(d).Light-1
         if tLight>-1
            if AL_SpotShadowMap(d).DynamicTimer>0 then dec AL_SpotShadowMap(d).DynamicTimer
            if AL_SpotShadowMap(d).UpdateTimer>0 then dec AL_SpotShadowMap(d).UpdateTimer
            if AL_SpotShadowMap(d).UpdateTimer<1 and AL_SpotShadowMap(d).Update=3 then AL_SpotShadowMap(d).Update=2:AL_SpotShadowMap(d).DynamicTimer=32
            if GetSphereInFrustum(0,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,AL_SpotLight(tLight).Range)=1
               if AL_SpotShadowMap(d).DynamicTimer<1
                  if AL_SpotShadowMap(d).UpdateTimer<1 and AL_SpotShadowMap(d).Update=4 then AL_SpotShadowMap(d).Update=1
               else
                  if AL_SpotShadowMap(d).UpdateTimer<1 and AL_SpotShadowMap(d).Update=4 then AL_SpotShadowMap(d).Update=2
               endif
               VFC_QuadTreeBoxCull.x=AL_SpotLight(tLight).Position.x
               VFC_QuadTreeBoxCull.y=AL_SpotLight(tLight).Position.y
               VFC_QuadTreeBoxCull.z=AL_SpotLight(tLight).Position.z
               VFC_QuadTreeBoxCull.w=AL_SpotLight(tLight).Range
               position camera AL_SpotLightCamera(tCamera),AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z
               rotate camera AL_SpotLightCamera(tCamera),AL_SpotLight(tLight).Angle.x,AL_SpotLight(tLight).Angle.y,AL_SpotLight(tLight).Angle.z
               set camera range AL_SpotLightCamera(tCamera),(AL_SpotLight(tLight).Range*0.001),AL_SpotLight(tLight).Range*1.05
               set camera fov AL_SpotLightCamera(tCamera),AL_SpotLight(tLight).FOV
               set current camera AL_SpotLightCamera(tCamera)
               view matrix4 Matrix(1)
               projection matrix4 Matrix(2)
               multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
               GetViewProjectFrustum(d,-1)
               if d=4 or d=8 or d=12 then set camera view AL_SpotLightCamera(tCamera),0,0,AL_SpotShadowSize/2,AL_SpotShadowSize/2
               if d=5 or d=9 or d=13 then set camera view AL_SpotLightCamera(tCamera),AL_SpotShadowSize/2,0,AL_SpotShadowSize,AL_SpotShadowSize/2
               if d=6 or d=10 or d=14 then set camera view AL_SpotLightCamera(tCamera),0,AL_SpotShadowSize/2,AL_SpotShadowSize/2,AL_SpotShadowSize
               if d=7 or d=11 or d=15 then set camera view AL_SpotLightCamera(tCamera),AL_SpotShadowSize/2,AL_SpotShadowSize/2,AL_SpotShadowSize,AL_SpotShadowSize
               if AL_SpotShadowMap(d).Update=1
                  AL_SpotShadowMap(d).UpdateTimer=AL_SpotLight(tLight).Distance/10
                  if AL_SpotShadowMap(d).UpdateTimer<0 then AL_SpotShadowMap(d).UpdateTimer=0
                  set vector4 Vector4(1),AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,0
                  for e=0 to AL_EffectActiveCount
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowPosition",Vector4(1)
                     set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"ShadowRange",AL_SpotLight(tLight).Range
                  next e
                  exclude object off AL_ShadowFillObject
                  enable object zbias AL_ShadowFillObject,-AL_SpotLight(tLight).Range,AL_SpotLight(tLight).Range
                  if AL_SpotShadowMap(d).UpdateStatic=1
                     AL_SpotShadowMap(d).UpdateStatic=0
                     for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap1":next e
                     set effect technique AL_ShadowFillEffect,"DepthMap1"
                     VFC_ResetQuerylist=0
                     FrustumCulling_Query(d,8)
                     gosub _Objects_Show
                     gosub _Batch_Show
                     tCameraMask=2^AL_SpotLightCamera(tCamera)
                     if AL_BatchDrawCount>-1 then exclude object off AL_BatchObject:tCameraMask=tCameraMask+(2^AL_Camera(6))
                     sync mask tCameraMask
                     fastsync
                     if AL_BatchDrawCount>-1 then exclude object on AL_BatchObject
                     gosub _Objects_Hide
                     gosub _Batch_Hide
                  endif
                  for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap2":next e
                  set effect technique AL_ShadowFillEffect,"DepthMap2"
                  VFC_ResetQuerylist=0
                  FrustumCulling_Query(d,9)
                  gosub _Objects_Show
                  gosub _Batch_Show
                  tCameraMask=2^AL_SpotLightCamera(tCamera)
                  if AL_BatchDrawCount>-1 then exclude object off AL_BatchObject:tCameraMask=tCameraMask+(2^AL_Camera(6))
                  sync mask tCameraMask
                  fastsync
                  exclude object on AL_BatchObject
                  gosub _Objects_Hide
                  gosub _Batch_Hide
                  exclude object on AL_ShadowFillObject
                  AL_SpotShadowMap(d).Update=0
                  AL_SpotShadowMap(d).ShadowMix=0
               endif
               if AL_SpotShadowMap(d).Update=2
                  AL_SpotShadowMap(d).UpdateTimer=AL_SpotLight(tLight).Distance/10
                  if AL_SpotShadowMap(d).UpdateTimer<0 then AL_SpotShadowMap(d).UpdateTimer=0
                  set vector4 Vector4(1),AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,0
                  for e=0 to AL_EffectActiveCount
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowPosition",Vector4(1)
                     set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"ShadowRange",AL_SpotLight(tLight).Range
                     set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap2"
                  next e
                  exclude object off AL_ShadowFillObject
                  set effect technique AL_ShadowFillEffect,"DepthMap2"
                  enable object zbias AL_ShadowFillObject,-AL_SpotLight(tLight).Range,AL_SpotLight(tLight).Range
                  VFC_ResetQuerylist=0
                  FrustumCulling_Query(d,7)
                  gosub _Objects_Show
                  gosub _Batch_Show
                  tCameraMask=2^AL_SpotLightCamera(tCamera)
                  if AL_BatchDrawCount>-1 then exclude object off AL_BatchObject:tCameraMask=tCameraMask+(2^AL_Camera(6))
                  sync mask tCameraMask
                  fastsync
                  exclude object on AL_BatchObject
                  gosub _Objects_Hide
                  gosub _Batch_Hide
                  exclude object on AL_ShadowFillObject
                  AL_SpotShadowMap(d).Update=0
                  AL_SpotShadowMap(d).UpdateStatic=1
                  AL_SpotShadowMap(d).ShadowMix=1
               endif
            endif
         endif
      next d
   return

`----------------------------------------------------
` Spot Light Load Batch
`----------------------------------------------------
function SpotLight_LoadBatch(iBatch as integer)
   array insert at bottom AL_SpotLightDraw()
   tObject=FreeUpObject(32500+rnd(16250))
   PokeInteger(AL_SpotLightBatch(iBatch).pObjectID+(AL_SpotLightBatch(iBatch).Count*4),tObject)
   tEffect=FreeUpEffect(32500+rnd(16250))
   PokeInteger(AL_SpotLightBatch(iBatch).pEffectID+(AL_SpotLightBatch(iBatch).Count*4),tEffect)
   `tObject=loadobject(AL_Directory+"Resources\Spot Batch.dbo","",0,0)
   tObject=makeobjectcube(-1000)
   `load object AL_Directory+"Resources\Spot Batch.dbo",tObject
   if AL_SpotLightBatch(iBatch).Texture=0 then load effect AL_Directory+"Lighting\Spot\"+str$(AL_SpotLightSpecular)+".fx",tEffect,0,1 else load effect AL_Directory+"Lighting\Texture Spot\"+str$(AL_SpotLightSpecular)+".fx",tEffect,0,1
   set object effect tObject,tEffect
   if AL_PBR=1 then set effect technique tEffect,"PBR"
   texture object tObject,0,AL_ImageMRT(1)
   texture object tObject,1,AL_ImageMRT(2)
   texture object tObject,2,AL_ImageMRT(3)
   texture object tObject,3,AL_ImageMRT(4)
   if AL_SpotLightBatch(iBatch).Texture>0 then texture object tObject,4,AL_SpotLightBatch(iBatch).Texture
   set object mask tObject,2^AL_Camera(0)
   set object radius tObject,9999^9999
   disable object zwrite tObject
   exclude object on tObject
   set effect constant vector tEffect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
   pEffect=Object_GetShaderPtr(tObject,0):PokeDword(AL_SpotLightBatch(iBatch).pEffect+(AL_SpotLightBatch(iBatch).Count*4),pEffect)
   pData=Shader_GetParameterByName(pEffect,0,"Data0"):PokeDword(AL_SpotLightBatch(iBatch).pData0+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data1"):PokeDword(AL_SpotLightBatch(iBatch).pData1+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data2"):PokeDword(AL_SpotLightBatch(iBatch).pData2+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data3"):PokeDword(AL_SpotLightBatch(iBatch).pData3+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data4"):PokeDword(AL_SpotLightBatch(iBatch).pData4+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data5"):PokeDword(AL_SpotLightBatch(iBatch).pData5+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data6"):PokeDword(AL_SpotLightBatch(iBatch).pData6+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data7"):PokeDword(AL_SpotLightBatch(iBatch).pData7+(AL_SpotLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data8"):PokeDword(AL_SpotLightBatch(iBatch).pData8+(AL_SpotLightBatch(iBatch).Count*4),pData)
   inc AL_SpotLightBatch(iBatch).Count
endfunction

`----------------------------------------------------
` Update Spot Light
`----------------------------------------------------
function SpotLight_Update(iLight as integer)
   rotate x matrix4 Matrix(1),AL_SpotLight(iLight).Angle.x*0.01745329251
   rotate y matrix4 Matrix(2),AL_SpotLight(iLight).Angle.y*0.01745329251
   rotate z matrix4 Matrix(3),AL_SpotLight(iLight).Angle.z*0.01745329251
   multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
   multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
   AL_SpotLight(iLight).Matrix5.x=get matrix4 element(Matrix(4),0):AL_SpotLight(iLight).Matrix5.y=get matrix4 element(Matrix(4),1):AL_SpotLight(iLight).Matrix5.z=get matrix4 element(Matrix(4),2)
   AL_SpotLight(iLight).Matrix6.x=get matrix4 element(Matrix(4),4):AL_SpotLight(iLight).Matrix6.y=get matrix4 element(Matrix(4),5):AL_SpotLight(iLight).Matrix6.z=get matrix4 element(Matrix(4),6)
   AL_SpotLight(iLight).Matrix7.x=get matrix4 element(Matrix(4),8):AL_SpotLight(iLight).Matrix7.y=get matrix4 element(Matrix(4),9):AL_SpotLight(iLight).Matrix7.z=get matrix4 element(Matrix(4),10)
   set vector3 Vector3(1),0,0,1
   transform normals vector3 Vector3(1),Vector3(1),Matrix(4)
   AL_SpotLight(iLight).Normal.x=x vector3(Vector3(1))
   AL_SpotLight(iLight).Normal.y=y vector3(Vector3(1))
   AL_SpotLight(iLight).Normal.z=z vector3(Vector3(1))
   AL_SpotLight(iLight).PositionCenter.x=AL_SpotLight(iLight).Position.x+(AL_SpotLight(iLight).Normal.x*(AL_SpotLight(iLight).Range/2))
   AL_SpotLight(iLight).PositionCenter.y=AL_SpotLight(iLight).Position.y+(AL_SpotLight(iLight).Normal.y*(AL_SpotLight(iLight).Range/2))
   AL_SpotLight(iLight).PositionCenter.z=AL_SpotLight(iLight).Position.z+(AL_SpotLight(iLight).Normal.z*(AL_SpotLight(iLight).Range/2))
   FrustumCulling_SetBounds(AL_SpotLight(iLight).Bounds,AL_SpotLight(iLight).PositionCenter.x,AL_SpotLight(iLight).PositionCenter.y,AL_SpotLight(iLight).PositionCenter.z,AL_SpotLight(iLight).Range,AL_SpotLight(iLight).Range,AL_SpotLight(iLight).Range)
   set current camera AL_SpotLightCamera(1)
   position camera AL_SpotLightCamera(1),0,0,0
   rotate camera AL_SpotLightCamera(1),AL_SpotLight(iLight).Angle.x,AL_SpotLight(iLight).Angle.y,AL_SpotLight(iLight).Angle.z
   set camera range AL_SpotLightCamera(1),AL_SpotLight(iLight).Range*0.001,AL_SpotLight(iLight).Range
   set camera fov AL_SpotLightCamera(1),AL_SpotLight(iLight).FOV
   view matrix4 Matrix(1)
   projection matrix4 Matrix(2)
   multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
   set current camera AL_CurrentCamera
   AL_SpotLight(iLight).Matrix1.x=get matrix4 element(Matrix(3),0):AL_SpotLight(iLight).Matrix1.y=get matrix4 element(Matrix(3),1):AL_SpotLight(iLight).Matrix1.z=get matrix4 element(Matrix(3),2):AL_SpotLight(iLight).Matrix1.w=get matrix4 element(Matrix(3),3)
   AL_SpotLight(iLight).Matrix2.x=get matrix4 element(Matrix(3),4):AL_SpotLight(iLight).Matrix2.y=get matrix4 element(Matrix(3),5):AL_SpotLight(iLight).Matrix2.z=get matrix4 element(Matrix(3),6):AL_SpotLight(iLight).Matrix2.w=get matrix4 element(Matrix(3),7)
   AL_SpotLight(iLight).Matrix3.x=get matrix4 element(Matrix(3),8):AL_SpotLight(iLight).Matrix3.y=get matrix4 element(Matrix(3),9):AL_SpotLight(iLight).Matrix3.z=get matrix4 element(Matrix(3),10):AL_SpotLight(iLight).Matrix3.w=get matrix4 element(Matrix(3),11)
   AL_SpotLight(iLight).Matrix4.x=get matrix4 element(Matrix(3),14)
endfunction

`----------------------------------------------------
`  Spot Light Shadow Pointers
`----------------------------------------------------
function SpotLight_ShadowPtrs(iShadowMap as integer)
   if AL_SpotLightEffect(1)=0
      AL_SpotLightEffect(1)=FreeUpEffect(32500+rnd(16250))
      load effect AL_Directory+"Lighting\Spot\Shadow1\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(1),0,1
      AL_SpotLightEffect(2)=FreeUpEffect(32500+rnd(16250))
      if AL_ShadowQuality=4 then load effect AL_Directory+"Lighting\Spot\Shadow3\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(2),0,1 else load effect AL_Directory+"Lighting\Spot\Shadow2\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(2),0,1
      AL_SpotLightEffect(3)=FreeUpEffect(32500+rnd(16250))
      load effect AL_Directory+"Lighting\Texture Spot\Shadow1\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(3),0,1
      AL_SpotLightEffect(4)=FreeUpEffect(32500+rnd(16250))
      if AL_ShadowQuality=4 then load effect AL_Directory+"Lighting\Texture Spot\Shadow3\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(4),0,1 else load effect AL_Directory+"Lighting\Texture Spot\Shadow2\"+str$(AL_SpotLightSpecular)+".fx",AL_SpotLightEffect(4),0,1
      for t=1 to 4
         set effect constant vector AL_SpotLightEffect(t),"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
         if AL_PBR=1 then set effect technique AL_SpotLightEffect(t),"PBR"
      next t
      for d=1 to 15
         if AL_SpotShadowMap(d).Textured=0 then set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(1) else set object effect AL_SpotShadowMap(d).Object,AL_SpotLightEffect(3)
      next d
   endif
   AL_SpotShadowMap(iShadowMap).pEffect=Object_GetShaderPtr(AL_SpotShadowMap(iShadowMap).Object,0)
   AL_SpotShadowMap(iShadowMap).pData0=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data0")
   AL_SpotShadowMap(iShadowMap).pData1=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data1")
   AL_SpotShadowMap(iShadowMap).pData2=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data2")
   AL_SpotShadowMap(iShadowMap).pData3=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data3")
   AL_SpotShadowMap(iShadowMap).pData4=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data4")
   AL_SpotShadowMap(iShadowMap).pData5=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data5")
   AL_SpotShadowMap(iShadowMap).pData6=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data6")
   AL_SpotShadowMap(iShadowMap).pData7=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data7")
   AL_SpotShadowMap(iShadowMap).pData8=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data8")
   AL_SpotShadowMap(iShadowMap).pData9=Shader_GetParameterByName(AL_SpotShadowMap(iShadowMap).pEffect,0,"Data9")
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_PointLightData
   InUse as boolean
   Batch as integer
   BatchIndex as integer
   Visible as integer
   Bounds as integer
   Distance as float
   Position as Vec3Float
   Angle as Vec3Float
   Color as Vec3Float
   Intensity as float
   Range as float
   Shadows as boolean
   ShadowMap as integer
   ShadowCull as integer
   ReflectionCapture as boolean
   Matrix1 as Vec3Float
   Matrix2 as Vec3Float
   Matrix3 as Vec3Float
endtype

type AL_PointLightBatchData
   Texture as integer
   FreeUp as integer
   Count as integer
   ActiveCount as integer
   ActiveObject as integer
   ActiveIndex as integer
   ActiveOld as integer
   pIndex as dword
   pObjectID as dword
   pEffectID as dword
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
endtype

type AL_PointShadowMapData
   Light as integer
   Object as integer
   Overlap as integer
   UpdateStatic as integer
   UpdateTimer as integer
   DynamicTimer as integer
   ShadowMix as integer
   Position as Vec3Integer
   Range as integer
   Textured as boolean
   Effect as integer
   Sorted as boolean
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
   pData5 as dword
endtype

`----------------------------------------------------
` Create Point Light
`----------------------------------------------------
function PointLight_Create(iTexture as integer)
   tBatch=-1
   for b=0 to AL_PointLightBatchCount
      if AL_PointLightBatch(b).Texture=iTexture or AL_PointLightBatch(b).Texture=-1
         if AL_PointLightBatch(b).FreeUp<2500
            for l=AL_PointLightBatch(b).FreeUp to 2499
               if PeekInteger(AL_PointLightBatch(b).pIndex+(l*4))=0 then tBatch=b:tBatchIndex=l:exit
            next l
         endif
      endif
   next b
   if tBatch=-1
      array insert at bottom AL_PointLightBatch()
      inc AL_PointLightBatchCount
      AL_PointLightBatch(AL_PointLightBatchCount).Texture=iTexture
      AL_PointLightBatch(AL_PointLightBatchCount).Count=0
      AL_PointLightBatch(AL_PointLightBatchCount).pIndex=make memory(10000)
      AL_PointLightBatch(AL_PointLightBatchCount).pObjectID=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pEffectID=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pEffect=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pData0=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pData1=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pData2=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pData3=make memory(400)
      AL_PointLightBatch(AL_PointLightBatchCount).pData4=make memory(400)
      fill memory AL_PointLightBatch(AL_PointLightBatchCount).pIndex,0,10000
      PointLight_LoadBatch(AL_PointLightBatchCount)
      tBatch=AL_PointLightBatchCount
      tBatchIndex=0
   endif
   AL_PointLightBatch(tBatch).FreeUp=tBatchIndex
   tLight=-1
   for l=AL_PointLightFreeUp to AL_PointLightCount
      if AL_PointLight(l).InUse=0 then tLight=l:exit
   next l
   if tLight=-1
      tLight=AL_PointLightCount+1
      AL_PointLightCount=AL_PointLightCount+1000
      dim AL_PointLight(AL_PointLightCount)
   endif
   AL_PointLightFreeUp=tLight
   AL_PointLight(tLight).InUse=1
   AL_PointLight(tLight).Batch=tBatch
   AL_PointLight(tLight).BatchIndex=tBatchIndex
   AL_PointLight(tLight).ReflectionCapture=1
   AL_PointLight(tLight).Shadows=0
   tObject=PeekInteger(AL_PointLightBatch(Batch).pObjectID)
   AL_PointLight(tLight).Bounds=FrustumCulling_AddBounds(tLight,3)
   FrustumCulling_SetDrawDistance(AL_PointLight(tLight).Bounds,32)
   PokeInteger(AL_PointLightBatch(tBatch).pIndex+(tBatchIndex*4),tLight+1)
   PointLight_SetVisible(tLight,1)
   PointLight_SetIntensity(tLight,2)
endfunction tLight

`----------------------------------------------------
` Delete Point Light
`----------------------------------------------------
function PointLight_Delete(iLight as integer)
   if AL_PointLight(iLight).InUse=1
      PointLight_SetVisible(iLight,0)
      PointLight_SetShadow(iLight,0)
      FrustumCulling_RemoveBounds(AL_PointLight(iLight).Bounds)
      tBatch=AL_PointLight(iLight).Batch
      PokeInteger(AL_PointLightBatch(tBatch).pIndex+(AL_PointLight(iLight).BatchIndex*4),0)
      if AL_PointLightBatch(tBatch).FreeUp<AL_PointLight(iLight).BatchIndex then AL_PointLightBatch(tBatch).FreeUp=AL_PointLight(iLight).BatchIndex
      AL_PointLight(iLight).InUse=0
      if AL_PointLightFreeUp<iLight then AL_PointLightFreeUp=iLight
   endif
endfunction

`----------------------------------------------------
` Point Light Visible
`----------------------------------------------------
function PointLight_SetVisible(iLight as integer,iVisible as boolean)
   if AL_PointLight(iLight).InUse=1
      if iVisible=1 and AL_PointLight(iLight).Visible<>1
         if AL_PointLight(iLight).Visible=0
            array insert at bottom AL_PointLightVisible()
            inc AL_PointLightVisibleCount
            AL_PointLightVisible(AL_PointLightVisibleCount)=iLight+1
         endif
         AL_PointLight(iLight).Visible=1
         FrustumCulling_SetBoundsVisible(AL_PointLight(iLight).Bounds,1)
      endif
      if iVisible=0 and AL_PointLight(iLight).Visible=1
         AL_PointLight(iLight).Visible=2
         AL_PointLightVisibleRemove=1
         FrustumCulling_SetBoundsVisible(AL_PointLight(iLight).Bounds,0)
         if AL_PointLight(iLight).ShadowMap>0
            AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).Light=0
            AL_PointLight(iLight).ShadowMap=0
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Point Light Draw Distance
`----------------------------------------------------
function PointLight_SetDrawDistance(iLight as integer,iDrawDistance as float)
   if AL_PointLight(iLight).InUse=1 then FrustumCulling_SetDrawDistance(AL_PointLight(iLight).Bounds,iDrawDistance)
endfunction

`----------------------------------------------------
` Point Light Shadows
`----------------------------------------------------
function PointLight_SetShadow(iLight as integer,iShadows as boolean)
   if AL_PointLight(iLight).InUse=1 and AL_PointLight(iLight).Shadows<>iShadows
      AL_PointLight(iLight).Shadows=iShadows
      if AL_PointLight(iLight).ShadowMap>0
         AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).Light=0
         AL_PointLight(iLight).ShadowMap=0
      endif
   endif
endfunction

`----------------------------------------------------
` Point Light Position
`----------------------------------------------------
function PointLight_SetPosition(iLight as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_PointLight(iLight).InUse=1
      AL_PointLight(iLight).Position.x=iPosX
      AL_PointLight(iLight).Position.y=iPosY
      AL_PointLight(iLight).Position.z=iPosZ
      PointLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Point Light Angle
`----------------------------------------------------
function PointLight_SetAngle(iLight as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_PointLight(iLight).InUse=1
      AL_PointLight(iLight).Angle.x=wrapvalue(iAngleX)
      AL_PointLight(iLight).Angle.y=wrapvalue(iAngleY)
      AL_PointLight(iLight).Angle.z=wrapvalue(iAngleZ)
      PointLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Point Light Color
`----------------------------------------------------
function PointLight_SetColor(iLight as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_PointLight(iLight).InUse=1
      AL_PointLight(iLight).Color.x=iRed
      AL_PointLight(iLight).Color.y=iGreen
      AL_PointLight(iLight).Color.z=iBlue
   endif
endfunction

`----------------------------------------------------
` Point Light Intensity
`----------------------------------------------------
function PointLight_SetIntensity(iLight as integer,iIntensity as float)
   if AL_PointLight(iLight).InUse=1
      AL_PointLight(iLight).Intensity=iIntensity
   endif
endfunction

`----------------------------------------------------
` Point Light Range
`----------------------------------------------------
function PointLight_SetRange(iLight as integer,iRange as float)
   if AL_PointLight(iLight).InUse=1
      AL_PointLight(iLight).Range=iRange
      PointLight_Update(iLight)
   endif
endfunction

`----------------------------------------------------
` Point Light Reflection Capture
`----------------------------------------------------
function PointLight_SetReflectionCapture(iLight as integer,iReflectionCapture as boolean)
   if AL_PointLight(iLight).InUse=1 then AL_PointLight(iLight).ReflectionCapture=iReflectionCapture
endfunction

`----------------------------------------------------
`Show Point Lights
   _PointLights_Show:
      for b=0 to AL_PointLightBatchCount
         AL_PointLightBatch(b).ActiveCount=-1
         AL_PointLightBatch(b).ActiveObject=-1
         AL_PointLightBatch(b).ActiveIndex=0
      next b
      AL_PointLightDrawCount=-1
      for a=0 to VFC_VisibleCount(3)
         tLight=VFC_Bounds(VFC_Visible(a,3)).Handel
         tBatch=AL_PointLight(tLight).Batch
         inc AL_PointLightBatch(tBatch).ActiveCount
         if AL_PointLightBatch(tBatch).ActiveIndex=0
            inc AL_PointLightBatch(tBatch).ActiveObject
            if AL_PointLightBatch(tBatch).ActiveObject>AL_PointLightBatch(tBatch).Count-1 then PointLight_LoadBatch(tBatch)
            inc AL_PointLightDrawCount
            AL_PointLightDraw(AL_PointLightDrawCount)=PeekInteger(AL_PointLightBatch(tBatch).pObjectID+(AL_PointLightBatch(tBatch).ActiveObject*4))
            exclude object off AL_PointLightDraw(AL_PointLightDrawCount)
         endif
         pEffect=PeekDword(AL_PointLightBatch(tBatch).pEffect+(AL_PointLightBatch(tBatch).ActiveObject*4))
         if AL_PointLight(tLight).ShadowMap>0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData3+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
            tShadowMap=AL_PointLight(tLight).ShadowMap
            exclude object off AL_PointShadowMap(tShadowMap).Object
            pEffect=AL_PointShadowMap(tShadowMap).pEffect
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData0,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix1.x,AL_PointLight(tLight).Matrix1.y,AL_PointLight(tLight).Matrix1.z,AL_PointLight(tLight).Range/100
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData1,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix2.x,AL_PointLight(tLight).Matrix2.y,AL_PointLight(tLight).Matrix2.z,0
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData2,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix3.x,AL_PointLight(tLight).Matrix3.y,AL_PointLight(tLight).Matrix3.z,0
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData3,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData4,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,(AL_PointLight(tLight).Color.x/255)^2.2,(AL_PointLight(tLight).Color.y/255)^2.2,(AL_PointLight(tLight).Color.z/255)^2.2,AL_PointLight(tLight).Intensity*(1+(AL_PointLight(tLight).Range/500))
            pElement=Shader_GetParameterElement(pEffect,AL_PointShadowMap(tShadowMap).pData5,tShadowMap-1)
            Shader_SetVectorVal pEffect,pElement,AL_PointShadowMap(tShadowMap).ShadowMix,0,0,0
         else
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData0+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix1.x,AL_PointLight(tLight).Matrix1.y,AL_PointLight(tLight).Matrix1.z,AL_PointLight(tLight).Range/100
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData1+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix2.x,AL_PointLight(tLight).Matrix2.y,AL_PointLight(tLight).Matrix2.z,0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData2+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Matrix3.x,AL_PointLight(tLight).Matrix3.y,AL_PointLight(tLight).Matrix3.z,0
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData3+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range
            pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(tBatch).pData4+(AL_PointLightBatch(tBatch).ActiveObject*4)),AL_PointLightBatch(tBatch).ActiveIndex)
            Shader_SetVectorVal pEffect,pElement,(AL_PointLight(tLight).Color.x/255)^2.2,(AL_PointLight(tLight).Color.y/255)^2.2,(AL_PointLight(tLight).Color.z/255)^2.2,AL_PointLight(tLight).Intensity*(1+(AL_PointLight(tLight).Range/500))
         endif
         inc AL_PointLightBatch(tBatch).ActiveIndex
         if AL_PointLightBatch(tBatch).ActiveIndex>24 then AL_PointLightBatch(tBatch).ActiveIndex=0
      next l
      for b=0 to AL_PointLightBatchCount
         if AL_PointLightBatch(b).ActiveCount<AL_PointLightBatch(b).ActiveOld
            for l=AL_PointLightBatch(b).ActiveCount+1 to AL_PointLightBatch(b).ActiveOld
               tActiveObject=floor(l/25)
               tActiveIndex=l-(tActiveObject*25)
               pEffect=PeekDword(AL_PointLightBatch(b).pEffect+(tActiveObject*4))
               pElement=Shader_GetParameterElement(pEffect,PeekDword(AL_PointLightBatch(b).pData3+(tActiveObject*4)),tActiveIndex)
               Shader_SetVectorVal pEffect,pElement,-999999,-999999,-999999,0
            next l
         endif
         AL_PointLightBatch(b).ActiveOld=AL_PointLightBatch(b).ActiveCount
      next b
   return

`----------------------------------------------------
`Hide Point Lights
   _PointLights_Hide:
      for b=0 to AL_PointLightDrawCount:exclude object on AL_PointLightDraw(b):next b
      for b=0 to 15:exclude object on AL_PointShadowMap(b).Object:next b
   return

`----------------------------------------------------
`Update Point Lights
   _PointLights_Update:
      tShadowMap=0
      Vector4Float(0).x=0
      for d=1 to 15
         tLight=AL_PointShadowMap(d).Light-1
         if tLight>-1
            set vector3 Vector3(1),AL_CameraPos.x-AL_PointLight(tLight).Position.x,AL_CameraPos.y-AL_PointLight(tLight).Position.y,AL_CameraPos.z-AL_PointLight(tLight).Position.z
            AL_PointLight(tLight).Distance=((length vector3(Vector3(1))-AL_PointLight(tLight).Range)/100)*(1+(AL_PointLight(tLight).Range/500))
            if AL_PointLight(tLight).Distance>Vector4Float(0).x then Vector4Float(0).x=AL_PointLight(tLight).Distance:tShadowMap=d
            if AL_PBR=1
               if AL_PointLight(tLight).Distance<8 and AL_ShadowQuality>1
                  if AL_PointShadowMap(d).effect<>1
                     if AL_PointShadowMap(d).Textured=0 then set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(2) else set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(4)
                     AL_PointShadowMap(d).effect=1
                     PointLight_ShadowPtrs(d)
                  endif
               else
                  if AL_PointShadowMap(d).effect<>0
                     if AL_PointShadowMap(d).Textured=0 then set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(1) else set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(3)
                     AL_PointShadowMap(d).effect=0
                     PointLight_ShadowPtrs(d)
                  endif
               endif
            endif
         else
            if Vector4Float(0).x<99999999 then Vector4Float(0).x=99999999:tShadowMap=d
         endif
         AL_PointShadowMap(d).Sorted=0
      next d
      tGetLight=-1
      for l=0 to AL_PointLightVisibleCount
         tLight=AL_PointLightVisible(l)-1
         if AL_PointLight(tLight).Shadows=1 and AL_PointLight(tLight).ShadowMap=0
            set vector3 Vector3(1),AL_CameraPos.x-AL_PointLight(tLight).Position.x,AL_CameraPos.y-AL_PointLight(tLight).Position.y,AL_CameraPos.z-AL_PointLight(tLight).Position.z
            AL_PointLight(tLight).Distance=(length vector3(Vector3(1))/100)*(AL_PointLight(tLight).Range/100)
            if AL_PointLight(tLight).Distance<Vector4Float(0).x then tGetLight=tLight:Vector4Float(0).x=AL_PointLight(tLight).Distance
         endif
      next l
      if tGetLight>-1
         if AL_PointShadowMap(tShadowMap).Light>0 then AL_PointLight(AL_PointShadowMap(tShadowMap).Light-1).ShadowMap=0
         AL_PointLight(tGetLight).ShadowMap=tShadowMap
         AL_PointShadowMap(tShadowMap).Light=tGetLight+1
         AL_PointShadowMap(tShadowMap).UpdateStatic=1
         AL_PointShadowMap(tShadowMap).Textured=0
         tShadowMapSide=tShadowMap*6
         for s=0 to 5:AL_PointFaceUpdate(tShadowMapSide+s)=1:next s
         tBatch=AL_PointLight(tGetLight).Batch
         if AL_PointLightBatch(tBatch).Texture>0
            texture object AL_PointShadowMap(tShadowMap).Object,4,AL_PointLightBatch(tBatch).Texture
            AL_PointShadowMap(tShadowMap).Textured=1
         endif
         if  AL_PointShadowMap(tShadowMap).Textured=0 then set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(1) else set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(3)
         AL_PointShadowMap(tShadowMap).effect=0
         PointLight_ShadowPtrs(tShadowMap)
      endif
      for s=1 to 3
         tShadowMap=-1
         Vector4Float(0).x=9999999
         for d=1 to 3
            tLight=AL_PointShadowMap(d).Light-1
            if tLight>-1 and AL_PointShadowMap(d).Sorted=0
               if AL_PointLight(tLight).Distance<Vector4Float(0).x then Vector4Float(0).x=AL_PointLight(tLight).Distance:tShadowMap=d
            endif
         next d
         if tShadowMap>-1 then AL_PointShadowMap(tShadowMap).Sorted=1
      next s
      tShadowMapSwap=0
      for d=4 to 15
         tLight=AL_PointShadowMap(d).Light-1
         if tLight>-1
            if AL_PointLight(tLight).Distance<Vector4Float(0).x then Vector4Float(0).x=AL_PointLight(tLight).Distance:tShadowMapSwap=d
         endif
      next d
      if tShadowMapSwap>0 and tShadowMap>-1
         tLight1=AL_PointShadowMap(tShadowMap).Light-1
         tLight2=AL_PointShadowMap(tShadowMapSwap).Light-1
         AL_PointLight(tLight1).ShadowMap=tShadowMapSwap
         AL_PointLight(tLight2).ShadowMap=tShadowMap
         AL_PointShadowMap(tShadowMapSwap).Light=tLight1+1
         AL_PointShadowMap(tShadowMap).Light=tLight2+1
         AL_PointShadowMap(tShadowMapSwap).UpdateStatic=1
         AL_PointShadowMap(tShadowMap).UpdateStatic=1
         tShadowMapSide=tShadowMapSwap*6
         for s=0 to 5:AL_PointFaceUpdate(tShadowMapSide+s)=1:next s
         tShadowMapSide=tShadowMap*6
         for s=0 to 5:AL_PointFaceUpdate(tShadowMapSide+s)=1:next s
         AL_PointShadowMap(tShadowMap).Textured=0
         AL_PointShadowMap(tShadowMapSwap).Textured=0
         tBatch=AL_PointLight(tLight1).Batch
         if AL_PointLightBatch(tBatch).Texture>0 then texture object AL_PointShadowMap(tShadowMapSwap).Object,4,AL_PointLightBatch(tBatch).Texture:AL_PointShadowMap(tShadowMapSwap).Textured=1
         tBatch=AL_PointLight(tLight2).Batch
         if AL_PointLightBatch(tBatch).Texture>0 then texture object AL_PointShadowMap(tShadowMap).Object,4,AL_PointLightBatch(tBatch).Texture:AL_PointShadowMap(tShadowMap).Textured=1
         if AL_PointShadowMap(tShadowMapSwap).effect=1
            if AL_PointShadowMap(tShadowMapSwap).Textured=0 then set object effect AL_PointShadowMap(tShadowMapSwap).Object,AL_PointLightEffect(2) else set object effect AL_PointShadowMap(tShadowMapSwap).Object,AL_PointLightEffect(4)
         else
            if AL_PointShadowMap(tShadowMapSwap).Textured=0 then set object effect AL_PointShadowMap(tShadowMapSwap).Object,AL_PointLightEffect(1) else set object effect AL_PointShadowMap(tShadowMapSwap).Object,AL_PointLightEffect(3)
         endif
         if AL_PointShadowMap(tShadowMap).effect=1
            if AL_PointShadowMap(tShadowMap).Textured=0 then set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(2) else set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(4)
         else
            if AL_PointShadowMap(tShadowMap).Textured=0 then set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(1) else set object effect AL_PointShadowMap(tShadowMap).Object,AL_PointLightEffect(3)
         endif
         PointLight_ShadowPtrs(tShadowMapSwap)
         PointLight_ShadowPtrs(tShadowMap)
      endif
      tUpdate=1
      tUpdateShadow=0
      repeat
         if AL_PointShadowUpdate>15 then AL_PointShadowUpdate=1
         tLight=AL_PointShadowMap(AL_PointShadowUpdate).Light-1
         if tLight>-1
            tDifference=0
            if GetSphereInFrustum(0,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.x<>int(AL_PointLight(tLight).Position.x/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.y<>int(AL_PointLight(tLight).Position.y/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.z<>int(AL_PointLight(tLight).Position.z/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Range<>int(AL_PointLight(tLight).Range/AL_WorldSize) then tDifference=1
               if tDifference=1
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.x=int(AL_PointLight(tLight).Position.x/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.y=int(AL_PointLight(tLight).Position.y/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.z=int(AL_PointLight(tLight).Position.z/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Range=int(AL_PointLight(tLight).Range/AL_WorldSize)
                  tShadowMapSide=AL_PointShadowUpdate*6
                  for s=0 to 5
                     if AL_PointFaceUpdate(tShadowMapSide+s)<>1 then AL_PointFaceUpdate(tShadowMapSide+s)=3
                  next s
                  inc tUpdateShadow
               endif
            endif
         endif
         inc AL_PointShadowUpdate
         inc tUpdate
      until tUpdate>15 or tUpdateShadow>2
      local tFov as float
      for d=1 to 15
         tLight=AL_PointShadowMap(d).Light-1
         if tLight>-1
            tShadowMapSide=d*6
            if AL_PointShadowMap(d).DynamicTimer>0 then dec AL_PointShadowMap(d).DynamicTimer
            if AL_PointShadowMap(d).UpdateTimer>0 then dec AL_PointShadowMap(d).UpdateTimer
            for s=0 to 5
               if AL_PointShadowMap(d).UpdateTimer<1 and AL_PointFaceUpdate(tShadowMapSide+s)=3 then AL_PointFaceUpdate(tShadowMapSide+s)=2:AL_PointShadowMap(d).DynamicTimer=32
            next s
            if GetSphereInFrustum(0,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
               if AL_PointShadowMap(d).DynamicTimer<1
                  for s=0 to 5
                     if AL_PointShadowMap(d).UpdateTimer<1 and AL_PointFaceUpdate(tShadowMapSide+s)=4 then AL_PointFaceUpdate(tShadowMapSide+s)=1
                  next s
               else
                  for s=0 to 5
                     if AL_PointShadowMap(d).UpdateTimer<1 and AL_PointFaceUpdate(tShadowMapSide+s)=4 then AL_PointFaceUpdate(tShadowMapSide+s)=2
                  next s
               endif
               VFC_QuadTreeBoxCull.x=AL_PointLight(tLight).Position.x
               VFC_QuadTreeBoxCull.y=AL_PointLight(tLight).Position.y
               VFC_QuadTreeBoxCull.z=AL_PointLight(tLight).Position.z
               VFC_QuadTreeBoxCull.w=AL_PointLight(tLight).Range
               CubeTex_SetPosition AL_PointLightCubeMap(d),AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z
               CubeTex_Setrange AL_PointLightCubeMap(d),AL_PointLight(tLight).Range*0.001,AL_PointLight(tLight).Range*1.05
               set current camera AL_SpotLightCamera(1)
               position camera AL_SpotLightCamera(1),AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z
               set camera range AL_SpotLightCamera(1),AL_PointLight(tLight).Range*0.001,AL_PointLight(tLight).Range
               set camera fov AL_SpotLightCamera(1),90
               if AL_PointFaceUpdate(tShadowMapSide)=1 or AL_PointFaceUpdate(tShadowMapSide+1)=1 or AL_PointFaceUpdate(tShadowMapSide+2)=1 or AL_PointFaceUpdate(tShadowMapSide+3)=1 or AL_PointFaceUpdate(tShadowMapSide+4)=1 or AL_PointFaceUpdate(tShadowMapSide+5)=1
                  AL_PointShadowMap(d).UpdateTimer=AL_PointLight(tLight).Distance/10
                  if AL_PointShadowMap(d).UpdateTimer<0 then AL_PointShadowMap(d).UpdateTimer=0
                  set vector4 Vector4(1),AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,0
                  set vector4 Vector4(2),AL_PointLight(tLight).Range,1,0,0
                  for e=0 to AL_EffectActiveCount
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowPosition",Vector4(1)
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowRange",Vector4(2)
                  next e
                  exclude object off AL_ShadowFillObject
                  enable object zbias AL_ShadowFillObject,-AL_PointLight(tLight).Range,AL_PointLight(tLight).Range
                  if AL_PointShadowMap(d).ShadowMix=1
                     AL_PointShadowMap(d).UpdateStatic=1
                     for s=0 to 5:AL_PointFaceUpdate(tShadowMapSide+s)=1:next s
                  endif
                  if AL_PointShadowMap(d).UpdateStatic=1
                     AL_PointShadowMap(d).UpdateStatic=0
                     tMask=0
                     VFC_ResetQuerylist=0
                     for s=0 to 5
                        if AL_PointFaceUpdate(tShadowMapSide+s)=1
                           rotate camera AL_SpotLightCamera(1),AL_PointFaceAngle(s).x,AL_PointFaceAngle(s).y,AL_PointFaceAngle(s).z
                           view matrix4 Matrix(1)
                           projection matrix4 Matrix(2)
                           multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
                           GetViewProjectFrustum(18,-1)
                           FrustumCulling_Query(18,8)
                           tMask=tMask+(2^s)
                        endif
                     next s
                     if tMask>0
                        for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap1":next e
                        set effect technique AL_ShadowFillEffect,"DepthMap1"
                        gosub _Objects_Show
                        gosub _Batch_Show
                        if AL_BatchDrawCount>-1
                           exclude object off AL_BatchObject
                           sync mask 2^AL_Camera(6)
                           fastsync
                           exclude object on AL_BatchObject
                        endif
                        CubeTex_SyncFaces AL_PointLightCubeMap(d),AL_SpotLightCamera(1),tMask
                        gosub _Objects_Hide
                        gosub _Batch_Hide
                     endif
                  endif
                  tMask=0
                  VFC_ResetQuerylist=0
                  for s=0 to 5
                     if AL_PointFaceUpdate(tShadowMapSide+s)=1
                        AL_PointFaceUpdate(tShadowMapSide+s)=0
                        rotate camera AL_SpotLightCamera(1),AL_PointFaceAngle(s).x,AL_PointFaceAngle(s).y,AL_PointFaceAngle(s).z
                        view matrix4 Matrix(1)
                        projection matrix4 Matrix(2)
                        multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
                        GetViewProjectFrustum(18,-1)
                        FrustumCulling_Query(18,9)
                        tMask=tMask+(2^s)
                     endif
                  next s
                  if tMask>0
                     for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap2":next e
                     set effect technique AL_ShadowFillEffect,"DepthMap2"
                     gosub _Objects_Show
                     gosub _Batch_Show
                     if AL_BatchDrawCount>-1
                        exclude object off AL_BatchObject
                        sync mask 2^AL_Camera(6)
                        fastsync
                        exclude object on AL_BatchObject
                     endif
                     CubeTex_SyncFaces AL_PointLightCubeMap(d),AL_SpotLightCamera(1),tMask
                     gosub _Objects_Hide
                     gosub _Batch_Hide
                  endif
                  exclude object on AL_ShadowFillObject
                  AL_PointShadowMap(d).ShadowMix=0
               endif
               if AL_PointFaceUpdate(tShadowMapSide)=2 or AL_PointFaceUpdate(tShadowMapSide+1)=2 or AL_PointFaceUpdate(tShadowMapSide+2)=2 or AL_PointFaceUpdate(tShadowMapSide+3)=2 or AL_PointFaceUpdate(tShadowMapSide+4)=2 or AL_PointFaceUpdate(tShadowMapSide+5)=2
                  AL_PointShadowMap(d).UpdateTimer=AL_PointLight(tLight).Distance/10
                  if AL_PointShadowMap(d).UpdateTimer<0 then AL_PointShadowMap(d).UpdateTimer=0
                  set vector4 Vector4(1),AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,0
                  set vector4 Vector4(2),AL_PointLight(tLight).Range,1,0,0
                  for e=0 to AL_EffectActiveCount
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowPosition",Vector4(1)
                     set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ShadowRange",Vector4(2)
                     set effect technique AL_Effect(AL_EffectActive(e)).Effect,"DepthMap2"
                  next e
                  exclude object off AL_ShadowFillObject
                  enable object zbias AL_ShadowFillObject,-AL_PointLight(tLight).Range,AL_PointLight(tLight).Range
                  set effect technique AL_ShadowFillEffect,"DepthMap2"
                  tMask=0
                  VFC_ResetQuerylist=0
                  for s=0 to 5
                     if AL_PointFaceUpdate(tShadowMapSide+s)=2
                        AL_PointFaceUpdate(tShadowMapSide+s)=0
                        rotate camera AL_SpotLightCamera(1),AL_PointFaceAngle(s).x,AL_PointFaceAngle(s).y,AL_PointFaceAngle(s).z
                        view matrix4 Matrix(1)
                        projection matrix4 Matrix(2)
                        multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
                        GetViewProjectFrustum(18,-1)
                        FrustumCulling_Query(18,7)
                        tMask=tMask+(2^s)
                     endif
                  next s
                  if tMask>0
                     gosub _Objects_Show
                     gosub _Batch_Show
                     if AL_BatchDrawCount>-1
                        exclude object off AL_BatchObject
                        sync mask 2^AL_Camera(6)
                        fastsync
                        exclude object on AL_BatchObject
                     endif
                     CubeTex_SyncFaces AL_PointLightCubeMap(d),AL_SpotLightCamera(1),tMask
                     gosub _Objects_Hide
                     gosub _Batch_Hide
                  endif
                  exclude object on AL_ShadowFillObject
                  AL_PointShadowMap(d).UpdateStatic=1
                  AL_PointShadowMap(d).ShadowMix=1
               endif
            endif
         endif
      next d
   return

`----------------------------------------------------
` Load Point Light Batch Effect+Object
`----------------------------------------------------
function PointLight_LoadBatch(iBatch as integer)
   array insert at bottom AL_PointLightDraw()
   tObject=FreeUpObject(32500+rnd(16250))
   PokeInteger(AL_PointLightBatch(iBatch).pObjectID+(AL_PointLightBatch(iBatch).Count*4),tObject)
   tEffect=FreeUpEffect(32500+rnd(16250))
   PokeInteger(AL_PointLightBatch(iBatch).pEffectID+(AL_PointLightBatch(iBatch).Count*4),tEffect)
   `tObject=loadobject(AL_Directory+"Resources\Point Batch.dbo","",0,0)
   `load object AL_Directory+"Resources\Point Batch.dbo",tObject
   tObject=makeobjectcube(-1000)
   if AL_PointLightBatch(iBatch).Texture=0 then load effect AL_Directory+"Lighting\Point\"+str$(AL_PointLightSpecular)+".fx",tEffect,0,1 else load effect AL_Directory+"Lighting\Texture Point\"+str$(AL_PointLightSpecular)+".fx",tEffect,0,1
   set object effect tObject,tEffect
   if AL_PBR=1 then set effect technique tEffect,"PBR"
   texture object tObject,0,AL_ImageMRT(1)
   texture object tObject,1,AL_ImageMRT(2)
   texture object tObject,2,AL_ImageMRT(3)
   texture object tObject,3,AL_ImageMRT(4)
   if AL_PointLightBatch(iBatch).Texture>0 then texture object tObject,4,AL_PointLightBatch(iBatch).Texture
   set object mask tObject,2^AL_Camera(0)
   set object radius tObject,9999^9999
   disable object zwrite tObject
   exclude object on tObject
   set effect constant vector tEffect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
   pEffect=Object_GetShaderPtr(tObject,0):PokeDword(AL_PointLightBatch(iBatch).pEffect+(AL_PointLightBatch(iBatch).Count*4),pEffect)
   pData=Shader_GetParameterByName(pEffect,0,"Data0"):PokeDword(AL_PointLightBatch(iBatch).pData0+(AL_PointLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data1"):PokeDword(AL_PointLightBatch(iBatch).pData1+(AL_PointLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data2"):PokeDword(AL_PointLightBatch(iBatch).pData2+(AL_PointLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data3"):PokeDword(AL_PointLightBatch(iBatch).pData3+(AL_PointLightBatch(iBatch).Count*4),pData)
   pData=Shader_GetParameterByName(pEffect,0,"Data4"):PokeDword(AL_PointLightBatch(iBatch).pData4+(AL_PointLightBatch(iBatch).Count*4),pData)
   inc AL_PointLightBatch(iBatch).Count
endfunction

`----------------------------------------------------
` Update Point Light
`----------------------------------------------------
function PointLight_Update(iLight as integer)
   rotate x matrix4 Matrix(1),AL_PointLight(iLight).Angle.x*0.01745329251
   rotate y matrix4 Matrix(2),AL_PointLight(iLight).Angle.y*0.01745329251
   rotate z matrix4 Matrix(3),AL_PointLight(iLight).Angle.z*0.01745329251
   multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
   multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
   AL_PointLight(iLight).Matrix1.x=get matrix4 element(Matrix(4),0):AL_PointLight(iLight).Matrix1.y=get matrix4 element(Matrix(4),1):AL_PointLight(iLight).Matrix1.z=get matrix4 element(Matrix(4),2)
   AL_PointLight(iLight).Matrix2.x=get matrix4 element(Matrix(4),4):AL_PointLight(iLight).Matrix2.y=get matrix4 element(Matrix(4),5):AL_PointLight(iLight).Matrix2.z=get matrix4 element(Matrix(4),6)
   AL_PointLight(iLight).Matrix3.x=get matrix4 element(Matrix(4),8):AL_PointLight(iLight).Matrix3.y=get matrix4 element(Matrix(4),9):AL_PointLight(iLight).Matrix3.z=get matrix4 element(Matrix(4),10)
   FrustumCulling_SetBounds(AL_PointLight(iLight).Bounds,AL_PointLight(iLight).Position.x,AL_PointLight(iLight).Position.y,AL_PointLight(iLight).Position.z,AL_PointLight(iLight).Range*2,AL_PointLight(iLight).Range*2,AL_PointLight(iLight).Range*2)
endfunction

`----------------------------------------------------
` Point Light Shadow Pointers
`----------------------------------------------------
function PointLight_ShadowPtrs(iShadowMap as integer)
   if AL_PointLightEffect(1)=0
      AL_PointLightEffect(1)=FreeUpEffect(32500+rnd(16250))
      load effect AL_Directory+"Lighting\Point\Shadow1\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(1),0,1
      AL_PointLightEffect(2)=FreeUpEffect(32500+rnd(16250))
      if AL_ShadowQuality=4 then load effect AL_Directory+"Lighting\Point\Shadow3\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(2),0,1 else load effect AL_Directory+"Lighting\Point\Shadow2\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(2),0,1
      AL_PointLightEffect(3)=FreeUpEffect(32500+rnd(16250))
      load effect AL_Directory+"Lighting\Texture Point\Shadow1\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(3),0,1
      AL_PointLightEffect(4)=FreeUpEffect(32500+rnd(16250))
      if AL_ShadowQuality=4 then load effect AL_Directory+"Lighting\Texture Point\Shadow3\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(4),0,1 else load effect AL_Directory+"Lighting\Texture Point\Shadow2\"+str$(AL_PointLightSpecular)+".fx",AL_PointLightEffect(4),0,1
      for t=1 to 4
         set effect constant vector AL_PointLightEffect(t),"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
         if AL_PBR=1 then set effect technique AL_PointLightEffect(t),"PBR"
      next t
      for d=1 to 15
         if AL_PointShadowMap(d).Textured=0 then set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(1) else set object effect AL_PointShadowMap(d).Object,AL_PointLightEffect(3)
      next d
   endif
   AL_PointShadowMap(iShadowMap).pEffect=Object_GetShaderPtr(AL_PointShadowMap(iShadowMap).Object,0)
   AL_PointShadowMap(iShadowMap).pData0=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data0")
   AL_PointShadowMap(iShadowMap).pData1=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data1")
   AL_PointShadowMap(iShadowMap).pData2=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data2")
   AL_PointShadowMap(iShadowMap).pData3=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data3")
   AL_PointShadowMap(iShadowMap).pData4=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data4")
   AL_PointShadowMap(iShadowMap).pData5=Shader_GetParameterByName(AL_PointShadowMap(iShadowMap).pEffect,0,"Data5")
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_ReflectionData
   InUse as boolean
   Position as Vec3Float
   Range as float
   Texture as integer
endtype

`----------------------------------------------------
` Create Reflection
`----------------------------------------------------
function Reflection_Create()
   tReflection=-1
   for r=0 to AL_ReflectionCount
      if AL_Reflection(r).InUse=0 then tReflection=r:exit
   next r
   if tReflection=-1
      array insert at bottom AL_Reflection()
      inc AL_ReflectionCount
      tReflection=AL_ReflectionCount
   endif
   AL_Reflection(tReflection).InUse=1
   AL_Reflection(tReflection).Range=0
   AL_Reflection(tReflection).Texture=0
endfunction tReflection

`----------------------------------------------------
` Delete Reflection
`----------------------------------------------------
function Reflection_Delete(iReflection as integer)
   if AL_Reflection(iReflection).InUse=1
      AL_Reflection(iReflection).InUse=0
      if AL_ReflectionUpdate(2)=iReflection then AL_ReflectionUpdate(3)=0
   endif
endfunction

`----------------------------------------------------
` Reflection Set Texture
`----------------------------------------------------
function Reflection_SetTexture(iReflection as integer,iTexture as integer)
   if AL_Reflection(iReflection).InUse=1
      AL_Reflection(iReflection).Texture=iTexture
      if AL_ReflectionUpdate(3)-1=iReflection and AL_ReflectionUpdate(3)>0
         if AL_ReflectionUpdate(4)=0 then texture object AL_ReflectionObject(4),1,AL_Reflection(iReflection).Texture else texture object AL_ReflectionObject(4),2,AL_Reflection(iReflection).Texture
         AL_ReflectionTransition=1
      endif
   endif
endfunction

`----------------------------------------------------
` Reflection Set Postion
`----------------------------------------------------
function Reflection_SetPosition(iReflection as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_Reflection(iReflection).InUse=1
      AL_Reflection(iReflection).Position.x=iPosX
      AL_Reflection(iReflection).Position.y=iPosY
      AL_Reflection(iReflection).Position.z=iPosZ
   endif
endfunction

`----------------------------------------------------
` Reflection Set Range
`----------------------------------------------------
function Reflection_SetRange(iReflection as integer,iRange as float)
   if AL_Reflection(iReflection).InUse=1 then AL_Reflection(iReflection).Range=iRange
endfunction

`----------------------------------------------------
` Reflection Capture
`----------------------------------------------------
function Reflection_Capture(iReflection as integer)
   if AL_Reflection(iReflection).InUse=1 and AL_PBR=1 and AL_Reflection(iReflection).Texture>0
      for x=0 to 1
         AdvLighting_SetPBR(x)
         Reflection_CaptureReflection(iReflection,AL_Reflection(iReflection).Texture,1)
         if AL_ReflectionUpdate(3)-1=iReflection and AL_ReflectionUpdate(3)>0
            if AL_ReflectionUpdate(4)=0 then texture object AL_ReflectionObject(4),1,AL_Reflection(iReflection).Texture else texture object AL_ReflectionObject(4),2,AL_Reflection(iReflection).Texture
            AL_ReflectionTransition=1
         endif
         for a=0 to AL_AlphaObjectActiveCount
            tALAlphaObject=AL_AlphaObjectActive(a)
            if AL_AlphaObject(tALAlphaObject).ReflectionTexture=AL_Reflection(iReflection).Texture then texture object AL_AlphaObject(tALAlphaObject).Object,6,AL_Reflection(iReflection).Texture
         next a
         for a=0 to AL_WaterObjectActiveCount
            tALWaterObject=AL_WaterObjectActive(a)
            if AL_WaterObject(tALWaterObject).ReflectionTexture=AL_Reflection(iReflection).Texture then texture object AL_WaterObject(tALWaterObject).Object,4,AL_Reflection(iReflection).Texture
         next a
      next x
   endif
endfunction

`----------------------------------------------------
`Reflection Update
   _Reflections_Update:
      for a=0 to AL_AlphaObjectActiveCount:AlphaObject_UpdateReflection(AL_AlphaObjectActive(a)):next a
      for a=0 to AL_WaterObjectActiveCount:WaterObject_UpdateReflection(AL_WaterObjectActive(a)):next a
      AL_ReflectionLight.z=((AL_Ambient(1)/255)^2.2)*AL_Ambient(7)
      if ((AL_Ambient(2)/255)^2.2)*AL_Ambient(7)>AL_ReflectionLight.z then AL_ReflectionLight.z=((AL_Ambient(2)/255)^2.2)*AL_Ambient(7)
      if ((AL_Ambient(3)/255)^2.2)*AL_Ambient(7)>AL_ReflectionLight.z then AL_ReflectionLight.z=((AL_Ambient(3)/255)^2.2)*AL_Ambient(7)
      if ((AL_DirLightColor.x/255)^2.2)*AL_DirLightIntensity>AL_ReflectionLight.z then AL_ReflectionLight.z=((AL_DirLightColor.x/255)^2.2)*AL_DirLightIntensity
      if ((AL_DirLightColor.y/255)^2.2)*AL_DirLightIntensity>AL_ReflectionLight.z then AL_ReflectionLight.z=((AL_DirLightColor.y/255)^2.2)*AL_DirLightIntensity
      if ((AL_DirLightColor.z/255)^2.2)*AL_DirLightIntensity>AL_ReflectionLight.z then AL_ReflectionLight.z=((AL_DirLightColor.z/255)^2.2)*AL_DirLightIntensity
      AL_ReflectionLight.w=AL_ReflectionLight.z/AL_ReflectionLight.y
      AL_ReflectionLight.z=AL_ReflectionLight.z/AL_ReflectionLight.x
      if AL_ReflectionLight.w>1 then AL_ReflectionLight.w=1
      if AL_ReflectionLight.z>1 then AL_ReflectionLight.z=1
      tReflectionNight=0
      if AL_Sky=1
         if AL_SkySunDirection.y>0 then tReflectionNight=1
         if tReflectionNight=0 and AL_ReflectionLightTransition>0 then dec AL_ReflectionLightTransition,AL_ReflectionTransitionRate*AL_Timer
         if tReflectionNight=1 and AL_ReflectionLightTransition<100 then inc AL_ReflectionLightTransition,AL_ReflectionTransitionRate*AL_Timer
         if AL_ReflectionLightTransition<0 then AL_ReflectionLightTransition=0
         if AL_ReflectionLightTransition>100 then AL_ReflectionLightTransition=100
      endif
      set effect constant float AL_AmbientLightEffect,"Lighting1",AL_ReflectionLight.z*(1-(AL_ReflectionLightTransition/100))
      set effect constant float AL_AmbientLightEffect,"Lighting2",AL_ReflectionLight.w*(AL_ReflectionLightTransition/100)
      if AL_ReflectionCount>-1
         if AL_ReflectionTransition=0
            for r=1 to 25
               if AL_Reflection(AL_ReflectionUpdate(1)).InUse=1 and AL_Reflection(AL_ReflectionUpdate(1)).Texture>0
                  if AL_ReflectionTransition=0
                     set vector3 Vector3(1),AL_CameraPos.x-AL_Reflection(AL_ReflectionUpdate(1)).Position.x,AL_CameraPos.y-AL_Reflection(AL_ReflectionUpdate(1)).Position.y,AL_CameraPos.z-AL_Reflection(AL_ReflectionUpdate(1)).Position.z
                     AL_ReflectionDist(0)=length vector3(Vector3(1))
                     if AL_ReflectionDist(0)<AL_ReflectionDist(1)
                        if AL_Reflection(AL_ReflectionUpdate(1)).Range>1
                           if AL_ReflectionDist(0)<AL_Reflection(AL_ReflectionUpdate(1)).Range
                              AL_ReflectionDist(1)=AL_ReflectionDist(0)
                              AL_ReflectionUpdate(2)=AL_ReflectionUpdate(1)+1
                           endif
                        else
                           AL_ReflectionDist(1)=AL_ReflectionDist(0)
                           AL_ReflectionUpdate(2)=AL_ReflectionUpdate(1)+1
                        endif
                    endif
                  endif
               endif
               inc AL_ReflectionUpdate(1)
               if AL_ReflectionUpdate(1)>AL_ReflectionCount then exit
            next r
            if AL_ReflectionUpdate(1)>AL_ReflectionCount
               if AL_ReflectionUpdate(2)>0 and AL_ReflectionUpdate(3)<>AL_ReflectionUpdate(2)
                  AL_ReflectionUpdate(3)=AL_ReflectionUpdate(2)
                  if AL_ReflectionUpdate(4)=0
                     AL_ReflectionUpdate(4)=1
                     if image exist(AL_Reflection(AL_ReflectionUpdate(3)-1).Texture)=1 then texture object AL_ReflectionObject(4),2,AL_Reflection(AL_ReflectionUpdate(3)-1).Texture
                  else
                     AL_ReflectionUpdate(4)=0
                     if image exist(AL_Reflection(AL_ReflectionUpdate(3)-1).Texture)=1 then texture object AL_ReflectionObject(4),1,AL_Reflection(AL_ReflectionUpdate(3)-1).Texture
                  endif
                  AL_ReflectionTransition=100
               endif
               AL_ReflectionUpdate(1)=0
               AL_ReflectionUpdate(2)=0
               AL_ReflectionDist(1)=9999999
            endif
         endif
      endif
   return

`----------------------------------------------------
` Reflection Capture
`----------------------------------------------------
function Reflection_CaptureReflection(iReflection as integer,iTexture as integer,iType as integer)
   Vector4Float(12).x=AL_CameraData(3):Vector4Float(12).y=AL_CameraData(4)
   Vector4Float(13).x=camera position x(0):Vector4Float(13).y=camera position y(0):Vector4Float(13).z=camera position z(0)
   Vector4Float(14).x=camera angle x(0):Vector4Float(14).y=camera angle y(0):Vector4Float(14).z=camera angle z(0)
   Camera_SetFOV(90)
   Camera_SetAspect(1)
   if iType=1 then position camera 0,AL_Reflection(iReflection).Position.x,AL_Reflection(iReflection).Position.y,AL_Reflection(iReflection).Position.z
   if iType=2 then position camera 0,AL_BoxReflection(iReflection).Position.x,AL_BoxReflection(iReflection).Position.y,AL_BoxReflection(iReflection).Position.z
   if iType=3 then position camera 0,AL_SphereReflection(iReflection).Position.x,AL_SphereReflection(iReflection).Position.y,AL_SphereReflection(iReflection).Position.z
   if AL_ReflectionLightTransition>50 then tTextureInvert=1 else tTextureInvert=0
   if AL_Sky=1 then set object mask AL_SkyObject(1),(2^AL_Camera(1))+(2^AL_Camera(9))
   set vector4 Vector4(1),0,0,0,0
   if AL_Sky=1 then set effect constant vector AL_SkyEffect(1),"SunScale",Vector4(1)
   set object mask AL_AmbientLightObject,2^AL_Camera(9)
   set object mask AL_DirLightObject(1),2^AL_Camera(9)
   for b=0 to AL_BoxAmbientBatchCount:set object mask AL_BoxAmbientBatch(b).Object,(2^AL_Camera(9))+(2^AL_Camera(3)):next b
   for b=0 to AL_SphereAmbientBatchCount:set object mask AL_SphereAmbientBatch(b).Object,(2^AL_Camera(9))+(2^AL_Camera(3)):next b
   if AL_PBR=1
      for b=0 to AL_BoxReflectionCount
         if AL_BoxReflection(b).InUse=1 then set object mask AL_BoxReflection(b).Object,2^AL_Camera(9)
      next b
      for b=0 to AL_SphereReflectionCount
         if AL_SphereReflection(b).InUse=1 then set object mask AL_SphereReflection(b).Object,2^AL_Camera(9)
      next b
   endif
   for b=1 to 15
      set object mask AL_PointShadowMap(b).Object,2^AL_Camera(9)
      set object mask AL_SpotShadowMap(b).Object,2^AL_Camera(9)
   next b
   for b=0 to AL_PointLightBatchCount
      for o=0 to AL_PointLightBatch(b).Count-1:set object mask PeekInteger(AL_PointLightBatch(b).pObjectID+(o*4)),2^AL_Camera(9):next o
   next b
   for b=0 to AL_SpotLightBatchCount
      for o=0 to AL_SpotLightBatch(b).Count-1:set object mask PeekInteger(AL_SpotLightBatch(b).pObjectID+(o*4)),2^AL_Camera(9):next o
   next b
   for b=0 to AL_ObjectActiveCount
      if AL_Object(AL_ObjectActive(b)).ReflectionCapture=0 then set object mask AL_Object(AL_ObjectActive(b)).Object,0
   next b
   for b=0 to AL_BatchGroupCount
      if AL_BatchGroup(b).InUse=1 and AL_BatchGroup(b).ReflectionCapture=0
         for o=0 to AL_BatchGroup(b).ObjectCount:set object mask PeekInteger(AL_BatchGroup(b).pObject+(o*4)),0:next o
      endif
   next b
   set camera view AL_Camera(8),0,0,256,256
   exclude object off AL_ReflectionObject(1)
   AL_ReflectionCapture=1
   for t=0 to 5
      rotate camera 0,AL_PointFaceAngle(t).x,AL_PointFaceAngle(t).y,AL_PointFaceAngle(t).z
      AdvLighting_Update(0)
      CubeTex_SyncFaces AL_ReflectionCubeMap(1),AL_Camera(8),2^t
   next t
   AL_ReflectionCapture=0
   exclude object on AL_ReflectionObject(1)
   if AL_Sky=1 then set object mask AL_SkyObject(1),(2^AL_Camera(0))+(2^AL_Camera(1))+(2^AL_Camera(5))
   set vector4 Vector4(1),AL_SkySunScale,AL_SkySunScale-0.002,50,0
   if AL_Sky=1 then set effect constant vector AL_SkyEffect(1),"SunScale",Vector4(1)
   set object mask AL_AmbientLightObject,2^AL_Camera(0)
   set object mask AL_DirLightObject(1),2^AL_Camera(0)
   for b=0 to AL_BoxAmbientBatchCount:set object mask AL_BoxAmbientBatch(b).Object,(2^AL_Camera(0))+(2^AL_Camera(3)):next b
   for b=0 to AL_SphereAmbientBatchCount:set object mask AL_SphereAmbientBatch(b).Object,(2^AL_Camera(0))+(2^AL_Camera(3)):next b
   if AL_PBR=1
      for b=0 to AL_BoxReflectionCount
         if AL_BoxReflection(b).InUse=1 then set object mask AL_BoxReflection(b).Object,2^AL_Camera(0)
      next b
      for b=0 to AL_SphereReflectionCount
         if AL_SphereReflection(b).InUse=1 then set object mask AL_SphereReflection(b).Object,2^AL_Camera(0)
      next b
   endif
   for b=0 to AL_PointLightBatchCount
      for o=0 to AL_PointLightBatch(b).Count-1:set object mask PeekInteger(AL_PointLightBatch(b).pObjectID+(o*4)),2^AL_Camera(0):next o
   next b
   for b=0 to AL_SpotLightBatchCount
      for o=0 to AL_SpotLightBatch(b).Count-1:set object mask PeekInteger(AL_SpotLightBatch(b).pObjectID+(o*4)),2^AL_Camera(0):next o
   next b
   for b=1 to 15
      set object mask AL_PointShadowMap(b).Object,2^AL_Camera(0)
      set object mask AL_SpotShadowMap(b).Object,2^AL_Camera(0)
   next b
   for b=0 to AL_ObjectActiveCount:set object mask AL_Object(AL_ObjectActive(b)).Object,AL_Object(AL_ObjectActive(b)).Mask:next b
   for b=0 to AL_BatchGroupCount
      if AL_BatchGroup(b).InUse=1 and AL_BatchGroup(b).ReflectionCapture=0
         for o=0 to AL_BatchGroup(b).ObjectCount:set object mask PeekInteger(AL_BatchGroup(b).pObject+(o*4)),AL_BatchGroup(b).Mask:next o
      endif
   next b
   Camera_SetFOV(Vector4Float(12).x)
   Camera_SetAspect(Vector4Float(12).y)
   position camera 0,Vector4Float(13).x,Vector4Float(13).y,Vector4Float(13).z
   rotate camera 0,Vector4Float(14).x,Vector4Float(14).y,Vector4Float(14).z
   if AL_ReflectionUpdate(5)<>iTexture
      AL_ReflectionUpdate(5)=iTexture
      texture object AL_ReflectionObject(3),0,iTexture
      exclude object off AL_ReflectionObject(3)
      EfxCam_SyncMask 2^AL_Camera(11)
      EfxCam_Sync
      exclude object on AL_ReflectionObject(3)
      Camera_Create(AL_Camera(10),iTexture,768,768,21)
      set camera view AL_Camera(10),0,0,768,768
      set effect technique AL_ReflectionEffect(0),"OldRef"
      exclude object off AL_ReflectionObject(0)
      sync mask 2^AL_Camera(10)
      fastsync
      exclude object on AL_ReflectionObject(0)
      set effect technique AL_ReflectionEffect(0),"Equirectangular"
   endif
   set effect constant float AL_ReflectionEffect(0),"TextureInvert",tTextureInvert
   Vector4Float(0).w=0.25
   for r=0 to 4
      if tTextureInvert=0
         if r=0 then set camera view AL_Camera(10),0,0,768,262:set vector4 Vector4(1),1.00130208333,0.00190839694,0,0
         if r=1 then set camera view AL_Camera(10),0,262,384,393:set vector4 Vector4(1),1.00260416667,0.00381679389,0,0
         if r=2 then set camera view AL_Camera(10),0,393,192,458:set vector4 Vector4(1),1.00520833333,0.00763358778,0,0
         if r=3 then set camera view AL_Camera(10),0,458,96,490:set vector4 Vector4(1),1.01041666667,0.01526717557,0,0
         if r=4 then set camera view AL_Camera(10),0,490,48,506:set vector4 Vector4(1),1.02083333333,0.03053435114,0,0
      else
         if r=0 then set camera view AL_Camera(10),0 ,506,768,768:set vector4 Vector4(1),1.00130208333,0.00190839694,0,0
         if r=1 then set camera view AL_Camera(10),384,375,768,506:set vector4 Vector4(1),1.00260416667,0.00381679389,0,0
         if r=2 then set camera view AL_Camera(10),576,310,768,375:set vector4 Vector4(1),1.00520833333,0.00763358778,0,0
         if r=3 then set camera view AL_Camera(10),672,278,768,310:set vector4 Vector4(1),1.01041666667,0.01526717557,0,0
         if r=4 then set camera view AL_Camera(10),720,262,768,278:set vector4 Vector4(1),1.02083333333,0.03053435114,0,0
      endif
      set effect constant vector AL_ReflectionEffect(0),"ViewVec",Vector4(1)
      exclude object off AL_ReflectionObject(0)
      sync mask 2^AL_Camera(10)
      fastsync
      exclude object on AL_ReflectionObject(0)
      if r<4
         exclude object off AL_ReflectionObject(2)
         for b=0 to r*2
            for c=1 to 2
               set effect technique AL_ReflectionEffect(2),"Blur"+str$(c)
               for f=0 to 2
                  tBoxFilter=1
                  for x=-1 to 1
                     for z=-1 to 1
                        Vector4Float(0).x=x*2:Vector4Float(0).z=z*2
                        rotate x matrix4 Matrix(1),0:rotate y matrix4 Matrix(2),0:rotate z matrix4 Matrix(3),0
                        if f=0 then rotate z matrix4 Matrix(2),(Vector4Float(0).x*0.01745329251)*Vector4Float(0).w:rotate y matrix4 Matrix(3),(Vector4Float(0).z*0.01745329251)*Vector4Float(0).w
                        if f=1 then rotate x matrix4 Matrix(1),(Vector4Float(0).x*0.01745329251)*Vector4Float(0).w:rotate z matrix4 Matrix(3),(Vector4Float(0).z*0.01745329251)*Vector4Float(0).w
                        if f=2 then rotate x matrix4 Matrix(1),(Vector4Float(0).x*0.01745329251)*Vector4Float(0).w:rotate y matrix4 Matrix(2),(Vector4Float(0).z*0.01745329251)*Vector4Float(0).w
                        multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
                        multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
                        set effect constant matrix AL_ReflectionEffect(2),"CubeAngle"+str$(tBoxFilter),Matrix(4)
                        inc tBoxFilter
                     next z
                  next x
                  CubeTex_SyncFaces AL_ReflectionCubeMap(3-c),AL_Camera(8),(2^(f*2))+(2^((f*2)+1))
               next f
            next c
         next b
         exclude object on AL_ReflectionObject(2)
         Vector4Float(0).w=Vector4Float(0).w*4
      endif
   next r
endfunction

`----------------------------------------------------
` Get Closest Reflection
`----------------------------------------------------
function Reflection_GetReflections(iX as float,iY as float,iZ as float)
   tReflectionTexture=0
   Vector4Float(0).x=999999999999
   for r=0 to AL_ReflectionCount
      if AL_Reflection(r).InUse=1 and AL_Reflection(r).Texture>0
         set vector3 Vector3(1),iX-AL_Reflection(r).Position.x,iY-AL_Reflection(r).Position.y,iZ-AL_Reflection(r).Position.z
         Vector4Float(0).y=length vector3(Vector3(1))
         if Vector4Float(0).y<Vector4Float(0).x
            Vector4Float(0).x=Vector4Float(0).y
            Vector4Float(0).z=AL_Reflection(r).Position.y
            tReflectionTexture=AL_Reflection(r).Texture
         endif
      endif
   next r
   for r=0 to AL_BoxReflectionCount
      if AL_BoxReflection(r).InUse=1 and AL_BoxReflection(r).Texture>0
         set vector3 Vector3(1),iX-AL_BoxReflection(r).Position.x,iY-AL_BoxReflection(r).Position.y,iZ-AL_BoxReflection(r).Position.z
         Vector4Float(0).y=length vector3(Vector3(1))
         if Vector4Float(0).y<Vector4Float(0).x
            Vector4Float(0).x=Vector4Float(0).y
            Vector4Float(0).z=AL_BoxReflection(r).Position.y
            tReflectionTexture=AL_BoxReflection(r).Texture
         endif
      endif
   next r
   for r=0 to AL_SphereReflectionCount
      if AL_SphereReflection(r).InUse=1 and AL_SphereReflection(r).Texture>0
         set vector3 Vector3(1),iX-AL_SphereReflection(r).Position.x,iY-AL_SphereReflection(r).Position.y,iZ-AL_SphereReflection(r).Position.z
         Vector4Float(0).y=length vector3(Vector3(1))
         if Vector4Float(0).y<Vector4Float(0).x
            Vector4Float(0).x=Vector4Float(0).y
            Vector4Float(0).z=AL_SphereReflection(r).Position.y
            tReflectionTexture=AL_SphereReflection(r).Texture
         endif
      endif
   next r
endfunction tReflectionTexture

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_SphereReflectionData
   InUse as boolean
   Visible as integer
   Object as integer
   Index as integer
   Mask as integer
   DrawDistance as float
   Position as Vec4Float
   Range as float
   Radius as float
   Padding as float
   Texture as integer
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
endtype

`----------------------------------------------------
` Create Sphere Reflection
`----------------------------------------------------
function SphereReflection_Create()
   tSphereReflection=-1
   for r=0 to AL_SphereReflectionCount
      if AL_SphereReflection(r).InUse=0 then tSphereReflection=r
   next r
   if tSphereReflection=-1
      array insert at bottom AL_SphereReflection()
      inc AL_SphereReflectionCount
      tSphereReflection=AL_SphereReflectionCount
   endif
   tEffect=tSphereReflection/24
   AL_SphereReflection(tSphereReflection).InUse=1
   AL_SphereReflection(tSphereReflection).Texture=0
   AL_SphereReflection(tSphereReflection).Index=tSphereReflection-(tEffect*24)
   AL_SphereReflection(tSphereReflection).Mask=SphereAmbient_Create()
   AL_SphereAmbient(AL_SphereReflection(tSphereReflection).Mask).Reflection=1
   AL_SphereAmbient(AL_SphereReflection(tSphereReflection).Mask).ReflectionId=tSphereReflection
   AL_SphereReflection(tSphereReflection).Object=FreeUpObject(32500)
   make object sphere AL_SphereReflection(tSphereReflection).Object,100,12,12
   convert object fvf AL_SphereReflection(tSphereReflection).Object,0x002||0x100
   if AL_SphereReflectionEffect(tEffect)=0
      AL_SphereReflectionEffect(tEffect)=FreeUpEffect(32500)
      load effect AL_Directory+"Lighting\Reflections\Sphere.fx",AL_SphereReflectionEffect(tEffect),0,1
      set effect constant vector AL_SphereReflectionEffect(tEffect),"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      set effect constant vector AL_SphereReflectionEffect(tEffect),"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      inc AL_SphereReflectionEffectCount
   endif
   set object effect AL_SphereReflection(tSphereReflection).Object,AL_SphereReflectionEffect(tEffect)
   texture object AL_SphereReflection(tSphereReflection).Object,0,AL_ImageMRT(1)
   texture object AL_SphereReflection(tSphereReflection).Object,1,AL_ImageMRT(2)
   texture object AL_SphereReflection(tSphereReflection).Object,2,AL_ImageMRT(3)
   texture object AL_SphereReflection(tSphereReflection).Object,3,AL_ImageMRT(4)
   texture object AL_SphereReflection(tSphereReflection).Object,4,AL_ImageMRT(6)
   texture object AL_SphereReflection(tSphereReflection).Object,5,AL_Image(12)
   set object mask AL_SphereReflection(tSphereReflection).Object,2^AL_Camera(0)
   set object radius AL_SphereReflection(tSphereReflection).Object,9999^9999
   disable object zwrite AL_SphereReflection(tSphereReflection).Object
   exclude object on AL_SphereReflection(tSphereReflection).Object
   pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_SphereReflection(tSphereReflection).Object)
   pMesh=PeekDword(pObject+8)
   pMeshLimb=PeekDword(pMesh)
   tFVFSize=PeekInteger(pMeshLimb+8)
   pVertex=PeekDword(pMeshLimb+20)
   for v=0 to PeekInteger(pMeshLimb+28)-1
      PokeFloat(pVertex+(v*tFVFSize)+12,AL_SphereReflection(tSphereReflection).Index)
   next v
   PokeByte2(pMeshLimb+1000,1)
   AL_SphereReflection(tSphereReflection).pEffect=Object_GetShaderPtr(AL_SphereReflection(tSphereReflection).Object,0)
   AL_SphereReflection(tSphereReflection).pData0=Shader_GetParameterByName(AL_SphereReflection(tSphereReflection).pEffect,0,"Data0")
   AL_SphereReflection(tSphereReflection).pData1=Shader_GetParameterByName(AL_SphereReflection(tSphereReflection).pEffect,0,"Data1")
   AL_SphereReflection(tSphereReflection).pData2=Shader_GetParameterByName(AL_SphereReflection(tSphereReflection).pEffect,0,"Data2")
   SphereReflection_SetVisible(tSphereReflection,1)
   SphereReflection_SetDrawDistance(tSphereReflection,32)
endfunction tSphereReflection

`----------------------------------------------------
` Delete Sphere Reflection
`----------------------------------------------------
function SphereReflection_Delete(iSphereReflection as integer)
   if AL_SphereReflection(iSphereReflection).InUse=1
      SphereReflection_SetVisible(iSphereReflection,0)
      AL_SphereReflection(iSphereReflection).InUse=0
      delete object AL_SphereReflection(iSphereReflection).Object
      SphereAmbient_Delete(AL_SphereReflection(iSphereReflection).Mask)
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Set Visible
`----------------------------------------------------
function SphereReflection_SetVisible(iSphereReflection as integer,iVisible as boolean)
   if AL_SphereReflection(iSphereReflection).InUse=1
      if iVisible=1 and AL_SphereReflection(iSphereReflection).Visible<>1
         if AL_SphereReflection(iSphereReflection).Visible=0
            array insert at bottom AL_SphereReflectionVisible()
            inc AL_SphereReflectionVisibleCount
            AL_SphereReflectionVisible(AL_SphereReflectionVisibleCount)=iSphereReflection+1
         endif
         AL_SphereReflection(iSphereReflection).Visible=1
         SphereAmbient_SetVisible(AL_SphereReflection(iSphereReflection).Mask,1)
      endif
      if iVisible=0 and AL_SphereReflection(iSphereReflection).Visible=1
         AL_SphereReflection(iSphereReflection).Visible=2
         SphereAmbient_SetVisible(AL_SphereReflection(iSphereReflection).Mask,0)
         AL_SphereReflectionVisibleRemove=1
      endif
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Set Texture
`----------------------------------------------------
function SphereReflection_SetTexture(iSphereReflection as integer,iTexture as integer)
   if AL_SphereReflection(iSphereReflection).InUse=1
      AL_SphereReflection(iSphereReflection).Texture=iTexture
      if image exist(iTexture)=1 then texture object AL_SphereReflection(iSphereReflection).Object,6,AL_SphereReflection(iSphereReflection).Texture
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Set Postion
`----------------------------------------------------
function SphereReflection_SetPosition(iSphereReflection as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_SphereReflection(iSphereReflection).InUse=1
      AL_SphereReflection(iSphereReflection).Position.x=iPosX
      AL_SphereReflection(iSphereReflection).Position.y=iPosY
      AL_SphereReflection(iSphereReflection).Position.z=iPosZ
      SphereAmbient_SetPosition(AL_SphereReflection(iSphereReflection).Mask,AL_SphereReflection(iSphereReflection).Position.x,AL_SphereReflection(iSphereReflection).Position.y,AL_SphereReflection(iSphereReflection).Position.z)
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Set Range
`----------------------------------------------------
function SphereReflection_SetRange(iSphereReflection as integer,iRange as float)
   if AL_SphereReflection(iSphereReflection).InUse=1
      AL_SphereReflection(iSphereReflection).Range=iRange
      SphereAmbient_SetRange(AL_SphereReflection(iSphereReflection).Mask,AL_SphereReflection(iSphereReflection).Range)
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Set Padding
`----------------------------------------------------
function SphereReflection_SetPadding(iSphereReflection as integer,iPadding)
   if AL_SphereReflection(iSphereReflection).InUse=1
      AL_SphereReflection(iSphereReflection).Padding=iPadding
      SphereAmbient_SetPadding(AL_SphereReflection(iSphereReflection).Mask,AL_SphereReflection(iSphereReflection).Padding)
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Draw Distance
`----------------------------------------------------
function SphereReflection_SetDrawDistance(iSphereReflection as integer,iDrawDistance as float)
   if AL_SphereReflection(iSphereReflection).InUse=1
      if AL_SphereReflection(iSphereReflection).DrawDistance<>iDrawDistance
         AL_SphereReflection(iSphereReflection).DrawDistance=iDrawDistance
         SphereAmbient_SetDrawDistance(AL_SphereReflection(iSphereReflection).Mask,AL_SphereReflection(iSphereReflection).DrawDistance)
      endif
   endif
endfunction

`----------------------------------------------------
` Sphere Reflection Capture
`----------------------------------------------------
function SphereReflection_Capture(iSphereReflection as integer)
   if AL_SphereReflection(iSphereReflection).InUse=1 and AL_PBR=1
      for x=0 to 1
         AdvLighting_SetPBR(x)
         if AL_SphereReflection(iSphereReflection).Texture>0
            Reflection_CaptureReflection(iSphereReflection,AL_SphereReflection(iSphereReflection).Texture,3)
            texture object AL_SphereReflection(iSphereReflection).Object,6,AL_SphereReflection(iSphereReflection).Texture
            for a=0 to AL_AlphaObjectActiveCount
               tALAlphaObject=AL_AlphaObjectActive(a)
               if AL_AlphaObject(tALAlphaObject).ReflectionTexture=AL_SphereReflection(iSphereReflection).Texture then texture object AL_AlphaObject(tALAlphaObject).Object,6,AL_SphereReflection(iSphereReflection).Texture
            next a
            for a=0 to AL_WaterObjectActiveCount
               tALWaterObject=AL_WaterObjectActive(a)
               if AL_WaterObject(tALWaterObject).ReflectionTexture=AL_SphereReflection(iSphereReflection).Texture then texture object AL_WaterObject(tALWaterObject).Object,4,AL_SphereReflection(iSphereReflection).Texture
            next a
         endif
      next x
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_BoxReflectionData
   InUse as boolean
   Visible as integer
   Object as integer
   Index as integer
   Mask as integer
   DrawDistance as float
   Position as Vec4Float
   Scale as Vec3Float
   Radius as float
   Angle as Vec3Float
   Padding1 as Vec3Float
   Padding2 as Vec3Float
   Texture as integer
   pEffect as dword
   pData0 as dword
   pData1 as dword
   pData2 as dword
   pData3 as dword
   pData4 as dword
   pData5 as dword
   pData6 as dword
   pData7 as dword
endtype

`----------------------------------------------------
` Create Box Reflection
`----------------------------------------------------
function BoxReflection_Create()
   tBoxReflection=-1
   for r=0 to AL_BoxReflectionCount
      if AL_BoxReflection(r).InUse=0 then tBoxReflection=r
   next r
   if tBoxReflection=-1
      array insert at bottom AL_BoxReflection()
      inc AL_BoxReflectionCount
      tBoxReflection=AL_BoxReflectionCount
   endif
   tEffect=tBoxReflection/24
   AL_BoxReflection(tBoxReflection).InUse=1
   AL_BoxReflection(tBoxReflection).Texture=0
   AL_BoxReflection(tBoxReflection).Index=tBoxReflection-(tEffect*24)
   AL_BoxReflection(tBoxReflection).Mask=BoxAmbient_Create()
   AL_BoxAmbient(AL_BoxReflection(tBoxReflection).Mask).Reflection=1
   AL_BoxAmbient(AL_BoxReflection(tBoxReflection).Mask).ReflectionId=tBoxReflection
   AL_BoxReflection(tBoxReflection).Object=FreeUpObject(32500)
   make object cube AL_BoxReflection(tBoxReflection).Object,100
   convert object fvf AL_BoxReflection(tBoxReflection).Object,0x002||0x100
   if AL_BoxReflectionEffect(tEffect)=0
      AL_BoxReflectionEffect(tEffect)=FreeUpEffect(32500)
      load effect AL_Directory+"Lighting\Reflections\Box.fx",AL_BoxReflectionEffect(tEffect),0,1
      set effect constant vector AL_BoxReflectionEffect(tEffect),"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
      set effect constant vector AL_BoxReflectionEffect(tEffect),"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      inc AL_BoxReflectionEffectCount
   endif
   set object effect AL_BoxReflection(tBoxReflection).Object,AL_BoxReflectionEffect(tEffect)
   texture object AL_BoxReflection(tBoxReflection).Object,0,AL_ImageMRT(1)
   texture object AL_BoxReflection(tBoxReflection).Object,1,AL_ImageMRT(2)
   texture object AL_BoxReflection(tBoxReflection).Object,2,AL_ImageMRT(3)
   texture object AL_BoxReflection(tBoxReflection).Object,3,AL_ImageMRT(4)
   texture object AL_BoxReflection(tBoxReflection).Object,4,AL_ImageMRT(6)
   texture object AL_BoxReflection(tBoxReflection).Object,5,AL_Image(12)
   set object mask AL_BoxReflection(tBoxReflection).Object,2^AL_Camera(0)
   set object radius AL_BoxReflection(tBoxReflection).Object,9999^9999
   disable object zwrite AL_BoxReflection(tBoxReflection).Object
   exclude object on AL_BoxReflection(tBoxReflection).Object
   pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_BoxReflection(tBoxReflection).Object)
   pMesh=PeekDword(pObject+8)
   pMeshLimb=PeekDword(pMesh)
   tFVFSize=PeekInteger(pMeshLimb+8)
   pVertex=PeekDword(pMeshLimb+20)
   for v=0 to PeekInteger(pMeshLimb+28)-1
      PokeFloat(pVertex+(v*tFVFSize)+12,AL_BoxReflection(tBoxReflection).Index)
   next v
   PokeByte2(pMeshLimb+1000,1)
   AL_BoxReflection(tBoxReflection).pEffect=Object_GetShaderPtr(AL_BoxReflection(tBoxReflection).Object,0)
   AL_BoxReflection(tBoxReflection).pData0=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data0")
   AL_BoxReflection(tBoxReflection).pData1=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data1")
   AL_BoxReflection(tBoxReflection).pData2=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data2")
   AL_BoxReflection(tBoxReflection).pData3=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data3")
   AL_BoxReflection(tBoxReflection).pData4=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data4")
   AL_BoxReflection(tBoxReflection).pData5=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data5")
   AL_BoxReflection(tBoxReflection).pData6=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data6")
   AL_BoxReflection(tBoxReflection).pData7=Shader_GetParameterByName(AL_BoxReflection(tBoxReflection).pEffect,0,"Data7")
   BoxReflection_SetVisible(tBoxReflection,1)
   BoxReflection_SetDrawDistance(tBoxReflection,32)
endfunction tBoxReflection

`----------------------------------------------------
` Delete Box Reflection
`----------------------------------------------------
function BoxReflection_Delete(iBoxReflection as integer)
   if AL_BoxReflection(iBoxReflection).InUse=1
      BoxReflection_SetVisible(iBoxReflection,0)
      AL_BoxReflection(iBoxReflection).InUse=0
      delete object AL_BoxReflection(iBoxReflection).Object
      BoxAmbient_Delete(AL_BoxReflection(iBoxReflection).Mask)
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Visible
`----------------------------------------------------
function BoxReflection_SetVisible(iBoxReflection as integer,iVisible as boolean)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if iVisible=1 and AL_BoxReflection(iBoxReflection).Visible<>1
         if AL_BoxReflection(iBoxReflection).Visible=0
            array insert at bottom AL_BoxReflectionVisible()
            inc AL_BoxReflectionVisibleCount
            AL_BoxReflectionVisible(AL_BoxReflectionVisibleCount)=iBoxReflection+1
         endif
         AL_BoxReflection(iBoxReflection).Visible=1
         BoxAmbient_SetVisible(AL_BoxReflection(iBoxReflection).Mask,1)
      endif
      if iVisible=0 and AL_BoxReflection(iBoxReflection).Visible=1
         AL_BoxReflection(iBoxReflection).Visible=2
         BoxAmbient_SetVisible(AL_BoxReflection(iBoxReflection).Mask,0)
         AL_BoxReflectionVisibleRemove=1
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Texture
`----------------------------------------------------
function BoxReflection_SetTexture(iBoxReflection as integer,iTexture as integer)
   if AL_BoxReflection(iBoxReflection).InUse=1
      AL_BoxReflection(iBoxReflection).Texture=iTexture
      if image exist(iTexture)=1 then texture object AL_BoxReflection(iBoxReflection).Object,6,AL_BoxReflection(iBoxReflection).Texture
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Postion
`----------------------------------------------------
function BoxReflection_SetPosition(iBoxReflection as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if AL_BoxReflection(iBoxReflection).Position.x<>iPosX or AL_BoxReflection(iBoxReflection).Position.y<>iPosY or AL_BoxReflection(iBoxReflection).Position.z<>iPosZ
         AL_BoxReflection(iBoxReflection).Position.x=iPosX
         AL_BoxReflection(iBoxReflection).Position.y=iPosY
         AL_BoxReflection(iBoxReflection).Position.z=iPosZ
         BoxAmbient_SetPosition(AL_BoxReflection(iBoxReflection).Mask,AL_BoxReflection(iBoxReflection).Position.x,AL_BoxReflection(iBoxReflection).Position.y,AL_BoxReflection(iBoxReflection).Position.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Angle
`----------------------------------------------------
function BoxReflection_SetAngle(iBoxReflection as integer,iAngX as float,iAngY as float,iAngZ as float)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if AL_BoxReflection(iBoxReflection).Angle.x<>iAngX or AL_BoxReflection(iBoxReflection).Angle.y<>iAngY or AL_BoxReflection(iBoxReflection).Angle.z<>iAngZ
         AL_BoxReflection(iBoxReflection).Angle.x=iAngX
         AL_BoxReflection(iBoxReflection).Angle.y=iAngY
         AL_BoxReflection(iBoxReflection).Angle.z=iAngZ
         BoxAmbient_SetAngle(AL_BoxReflection(iBoxReflection).Mask,AL_BoxReflection(iBoxReflection).Angle.x,AL_BoxReflection(iBoxReflection).Angle.y,AL_BoxReflection(iBoxReflection).Angle.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Scale
`----------------------------------------------------
function BoxReflection_SetScale(iBoxReflection as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if AL_BoxReflection(iBoxReflection).Scale.x<>iScaleX or AL_BoxReflection(iBoxReflection).Scale.y<>iScaleY or AL_BoxReflection(iBoxReflection).Scale.z<>iScaleZ
         AL_BoxReflection(iBoxReflection).Scale.x=iScaleX
         AL_BoxReflection(iBoxReflection).Scale.y=iScaleY
         AL_BoxReflection(iBoxReflection).Scale.z=iScaleZ
         AL_BoxReflection(iBoxReflection).Radius=iScaleX
         if AL_BoxReflection(iBoxReflection).Radius<iScaleY then AL_BoxReflection(iBoxReflection).Radius=iScaleY
         if AL_BoxReflection(iBoxReflection).Radius<iScaleZ then AL_BoxReflection(iBoxReflection).Radius=iScaleZ
         BoxAmbient_SetScale(AL_BoxReflection(iBoxReflection).Mask,AL_BoxReflection(iBoxReflection).Scale.x,AL_BoxReflection(iBoxReflection).Scale.y,AL_BoxReflection(iBoxReflection).Scale.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Set Padding
`----------------------------------------------------
function BoxReflection_SetPadding(iBoxReflection as integer,iPaddingPX as float,iPaddingNX as float,iPaddingPY as float,iPaddingNY as float,iPaddingPZ as float,iPaddingNZ as float)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if AL_BoxReflection(iBoxReflection).Padding1.x<>iPaddingPX or AL_BoxReflection(iBoxReflection).Padding1.y<>iPaddingPY or AL_BoxReflection(iBoxReflection).Padding1.z<>iPaddingPZ or AL_BoxReflection(iBoxReflection).Padding2.x<>iPaddingNX or AL_BoxReflection(iBoxReflection).Padding2.y<>iPaddingNY or AL_BoxReflection(iBoxReflection).Padding2.z<>iPaddingNZ
         AL_BoxReflection(iBoxReflection).Padding1.x=iPaddingPX
         AL_BoxReflection(iBoxReflection).Padding1.y=iPaddingPY
         AL_BoxReflection(iBoxReflection).Padding1.z=iPaddingPZ
         AL_BoxReflection(iBoxReflection).Padding2.x=iPaddingNX
         AL_BoxReflection(iBoxReflection).Padding2.y=iPaddingNY
         AL_BoxReflection(iBoxReflection).Padding2.z=iPaddingNZ
         BoxAmbient_SetPadding(AL_BoxReflection(iBoxReflection).Mask,AL_BoxReflection(iBoxReflection).Padding1.x,AL_BoxReflection(iBoxReflection).Padding1.y,AL_BoxReflection(iBoxReflection).Padding1.z,AL_BoxReflection(iBoxReflection).Padding2.x,AL_BoxReflection(iBoxReflection).Padding2.y,AL_BoxReflection(iBoxReflection).Padding2.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Draw Distance
`----------------------------------------------------
function BoxReflection_SetDrawDistance(iBoxReflection as integer,iDrawDistance as float)
   if AL_BoxReflection(iBoxReflection).InUse=1
      if AL_BoxReflection(iBoxReflection).DrawDistance<>iDrawDistance
         AL_BoxReflection(iBoxReflection).DrawDistance=iDrawDistance
         BoxAmbient_SetDrawDistance(AL_BoxReflection(iBoxReflection).Mask,AL_BoxReflection(iBoxReflection).DrawDistance)
      endif
   endif
endfunction

`----------------------------------------------------
` Box Reflection Capture
`----------------------------------------------------
function BoxReflection_Capture(iBoxReflection as integer)
   if AL_BoxReflection(iBoxReflection).InUse=1 and AL_PBR=1
      for x=0 to 1
         AdvLighting_SetPBR(x)
         if AL_BoxReflection(iBoxReflection).Texture>0
            Reflection_CaptureReflection(iBoxReflection,AL_BoxReflection(iBoxReflection).Texture,2)
            texture object AL_BoxReflection(iBoxReflection).Object,6,AL_BoxReflection(iBoxReflection).Texture
            for a=0 to AL_AlphaObjectActiveCount
               tALAlphaObject=AL_AlphaObjectActive(a)
               if AL_AlphaObject(tALAlphaObject).ReflectionTexture=AL_BoxReflection(iBoxReflection).Texture then texture object AL_AlphaObject(tALAlphaObject).Object,6,AL_BoxReflection(iBoxReflection).Texture
            next a
            for a=0 to AL_WaterObjectActiveCount
               tALWaterObject=AL_WaterObjectActive(a)
               if AL_WaterObject(tALWaterObject).ReflectionTexture=AL_BoxReflection(iBoxReflection).Texture then texture object AL_WaterObject(tALWaterObject).Object,4,AL_BoxReflection(iBoxReflection).Texture
            next a
         endif
      next x
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_EffectData
   InUse as integer
   Effect as integer
   Object as integer
   pMotionVec as dword
endtype

`----------------------------------------------------
` Load Effect File
`----------------------------------------------------
function Effect_Load(iFile as string,iEffect as integer,iQuality as integer,iAnisotropy as integer,iDetailMap as boolean,iLodTransition as integer,iDoNotGenerateExtraData as integer)
   if effect exist(iEffect)=0 and fileexist(iFile)=1
      local tFile as string
      tFile=iFile
      reverse$ tFile
      a=find sub string$(tFile,"\")
      b=find sub string$(tFile,"/")
      if a>0 or b>0
         if b<a and b>0 then tFile=left$(tFile,b) else tFile=left$(tFile,a)
      endif
      reverse$ tFile
      tFile=AL_MydocDirectory+left$(tFile,len(tFile)-3)+str$(iQuality)+str$(iAnisotropy)+str$(iDetailMap)+str$(iLodTransition)+str$(iDoNotGenerateExtraData)+".fx"
      if fileexist(tFile)=0
         Effect_LockFile(iFile)
         if iQuality>0 then Effect_SetDefine("MEDIUM",1) else Effect_SetDefine("MEDIUM",0)
         if iQuality=2 then Effect_SetDefine("HIGH",1) else Effect_SetDefine("HIGH",0)
         if iAnisotropy=1 then Effect_SetDefine("Max1Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=2 then Effect_SetDefine("Max2Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=3 then Effect_SetDefine("Max3Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         Effect_SetDefine("DETAIL",iDetailMap)
         if iLodTransition=1 then Effect_SetDefine("LOD1",1) else Effect_SetDefine("LOD1",0)
         if iLodTransition=2 then Effect_SetDefine("LOD2",1) else Effect_SetDefine("LOD2",0)
         if iDoNotGenerateExtraData>0 then Effect_SetDefine("TANGENTS",1) else Effect_SetDefine("TANGENTS",0)
         if iDoNotGenerateExtraData>1 and iDoNotGenerateExtraData<4 then Effect_SetDefine("BATCH",1) else Effect_SetDefine("BATCH",0)
         if iDoNotGenerateExtraData=3 then Effect_SetDefine("TERRAIN",1) else Effect_SetDefine("TERRAIN",0)
         if iDoNotGenerateExtraData=4 then Effect_SetDefine("GEOMETRY",1) else Effect_SetDefine("GEOMETRY",0)
         Effect_UnLockFile(tFile)
      endif
      if iDoNotGenerateExtraData>0 then load effect tFile,iEffect,0,1 else load effect tFile,iEffect,0,0
      tEffectAL=Effect_Add(iEffect)
   endif
endfunction tEffectAL

`----------------------------------------------------
` Add Effect
`----------------------------------------------------
function Effect_Add(iEffect as integer)
   tEffectAL=-1
   for e=AL_EffectFreeUp to AL_EffectCount
      if AL_Effect(e).InUse=0 then AL_EffectFreeUp=e:tEffectAL=e:exit
   next e
   if tEffectAL=-1
      array insert at bottom AL_Effect()
      inc AL_EffectCount
      tEffectAL=AL_EffectCount
      AL_EffectFreeUp=AL_EffectCount
   endif
   inc AL_EffectActiveCount
   array insert at bottom AL_EffectActive()
   AL_EffectActive(AL_EffectActiveCount)=tEffectAL
   AL_Effect(tEffectAL).InUse=1
   AL_Effect(tEffectAL).Effect=iEffect
   AL_Effect(tEffectAL).Object=0
   AL_Effect(tEffectAL).pMotionVec=make memory(960)
   fill memory AL_Effect(tEffectAL).pMotionVec,0,960
   Effect_SetConstants(iEffect)
endfunction tEffectAL

`----------------------------------------------------
` Remove Effect
`----------------------------------------------------
function Effect_Remove(iEffectAL as integer)
   if AL_Effect(iEffectAL).InUse=1
      for i=0 to 239
         tObjectAL=PeekInteger(AL_Effect(iEffectAL).pMotionVec+(i*4))-1
         if tObjectAL>-1 then AL_Object(tObjectAL).MotionBlur=-1
      next i
      delete memory AL_Effect(iEffectAL).pMotionVec
      AL_Effect(iEffectAL).pMotionVec=0
      AL_Effect(iEffectAL).InUse=2
      AL_EffectRemove=1
   endif
endfunction

`----------------------------------------------------
` Set Effect Constants
`----------------------------------------------------
function Effect_SetAllConstantFloat(iConstant as string,iVal as float)
   set effect constant float AL_AmbientLightEffect,iConstant,iVal
   set effect constant float AL_ParticleEffect(1),iConstant,iVal
   set effect constant float AL_ParticleEffect(2),iConstant,iVal
   set effect constant float AL_ImposterEffect(2),iConstant,iVal
   set effect constant float AL_ImposterEffect(3),iConstant,iVal
   for e=0 to AL_EffectActiveCount:set effect constant float AL_Effect(AL_EffectActive(e)).Effect,iConstant,iVal:next e
   for e=0 to AL_AlphaEffectActiveCount:set effect constant float AL_AlphaEffect(AL_AlphaEffectActive(e)).Effect,iConstant,iVal:next e
   for e=0 to AL_WaterEffectActiveCount:set effect constant float AL_WaterEffect(AL_WaterEffectActive(e)).Effect,iConstant,iVal:next e
   set effect constant float AL_WaterFogEffect,iConstant,iVal
   if AL_Sky=1
      set effect constant float AL_SkyEffect(1),iConstant,iVal
      set effect constant float AL_SkyEffect(2),iConstant,iVal
   endif
endfunction

`----------------------------------------------------
` Set Effect Constants
`----------------------------------------------------
function Effect_SetAllConstantVector(iConstant as string,iValX as float,iValY as float,iValZ as float,iValW as float)
   set vector4 Vector4(15),iValX,iValY,iValZ,iValW
   set effect constant vector AL_AmbientLightEffect,iConstant,Vector4(15)
   set effect constant vector AL_ParticleEffect(1),iConstant,Vector4(15)
   set effect constant vector AL_ParticleEffect(2),iConstant,Vector4(15)
   set effect constant vector AL_ImposterEffect(2),iConstant,Vector4(15)
   set effect constant vector AL_ImposterEffect(3),iConstant,Vector4(15)
   for e=0 to AL_EffectActiveCount:set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,iConstant,Vector4(15):next e
   for e=0 to AL_AlphaEffectActiveCount:set effect constant vector AL_AlphaEffect(AL_AlphaEffectActive(e)).Effect,iConstant,Vector4(15):next e
   for e=0 to AL_WaterEffectActiveCount:set effect constant vector AL_WaterEffect(AL_WaterEffectActive(e)).Effect,iConstant,Vector4(15):next e
   set effect constant vector AL_WaterFogEffect,iConstant,Vector4(15)
   if AL_Sky=1
      set effect constant vector AL_SkyEffect(1),iConstant,Vector4(15)
      set effect constant vector AL_SkyEffect(2),iConstant,Vector4(15)
   endif
endfunction

`----------------------------------------------------
` Set Effect Constants
`----------------------------------------------------
function Effect_SetConstants(iEffect as integer)
   set effect constant vector iEffect,"ViewSize",Camera_ViewVec(Vector4(1),AL_ViewVec.x,AL_ViewVec.y,1)
   set effect constant vector iEffect,"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
   set vector4 Vector4(1),0.001+AL_Fog(1),0.001+AL_Fog(2),0.001+AL_Fog(3),0.001+AL_Fog(4)
   set effect constant vector iEffect,"FogRange",Vector4(1)
   set vector4 Vector4(1),0.001+AL_Fog(5),0.001+AL_Fog(6),AL_Fog(7)/255,0
   set effect constant vector iEffect,"HeightFog",Vector4(1)
   set vector4 Vector4(1),(AL_Fog(8)/255)^2.2,(AL_Fog(9)/255)^2.2,(AL_Fog(10)/255)^2.2,0
   set vector4 Vector4(2),(AL_Fog(11)/255)^2.2,(AL_Fog(12)/255)^2.2,(AL_Fog(13)/255)^2.2,0
   set effect constant vector iEffect,"FogColor1",Vector4(1)
   set effect constant vector iEffect,"FogColor2",Vector4(2)
   set vector4 Vector4(1),(AL_Ambient(1)/255)^2.2,(AL_Ambient(2)/255)^2.2,(AL_Ambient(3)/255)^2.2,0
   set effect constant vector iEffect,"AmbientColor",Vector4(1)
   set effect constant float iEffect,"AmbientIntensity",AL_Ambient(7)
   set effect constant float iEffect,"EmissiveIntensity",AL_Ambient(9)
   set vector4 Vector4(1),-AL_SkySunDirection.x,-AL_SkySunDirection.y,-AL_SkySunDirection.z,0
   set effect constant vector iEffect,"SunDirection",Vector4(1)
   set vector4 Vector4(1),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
   set effect constant vector iEffect,"LightDirection",Vector4(1)
   set vector4 Vector4(1),(AL_DirLightColor.x/255)^2.2,(AL_DirLightColor.y/255)^2.2,(AL_DirLightColor.Z/255)^2.2,0
   set effect constant vector iEffect,"LightDirectionColor",Vector4(1)
   set effect constant float iEffect,"LightIntensity",AL_DirLightIntensity
   set effect constant float iEffect,"TerrainHeight",Terrain_Height/255
   set effect constant float iEffect,"TerrainTileSize",Terrain_TileSize*1000
endfunction

`----------------------------------------------------
` Lock Effect File to set Compilers #Define
`----------------------------------------------------
function Effect_LockFile(iFile as string)
   if fileexist(iFile)=1 and AL_SetDefineEnabled=0
      local tStr as string
      AL_SetDefineEnabled=1
      AL_SetDefineCount=-1
      AL_SetDefineLines=-1
      tFile=FreeUpFile()
      open to read tFile,iFile
         while file end(tFile)=0
            read string tFile,tStr
            if tStr<>""
               if left$(tStr,2)<>"//"
                  inc AL_SetDefineLines
                  if AL_SetDefineLines>AL_SetDefineArrayLines
                     array insert at bottom AL_SetDefineLine()
                     inc AL_SetDefineArrayLines
                  endif
                  AL_SetDefineLine(AL_SetDefineLines)=tStr
               endif
            endif
         endwhile
      close file tFile
   endif
endfunction

`----------------------------------------------------
` Set Define
`----------------------------------------------------
function Effect_SetDefine(iDefine as string,iValue as boolean)
   if AL_SetDefineEnabled=1
      inc AL_SetDefineCount
      if AL_SetDefineCount>AL_SetDefineArrayCount
         array insert at bottom AL_SetDefineDefine()
         array insert at bottom AL_SetDefineValue()
         inc AL_SetDefineArrayCount
      endif
      AL_SetDefineDefine(AL_SetDefineCount)=lower$(iDefine)
      AL_SetDefineValue(AL_SetDefineCount)=iValue
   endif
endfunction

`----------------------------------------------------
` UnLock Effect File
`----------------------------------------------------
function Effect_UnLockFile(iFile as string)
   if AL_SetDefineEnabled=1
      local tDefine as string
      tFile=FreeUpFile():tEx=0
      if fileexist(iFile)=1 then delete file iFile
      open to write tFile,iFile
         for l=0 to AL_SetDefineLines
            if tEx<2
               if left$(AL_SetDefineLine(l),7)="#define"
                  tDefine=right$(AL_SetDefineLine(l),len(AL_SetDefineLine(l))-8)
                  tDefine=left$(tDefine,len(tDefine)-2)
                  for i=0 to AL_SetDefineCount
                     if lower$(tDefine)=AL_SetDefineDefine(i) then AL_SetDefineLine(l)="#define "+tDefine+" "+str$(AL_SetDefineValue(i))
                  next i
                  tEx=1
               else
                  if tEx=1 then tEx=2
               endif
            endif
            write string tFile,AL_SetDefineLine(l)
         next l
      close file tFile
      AL_SetDefineEnabled=0
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_AlphaEffectData
   InUse as integer
   Effect as integer
   D3DEfx as dword
   LightColor as dword
   LightPosition as dword
   LightSpot as dword
endtype

`----------------------------------------------------
` Load Alpha Effect File
`----------------------------------------------------
function AlphaEffect_Load(iFile as string,iEffect as integer,iQuality as integer,iAnisotropy as integer,iDoNotGenerateExtraData as boolean)
   if effect exist(iEffect)=0 and fileexist(iFile)=1
      local tFile as string
      tFile=iFile
      reverse$ tFile
      a=find sub string$(tFile,"\")
      b=find sub string$(tFile,"/")
      if a>0 or b>0
         if b<a and b>0 then tFile=left$(tFile,b) else tFile=left$(tFile,a)
      endif
      reverse$ tFile
      tFile=AL_MydocDirectory+left$(tFile,len(tFile)-3)+str$(iQuality)+str$(iAnisotropy)+str$(iDoNotGenerateExtraData)+".fx"
      if fileexist(tFile)=0
         Effect_LockFile(iFile)
         if iQuality>0 then Effect_SetDefine("MEDIUM",1) else Effect_SetDefine("MEDIUM",0)
         if iQuality=2 then Effect_SetDefine("HIGH",1) else Effect_SetDefine("HIGH",0)
         if iAnisotropy=1 then Effect_SetDefine("Max1Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=2 then Effect_SetDefine("Max2Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=3 then Effect_SetDefine("Max3Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         Effect_SetDefine("GEOMETRY",iDoNotGenerateExtraData)
         Effect_UnLockFile(tFile)
      endif
      load effect tFile,iEffect,0,iDoNotGenerateExtraData
      tAlphaEffectAL=AlphaEffect_Add(iEffect)
   endif
endfunction tAlphaEffectAL

`----------------------------------------------------
` Add Alpha Effect
`----------------------------------------------------
function AlphaEffect_Add(iEffect as integer)
   tAlphaEffectAL=-1
   for e=AL_AlphaEffectFreeUp to AL_AlphaEffectCount
      if AL_AlphaEffect(e).InUse=0 then AL_AlphaEffectFreeUp=e:tAlphaEffectAL=e:exit
   next e
   if tAlphaEffectAL=-1
      array insert at bottom AL_AlphaEffect()
      inc AL_AlphaEffectCount
      tAlphaEffectAL=AL_AlphaEffectCount
      AL_AlphaEffectFreeUp=AL_AlphaEffectCount
   endif
   inc AL_AlphaEffectActiveCount
   array insert at bottom AL_AlphaEffectActive()
   AL_AlphaEffectActive(AL_AlphaEffectActiveCount)=tAlphaEffectAL
   AL_AlphaEffect(tAlphaEffectAL).InUse=1
   AL_AlphaEffect(tAlphaEffectAL).Effect=iEffect
   if AL_AlphaLightsObj=0
      AL_AlphaLightsObj=FreeUpObject(32500+rnd(16250))
      make object plain AL_AlphaLightsObj,0,0
      set object radius AL_AlphaLightsObj,9999^9999
      exclude object on AL_AlphaLightsObj
      hide object AL_AlphaLightsObj
      set object mask AL_AlphaLightsObj,0
   endif
   set object effect AL_AlphaLightsObj,iEffect
   AL_AlphaEffect(tAlphaEffectAL).D3DEfx=Object_GetShaderPtr(AL_AlphaLightsObj,0)
   AL_AlphaEffect(tAlphaEffectAL).LightColor=Shader_GetParameterByName(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,0,"LightColor")
   AL_AlphaEffect(tAlphaEffectAL).LightPosition=Shader_GetParameterByName(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,0,"LightPosition")
   AL_AlphaEffect(tAlphaEffectAL).LightSpot=Shader_GetParameterByName(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,0,"LightSpot")
   Effect_SetConstants(iEffect)
endfunction tAlphaEffectAL

`----------------------------------------------------
` Remove Alpha Effect
`----------------------------------------------------
function AlphaEffect_Remove(iAlphaEffectAL as integer)
   if AL_AlphaEffect(iAlphaEffectAL).InUse=1
      AL_AlphaEffect(iAlphaEffectAL).InUse=2
      AL_AlphaEffectRemove=1
   endif
endfunction

`----------------------------------------------------
`Vertex Lighting Update
   _VertexLight_UpDate:
      tSetLight=0
      Vector4Float(1).x=0
      inc AL_AlphaLightsUpdate
      if AL_AlphalightsUpdate>50
         AL_AlphalightsUpdate=0
         for l=1 to 24
            if AL_AlphaLights(l)=0
               tSetLight=l
               Vector4Float(1).x=9999999999
            else
               if AL_AlphaLights(l)<10000
                  tLight=AL_AlphaLights(l)-1
                  set vector3 Vector3(1),AL_CameraPos.x-AL_PointLight(tLight).Position.x,AL_CameraPos.y-AL_PointLight(tLight).Position.y,AL_CameraPos.z-AL_PointLight(tLight).Position.z
                  if AL_PointLight(tLight).Visible=0 then AL_AlphaLights(l)=0
                  if GetSphereInFrustum(0,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=0 then AL_AlphaLights(l)=0
               else
                  tLight=AL_AlphaLights(l)-10000
                  set vector3 Vector3(1),AL_CameraPos.x-AL_SpotLight(tLight).Position.x,AL_CameraPos.y-AL_SpotLight(tLight).Position.y,AL_CameraPos.z-AL_SpotLight(tLight).Position.z
                  if AL_SpotLight(tLight).Visible=0 then AL_AlphaLights(l)=0
                  if GetSphereInFrustum(0,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,AL_SpotLight(tLight).Range*0.75)=0 then AL_AlphaLights(l)=0
               endif
               AL_AlphaLightsDis(l)=length vector3(Vector3(1))
            endif
         next l
         if Vector4Float(1).x=0
            for l=1 to 24
               if AL_AlphaLightsDis(l)>Vector4Float(1).x then tSetLight=l:Vector4Float(1).x=AL_AlphaLightsDis(l)
            next l
         endif
         if tSetLight>0
            for l=0 to AL_PointLightVisibleCount
               tLight=AL_PointLightVisible(l)-1
               if AL_PointLight(tLight).Visible=1
                  if InDistance(AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,Vector4Float(1).x)=1
                     if GetSphereInFrustum(0,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
                        Addlight=0
                        for t=1 to 32
                           if AL_AlphaLights(t)=tLight+1 then Addlight=1:exit
                        next t
                        if Addlight=0
                           AL_AlphaLights(tSetLight)=tLight+1
                           exit
                        endif
                     endif
                  endif
               endif
            next l
            for l=0 to AL_SpotLightVisibleCount
               tLight=AL_SpotLightVisible(l)-1
               if AL_SpotLight(tLight).Visible=1
                  if InDistance(AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,Vector4Float(1).x)=1
                     if GetSphereInFrustum(0,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,AL_SpotLight(tLight).Range*0.75)=1
                        Addlight=0
                        for t=1 to 32
                           if AL_AlphaLights(t)=tLight+10000 then Addlight=1:exit
                        next t
                        if Addlight=0
                           AL_AlphaLights(tSetLight)=tLight+10000
                           exit
                        endif
                     endif
                  endif
               endif
            next l
         endif
      endif
      for e=0 to AL_AlphaEffectActiveCount
         tAlphaEffectAL=AL_AlphaEffectActive(e)
         set effect constant float AL_AlphaEffect(tAlphaEffectAL).Effect,"Timer",AL_TimerINC/10000
         set effect constant float AL_AlphaEffect(tAlphaEffectAL).Effect,"Lighting1",AL_ReflectionLight.z*(1-(AL_ReflectionLightTransition/100))
         set effect constant float AL_AlphaEffect(tAlphaEffectAL).Effect,"Lighting2",AL_ReflectionLight.w*(AL_ReflectionLightTransition/100)
         tLightIndex=0
         for l=1 to 24
            if AL_AlphaLights(l)>0
               tLightColor=Shader_GetParameterElement(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,AL_AlphaEffect(tAlphaEffectAL).LightColor,tLightIndex)
               tLightPosition=Shader_GetParameterElement(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,AL_AlphaEffect(tAlphaEffectAL).LightPosition,tLightIndex)
               tLightSpot=Shader_GetParameterElement(AL_AlphaEffect(tAlphaEffectAL).D3DEfx,AL_AlphaEffect(tAlphaEffectAL).LightSpot,tLightIndex)
               if AL_AlphaLights(l)<10000
                  tLight=AL_AlphaLights(l)-1
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightColor,(AL_PointLight(tLight).Color.x/255)^2.2,(AL_PointLight(tLight).Color.y/255)^2.2,(AL_PointLight(tLight).Color.z/255)^2.2,AL_PointLight(tLight).Intensity*(1+(AL_PointLight(tLight).Range/220))
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightPosition,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightSpot,0,0,0,-1000
               else
                  tLight=AL_AlphaLights(l)-10000
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightColor,(AL_SpotLight(tLight).Color.x/255)^2.2,(AL_SpotLight(tLight).Color.y/255)^2.2,(AL_SpotLight(tLight).Color.z/255)^2.2,AL_SpotLight(tLight).Intensity*(1+(AL_SpotLight(tLight).Range/220))
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightPosition,AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range
                  Shader_SetVectorVal AL_AlphaEffect(tAlphaEffectAL).D3DEfx,tLightSpot,AL_SpotLight(tLight).Normal.x,AL_SpotLight(tLight).Normal.y,AL_SpotLight(tLight).Normal.z,1-(0.25*tan(AL_SpotLight(tLight).FOV/2))
               endif
               inc tLightIndex
            endif
         next l
         set effect constant integer AL_AlphaEffect(tAlphaEffectAL).Effect,"LightCount",tLightIndex
      next e
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_WaterEffectData
   InUse as integer
   Effect as integer
endtype

`----------------------------------------------------
` Load Water Effect File
`----------------------------------------------------
function WaterEffect_Load(iFile as string,iEffect as integer,iQuality as integer,iAnisotropy as integer)
   if effect exist(iEffect)=0 and fileexist(iFile)=1
      local tFile as string
      tFile=iFile
      reverse$ tFile
      a=find sub string$(tFile,"\")
      b=find sub string$(tFile,"/")
      if a>0 or b>0
         if b<a and b>0 then tFile=left$(tFile,b) else tFile=left$(tFile,a)
      endif
      reverse$ tFile
      tFile=AL_MydocDirectory+left$(tFile,len(tFile)-3)+str$(iQuality)+str$(iAnisotropy)+".fx"
      if fileexist(tFile)=0
         Effect_LockFile(iFile)
         if iQuality>0 then Effect_SetDefine("MEDIUM",1) else Effect_SetDefine("MEDIUM",0)
         if iQuality=2 then Effect_SetDefine("HIGH",1) else Effect_SetDefine("HIGH",0)
         if iAnisotropy=1 then Effect_SetDefine("Max1Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=2 then Effect_SetDefine("Max2Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         if iAnisotropy=3 then Effect_SetDefine("Max3Anisotropy",1) else Effect_SetDefine("Max1Anisotropy",0)
         Effect_UnLockFile(tFile)
      endif
      load effect tFile,iEffect,0,1
      tWaterEffectAL=WaterEffect_Add(iEffect)
   endif
endfunction tWaterEffectAL

`----------------------------------------------------
` Add Water Effect
`----------------------------------------------------
function WaterEffect_Add(iEffect as integer)
   tWaterEffectAL=-1
   for e=AL_WaterEffectFreeUp to AL_WaterEffectCount
      if AL_WaterEffect(e).InUse=0 then AL_WaterEffectFreeUp=e:tWaterEffectAL=e:exit
   next e
   if tWaterEffectAL=-1
      array insert at bottom AL_WaterEffect()
      inc AL_WaterEffectCount
      tWaterEffectAL=AL_WaterEffectCount
      AL_WaterEffectFreeUp=AL_WaterEffectCount
   endif
   inc AL_WaterEffectActiveCount
   array insert at bottom AL_WaterEffectActive()
   AL_WaterEffectActive(AL_WaterEffectActiveCount)=tWaterEffectAL
   AL_WaterEffect(tWaterEffectAL).InUse=1
   AL_WaterEffect(tWaterEffectAL).Effect=iEffect
   Effect_SetConstants(iEffect)
endfunction tWaterEffectAL

`----------------------------------------------------
` Remove Water Effect
`----------------------------------------------------
function WaterEffect_Remove(iWaterEffectAL as integer)
   if AL_WaterEffect(iWaterEffectAL).InUse=1
      AL_WaterEffect(iWaterEffectAL).InUse=2
      AL_WaterEffectRemove=1
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_ObjectData
   InUse as integer
   Object as integer
   Bounds as integer
   Visible as boolean
   Animation as boolean
   Position as Vec3Float
   Scale as Vec3Float
   Radius as float
   Size as Vec3Float
   AtualSize as Vec3Float
   Angle as Vec3Float
   Center as Vec3Float
   Mask as integer
   MaskAdvLighting as boolean
   MaskShadow as boolean
   MaskDirectionalShadow as integer
   ReflectionCapture as boolean
   LODObject as integer
   Batched as integer
   Imposter as integer
   ImposterInstance as integer
   ImposterEnabled as boolean
   Dynamic as integer
   DynamicEnabled as boolean
   MotionBlur as integer
   MotionBlurEffect as integer
   MotionBlurVertex as integer
   pEffect as Dword
   pMotionBlur as Dword
endtype

type AL_DynamicObjectData
   InUse as integer
   Object as integer
   ObjectType as boolean
   ObjectAL as integer
   Update as boolean
   Updated as integer
   Position as Vec3Integer
   Angle as Vec3Integer
   Size as Vec3Integer
   UpdateTimer as integer
endtype

`----------------------------------------------------
` Create Quad for render targets
`----------------------------------------------------
function Object_CreateTarget(iObject as integer,iEffect as integer,iEffectFile as string)
   make object plane iObject,2,2,1
   set object radius iObject,9999^9999
   load effect iEffectFile,iEffect,0,1
   set object effect iObject,iEffect
   disable object zwrite iObject
endfunction

`----------------------------------------------------
` Add Object
`----------------------------------------------------
function Object_Add(iObject as integer)
   tObjectAL=-1
   for o=AL_ObjectFreeUp to AL_ObjectCount
      if AL_Object(o).InUse=0 then tObjectAL=o:exit
   next o
   if tObjectAL=-1
      tObjectAL=AL_ObjectCount+1
      AL_ObjectCount=AL_ObjectCount+1000
      dim AL_Object(AL_ObjectCount)
      dim AL_ObjectAnimation(AL_ObjectCount)
   endif
   AL_ObjectFreeUp=tObjectAL
   inc AL_ObjectActiveCount
   array insert at bottom AL_ObjectActive()
   AL_ObjectActive(AL_ObjectActiveCount)=tObjectAL
   AL_Object(tObjectAL).InUse=1
   AL_Object(tObjectAL).Object=iObject
   AL_Object(tObjectAL).Visible=1
   AL_Object(tObjectAL).Mask=0
   AL_Object(tObjectAL).Dynamic=-1
   AL_Object(tObjectAL).DynamicEnabled=0
   AL_Object(tObjectAL).MotionBlur=-1
   AL_Object(tObjectAL).LODObject=-1
   AL_Object(tObjectAL).Imposter=-1
   AL_Object(tObjectAL).ImposterInstance=-1
   AL_Object(tObjectAL).ImposterEnabled=0
   AL_Object(tObjectAL).Batched=-1
   AL_Object(tObjectAL).Bounds=FrustumCulling_AddBounds(iObject,0)
   set object radius iObject,9999^9999
   exclude object on iObject
   Object_Update(tObjectAL)
   Object_SetMask(tObjectAL,1,1,4,1)
endfunction tObjectAL

`----------------------------------------------------
` Remove Object
`----------------------------------------------------
function Object_Remove(iObjectAL as integer)
   if AL_Object(iObjectAL).InUse=1
      LOD_Remove(iObjectAL)
      Object_SetDynamic(iObjectAL,0)
      Object_SetMotionBlur(iObjectAL,-1,0)
      FrustumCulling_RemoveBounds(AL_Object(iObjectAL).Bounds)
      AL_Object(iObjectAL).InUse=2
      AL_ObjectRemove=1
   endif
endfunction

`----------------------------------------------------
` Set Visible
`----------------------------------------------------
function Object_SetVisible(iObjectAL as integer,iVisible as boolean)
   if AL_Object(iObjectAL).InUse=1
      if AL_Object(iObjectAL).Visible<>iVisible
         AL_Object(iObjectAL).Visible=iVisible
         if AL_Object(iObjectAL).ImposterEnabled=0
            FrustumCulling_SetBoundsVisible(AL_Object(iObjectAL).Bounds,iVisible)
            if AL_Object(iObjectAL).DynamicEnabled=1
               Object_SetDynamic(iObjectAL,iVisible)
               AL_Object(iObjectAL).DynamicEnabled=1
            endif
         else
            if AL_Object(iObjectAL).Visible=0 and AL_Object(iObjectAL).ImposterInstance>-1 then Imposter_Remove(AL_Object(iObjectAL).ImposterInstance)
            if AL_Object(iObjectAL).Visible=1 and AL_Object(iObjectAL).ImposterInstance=-1
               AL_Object(iObjectAL).ImposterInstance=Imposter_Add(AL_Object(iObjectAL).Imposter)
               Imposter_SetPosition(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z)
               Imposter_SetAngle(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z)
               Imposter_SetScale(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z)
            endif
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Object Set Mask
`----------------------------------------------------
function Object_SetMask(iObjectAL as integer,iAdvLighting as boolean,iShadow as boolean,iDirectionalShadow as integer,iReflectionCapture as boolean)
   if AL_Object(iObjectAL).InUse=1
      AL_Object(iObjectAL).MaskAdvLighting=iAdvLighting
      AL_Object(iObjectAL).MaskShadow=iShadow
      AL_Object(iObjectAL).MaskDirectionalShadow=iDirectionalShadow
      AL_Object(iObjectAL).ReflectionCapture=iReflectionCapture
      VFC_Bounds(AL_Object(iObjectAL).Bounds).Shadow=AL_Object(iObjectAL).MaskShadow
      VFC_Bounds(AL_Object(iObjectAL).Bounds).DirectionalShadow=AL_Object(iObjectAL).MaskDirectionalShadow
      if iAdvLighting=1 then tMask=2^AL_Camera(1)
      if iDirectionalShadow>0 then tMask=tMask+(2^AL_DirLightCamera(1))+(2^AL_DirLightCamera(2))
      if iShadow=1
         for c=1 to 6:tMask=tMask+(2^AL_SpotLightCamera(c)):next c
      endif
      if AL_PostFilter=1 then tMask=tMask+1
      AL_Object(iObjectAL).Mask=tMask
      if object exist(AL_Object(iObjectAL).Object)=1 then set object mask AL_Object(iObjectAL).Object,AL_Object(iObjectAL).Mask
   endif
endfunction

`----------------------------------------------------
` Object Set Draw Distance
`----------------------------------------------------
function Object_SetDrawDistance(iObjectAL as integer,iDistance as float)
   if AL_Object(iObjectAL).InUse=1 then FrustumCulling_SetDrawDistance(AL_Object(iObjectAL).Bounds,iDistance)
endfunction

`----------------------------------------------------
` Object Set Occluder
`----------------------------------------------------
function Object_SetOccluder(iObjectAL as integer,iObject as integer)
   if AL_Object(iObjectAL).InUse=1 then Occlusion_SetObject(AL_Object(iObjectAL).Bounds,iObject)
endfunction

`----------------------------------------------------
` Object Set Dynamic
`----------------------------------------------------
function Object_SetDynamic(iObjectAL as integer,iDynamic as integer)
   if AL_Object(iObjectAL).InUse=1
      tBounds=AL_Object(iObjectAL).Bounds
      if AL_Object(iObjectAL).Dynamic=-1 and iDynamic=1
         tObjectDynamic=-1
         for o=AL_ObjectDynamicFreeUp to AL_ObjectDynamicCount
            if AL_ObjectDynamic(o).InUse=0 then tObjectDynamic=o:exit
         next o
         if tObjectDynamic=-1
            tObjectDynamic=AL_ObjectDynamicCount+1
            AL_ObjectDynamicCount=AL_ObjectDynamicCount+1000
            dim AL_ObjectDynamic(AL_ObjectDynamicCount)
         endif
         AL_ObjectDynamicFreeUp=tObjectDynamic
         inc AL_ObjectDynamicActiveCount
         array insert at bottom AL_ObjectDynamicActive()
         AL_ObjectDynamicActive(AL_ObjectDynamicActiveCount)=tObjectDynamic
         AL_ObjectDynamic(tObjectDynamic).InUse=1
         AL_ObjectDynamic(tObjectDynamic).ObjectType=0
         AL_ObjectDynamic(tObjectDynamic).Object=AL_Object(iObjectAL).Object
         AL_ObjectDynamic(tObjectDynamic).ObjectAL=iObjectAL
         AL_ObjectDynamic(tObjectDynamic).Update=0
         AL_Object(iObjectAL).Dynamic=tObjectDynamic
         AL_Object(iObjectAL).DynamicEnabled=1
      endif
      if AL_Object(iObjectAL).Dynamic>-1 and iDynamic<>1
         tObjectDynamic=AL_Object(iObjectAL).Dynamic
         AL_ObjectDynamic(tObjectDynamic).InUse=2
         AL_Object(iObjectAL).Dynamic=-1
         AL_Object(iObjectAL).DynamicEnabled=0
         AL_ObjectDynamicRemove=1
      endif
      if iDynamic>0 then VFC_Bounds(tBounds).Dynamic=1 else VFC_Bounds(tBounds).Dynamic=0
   endif
endfunction

`----------------------------------------------------
` Object Set Motion Blur
`----------------------------------------------------
function Object_SetMotionBlur(iObjectAL as integer,iEffectAL as integer,iSkeletal as boolean)
   local pObject as dword
   local pMesh as dword
   local pMeshLimb as dword
   local pVertex as dword
   if AL_MotionBlur=1
      if iEffectAL>-1
         if AL_Object(iObjectAL).InUse=1 and AL_Object(iObjectAL).MotionBlur=-1
            tMotionBlur=-1
            for i=0 to 239
               if PeekInteger(AL_Effect(iEffectAL).pMotionVec+(i*4))=0 then tMotionBlur=i:exit
            next i
            if tMotionBlur>-1
               PokeInteger(AL_Effect(iEffectAL).pMotionVec+(tMotionBlur*4),iObjectAL+1)
               AL_Object(iObjectAL).MotionBlur=tMotionBlur
               AL_Object(iObjectAL).MotionBlurEffect=iEffectAL
               AL_Object(iObjectAL).MotionBlurVertex=0
               texture object AL_Object(iObjectAL).Object,5,AL_ImageMRT(1)
               texture object AL_Object(iObjectAL).Object,6,AL_Image(7)
               AL_Object(iObjectAL).pEffect=Object_GetShaderPtr(AL_Object(iObjectAL).Object,0)
               pElement=Shader_GetParameterByName(AL_Object(iObjectAL).pEffect,0,"MotionBlur")
               AL_Object(iObjectAL).pMotionBlur=Shader_GetParameterElement(AL_Object(iObjectAL).pEffect,pElement,AL_Object(iObjectAL).MotionBlur)
               pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_Object(iObjectAL).Object)
               pMesh=PeekDword(pObject+8)
               for l=0 to PeekInteger(pObject)-1
                  pMeshLimb=PeekDword(pMesh+(l*4))
                  if pMeshLimb>0
                     tFVFSize=PeekInteger(pMeshLimb+8)
                     pVertex=PeekDword(pMeshLimb+20)
                     for v=0 to PeekInteger(pMeshLimb+28)-1
                        if iSkeletal=0
                           PokeFloat(pVertex+(v*tFVFSize)+(tFVFSize-12),AL_Object(iObjectAL).MotionBlurVertex)
                           PokeFloat(pVertex+(v*tFVFSize)+(tFVFSize-8),AL_Object(iObjectAL).MotionBlur)
                        else
                           PokeFloat(pVertex+(v*tFVFSize)+(tFVFSize-44),AL_Object(iObjectAL).MotionBlurVertex)
                           PokeFloat(pVertex+(v*tFVFSize)+(tFVFSize-40),AL_Object(iObjectAL).MotionBlur)
                        endif
                        inc AL_Object(iObjectAL).MotionBlurVertex
                     next v
                  endif
                  PokeByte2(pMeshLimb+1000,1)
               next l
            endif
         endif
      else
         if AL_Object(iObjectAL).MotionBlur>-1
            tEffectAL=AL_Object(iObjectAL).MotionBlurEffect
            PokeInteger(AL_Effect(tEffectAL).pMotionVec+(AL_Object(iObjectAL).MotionBlur*4),0)
            AL_Object(iObjectAL).MotionBlur=-1
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Set Limb Cull
`----------------------------------------------------
function Object_SetLimbCull(iObject as integer,iLimb as integer,iCull as boolean)
   if object exist(iObject)=1
      pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",iObject)
      pMesh=PeekDword(pObject+8)
      if iLimb>-1 and iLimb<PeekInteger(pObject)
         pMeshIndex=PeekDword(pMesh+(iLimb*4))
         PokeByte3(pMeshIndex+1036,iCull)
      endif
   endif
endfunction

`----------------------------------------------------
` Object Update
`----------------------------------------------------
function Object_Update(iObjectAL as integer)
   if AL_Object(iObjectAL).InUse=1
      if AL_Object(iObjectAL).Animation=0
         inc AL_ObjectAnimationCount
         AL_ObjectAnimation(AL_ObjectAnimationCount)=iObjectAL
         AL_Object(iObjectAL).Animation=1
      endif
      if AL_Object(iObjectAL).Dynamic=-1
         if object exist(AL_Object(iObjectAL).Object)=1
            GetObjectBounds(AL_Object(iObjectAL).Object)
            if AL_Object(iObjectAL).MaskShadow=1 and AL_Object(iObjectAL).DynamicEnabled=0
               Object_GetShadows(Vector4Float(1).x+Vector4Float(5).x,Vector4Float(1).y+Vector4Float(5).y,Vector4Float(1).z+Vector4Float(5).z,AL_Object(iObjectAL).Center.x,AL_Object(iObjectAL).Center.y,AL_Object(iObjectAL).Center.z,AL_Object(iObjectAL).Scale.x,AL_Object(iObjectAL).Scale.y,AL_Object(iObjectAL).Scale.z,AL_Object(iObjectAL).Radius,1)
            endif
            AL_Object(iObjectAL).Position.x=Vector4Float(1).x
            AL_Object(iObjectAL).Position.y=Vector4Float(1).y
            AL_Object(iObjectAL).Position.z=Vector4Float(1).z
            AL_Object(iObjectAL).Center.x=Vector4Float(1).x+Vector4Float(5).x
            AL_Object(iObjectAL).Center.y=Vector4Float(1).y+Vector4Float(5).y
            AL_Object(iObjectAL).Center.z=Vector4Float(1).z+Vector4Float(5).z
            AL_Object(iObjectAL).Scale.x=Vector4Float(3).x
            AL_Object(iObjectAL).Scale.y=Vector4Float(3).y
            AL_Object(iObjectAL).Scale.z=Vector4Float(3).z
            AL_Object(iObjectAL).Radius=Vector4Float(3).w
            AL_Object(iObjectAL).Size.x=Vector4Float(4).x
            AL_Object(iObjectAL).Size.y=Vector4Float(4).y
            AL_Object(iObjectAL).Size.z=Vector4Float(4).z
            AL_Object(iObjectAL).AtualSize.x=Vector4Float(0).x
            AL_Object(iObjectAL).AtualSize.y=Vector4Float(0).y
            AL_Object(iObjectAL).AtualSize.z=Vector4Float(0).z
            AL_Object(iObjectAL).Angle.x=Vector4Float(2).x
            AL_Object(iObjectAL).Angle.y=Vector4Float(2).y
            AL_Object(iObjectAL).Angle.z=Vector4Float(2).z
            FrustumCulling_SetBounds(AL_Object(iObjectAL).Bounds,AL_Object(iObjectAL).Center.x,AL_Object(iObjectAL).Center.y,AL_Object(iObjectAL).Center.z,AL_Object(iObjectAL).Scale.x,AL_Object(iObjectAL).Scale.y,AL_Object(iObjectAL).Scale.z)
            Occlusion_SetObjectTransform(AL_Object(iObjectAL).Bounds,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z)
            if AL_Object(iObjectAL).ImposterInstance>-1
               Imposter_SetPosition(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z)
               Imposter_SetAngle(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z)
               Imposter_SetScale(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z)
            endif
            if AL_Object(iObjectAL).Batched>-1
               ObjectBatch_SetPosition(AL_Object(iObjectAL).Batched,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z)
               ObjectBatch_SetAngle(AL_Object(iObjectAL).Batched,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z)
               ObjectBatch_SetScale(AL_Object(iObjectAL).Batched,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z)
            endif
         endif
      else
         AL_ObjectDynamic(AL_Object(iObjectAL).Dynamic).Position.x=AL_ObjectDynamic(AL_Object(iObjectAL).Dynamic).Position.x-99
      endif
   endif
endfunction

`----------------------------------------------------
` Object Get Mask
`----------------------------------------------------
function Object_GetMask(iObjectAL as integer)
   if AL_Object(iObjectAL).InUse=1
      rVal=AL_Object(iObjectAL).Mask
      exitfunction rVal
   endif
endfunction 0

`----------------------------------------------------
`Object Show
   _Objects_Show:
      for x=0 to VFC_VisibleCount(0)
         exclude object off VFC_Bounds(VFC_Visible(x,0)).Handel
      next x
   return

`----------------------------------------------------
`Object Hide
   _Objects_Hide:
      for x=0 to VFC_VisibleCount(0)
         exclude object on VFC_Bounds(VFC_Visible(x,0)).Handel
      next x
   return

`----------------------------------------------------
`Animation Objects Show
   _Objects_ShowAnimation:
      for x=0 to AL_ObjectAnimationCount
         tObjectAL=AL_ObjectAnimation(x)
         if object exist(AL_Object(tObjectAL).Object)=1 then exclude object off AL_Object(tObjectAL).Object
      next x
   return

`----------------------------------------------------
`Animation Objects Hide
   _Objects_HideAnimation:
      for x=0 to AL_ObjectAnimationCount
         tObjectAL=AL_ObjectAnimation(x)
         if object exist(AL_Object(tObjectAL).Object)=1 then exclude object on AL_Object(tObjectAL).Object
         AL_Object(tObjectAL).Animation=0
      next x
      AL_ObjectAnimationCount=-1
   return

`----------------------------------------------------
`Object Update
   _Objects_Update:
      AL_ObjectDynamicMVCount=0
      for o=0 to AL_ObjectDynamicActiveCount
         tDynamic=AL_ObjectDynamicActive(o)
         tDifference=0
         Vector4Float(5).x=object position x(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(5).y=object position y(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(5).z=object position z(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(6).x=object angle x(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(6).y=object angle y(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(6).z=object angle z(AL_ObjectDynamic(tDynamic).Object)
         Vector4Float(7).x=object size x(AL_ObjectDynamic(tDynamic).Object,1)
         Vector4Float(7).y=object size y(AL_ObjectDynamic(tDynamic).Object,1)
         Vector4Float(7).z=object size z(AL_ObjectDynamic(tDynamic).Object,1)
         if AL_ObjectDynamic(tDynamic).Position.x<>int(Vector4Float(5).x/AL_WorldSize) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Position.y<>int(Vector4Float(5).y/AL_WorldSize) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Position.z<>int(Vector4Float(5).z/AL_WorldSize) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Angle.x<>int(Vector4Float(6).x) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Angle.y<>int(Vector4Float(6).y) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Angle.z<>int(Vector4Float(6).z) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Size.x<>int(Vector4Float(7).x/AL_WorldSize) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Size.y<>int(Vector4Float(7).y/AL_WorldSize) then tDifference=1
         if AL_ObjectDynamic(tDynamic).Size.z<>int(Vector4Float(7).z/AL_WorldSize) then tDifference=1
         if tDifference=1
            AL_ObjectDynamic(tDynamic).UpdateTimer=10
            AL_ObjectDynamic(tDynamic).Position.x=int(Vector4Float(5).x/AL_WorldSize)
            AL_ObjectDynamic(tDynamic).Position.y=int(Vector4Float(5).y/AL_WorldSize)
            AL_ObjectDynamic(tDynamic).Position.z=int(Vector4Float(5).z/AL_WorldSize)
            AL_ObjectDynamic(tDynamic).Angle.x=int(Vector4Float(6).x)
            AL_ObjectDynamic(tDynamic).Angle.y=int(Vector4Float(6).y)
            AL_ObjectDynamic(tDynamic).Angle.z=int(Vector4Float(6).z)
            AL_ObjectDynamic(tDynamic).Size.x=int(Vector4Float(7).x/AL_WorldSize)
            AL_ObjectDynamic(tDynamic).Size.y=int(Vector4Float(7).y/AL_WorldSize)
            AL_ObjectDynamic(tDynamic).Size.z=int(Vector4Float(7).z/AL_WorldSize)
            if AL_ObjectDynamic(tDynamic).ObjectType=0
               tObjectAL=AL_ObjectDynamic(tDynamic).ObjectAL
               GetObjectBounds(AL_Object(tObjectAL).Object)
               if AL_Object(tObjectAL).MaskShadow=1 then Object_GetShadows(Vector4Float(1).x+Vector4Float(5).x,Vector4Float(1).y+Vector4Float(5).y,Vector4Float(1).z+Vector4Float(5).z,AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_Object(tObjectAL).Scale.x,AL_Object(tObjectAL).Scale.y,AL_Object(tObjectAL).Scale.z,AL_Object(tObjectAL).Radius,0)
               AL_Object(tObjectAL).Position.x=Vector4Float(1).x
               AL_Object(tObjectAL).Position.y=Vector4Float(1).y
               AL_Object(tObjectAL).Position.z=Vector4Float(1).z
               AL_Object(tObjectAL).Center.x=Vector4Float(1).x+Vector4Float(5).x
               AL_Object(tObjectAL).Center.y=Vector4Float(1).y+Vector4Float(5).y
               AL_Object(tObjectAL).Center.z=Vector4Float(1).z+Vector4Float(5).z
               AL_Object(tObjectAL).Scale.x=Vector4Float(3).x
               AL_Object(tObjectAL).Scale.y=Vector4Float(3).y
               AL_Object(tObjectAL).Scale.z=Vector4Float(3).z
               AL_Object(tObjectAL).Radius=Vector4Float(3).w
               AL_Object(tObjectAL).Size.x=Vector4Float(4).x
               AL_Object(tObjectAL).Size.y=Vector4Float(4).y
               AL_Object(tObjectAL).Size.z=Vector4Float(4).z
               AL_Object(tObjectAL).AtualSize.x=Vector4Float(0).x
               AL_Object(tObjectAL).AtualSize.y=Vector4Float(0).y
               AL_Object(tObjectAL).AtualSize.z=Vector4Float(0).z
               AL_Object(tObjectAL).Angle.x=Vector4Float(2).x
               AL_Object(tObjectAL).Angle.y=Vector4Float(2).y
               AL_Object(tObjectAL).Angle.z=Vector4Float(2).z
               FrustumCulling_SetBounds(AL_Object(tObjectAL).Bounds,AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_Object(tObjectAL).Scale.x,AL_Object(tObjectAL).Scale.y,AL_Object(tObjectAL).Scale.z)
               Occlusion_SetObjectTransform(AL_Object(tObjectAL).Bounds,AL_Object(tObjectAL).Position.x,AL_Object(tObjectAL).Position.y,AL_Object(tObjectAL).Position.z,AL_Object(tObjectAL).Size.x,AL_Object(tObjectAL).Size.y,AL_Object(tObjectAL).Size.z,AL_Object(tObjectAL).Angle.x,AL_Object(tObjectAL).Angle.y,AL_Object(tObjectAL).Angle.z)
               if AL_Object(tObjectAL).ImposterInstance>-1
                  Imposter_SetPosition(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Position.x,AL_Object(tObjectAL).Position.y,AL_Object(tObjectAL).Position.z)
                  Imposter_SetAngle(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Angle.x,AL_Object(tObjectAL).Angle.y,AL_Object(tObjectAL).Angle.z)
                  Imposter_SetScale(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Size.x,AL_Object(tObjectAL).Size.y,AL_Object(tObjectAL).Size.z)
               endif
               if AL_Object(tObjectAL).Batched>-1
                  ObjectBatch_SetPosition(AL_Object(tObjectAL).Batched,AL_Object(tObjectAL).Position.x,AL_Object(tObjectAL).Position.y,AL_Object(tObjectAL).Position.z)
                  ObjectBatch_SetAngle(AL_Object(tObjectAL).Batched,AL_Object(tObjectAL).Angle.x,AL_Object(tObjectAL).Angle.y,AL_Object(tObjectAL).Angle.z)
                  ObjectBatch_SetScale(AL_Object(tObjectAL).Batched,AL_Object(tObjectAL).Size.x,AL_Object(tObjectAL).Size.y,AL_Object(tObjectAL).Size.z)
               endif
               if AL_Object(tObjectAL).MotionBlur>-1
                  tVis=0
                  if InDistance(AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,AL_Object(tObjectAL).Radius*8)=1
                     if GetSphereInFrustum(0,AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_Object(tObjectAL).Radius)=1
                        tVis=16
                        if AL_ObjectDynamic(tDynamic).Update=0 then AL_ObjectDynamic(tDynamic).Update=1
                     endif
                  endif
                  if AL_ObjectDynamic(tDynamic).Update=1 and tVis=0
                     AL_ObjectDynamic(tDynamic).Update=0
                     set object mask AL_Object(tObjectAL).Object,AL_Object(tObjectAL).Mask
                  endif
               endif
            else
               tAlphaObjectAL=AL_ObjectDynamic(tDynamic).ObjectAL
               GetObjectBounds(AL_AlphaObject(tAlphaObjectAL).Object)
               AL_AlphaObject(tAlphaObjectAL).Position.x=Vector4Float(1).x
               AL_AlphaObject(tAlphaObjectAL).Position.y=Vector4Float(1).y
               AL_AlphaObject(tAlphaObjectAL).Position.z=Vector4Float(1).z
               AL_AlphaObject(tAlphaObjectAL).Center.x=Vector4Float(1).x+Vector4Float(5).x
               AL_AlphaObject(tAlphaObjectAL).Center.y=Vector4Float(1).y+Vector4Float(5).y
               AL_AlphaObject(tAlphaObjectAL).Center.z=Vector4Float(1).z+Vector4Float(5).z
               AL_AlphaObject(tAlphaObjectAL).Scale.x=Vector4Float(3).x
               AL_AlphaObject(tAlphaObjectAL).Scale.y=Vector4Float(3).y
               AL_AlphaObject(tAlphaObjectAL).Scale.z=Vector4Float(3).z
               AL_AlphaObject(tAlphaObjectAL).Radius=Vector4Float(3).w
               AL_AlphaObject(tAlphaObjectAL).Size.x=Vector4Float(4).x
               AL_AlphaObject(tAlphaObjectAL).Size.y=Vector4Float(4).y
               AL_AlphaObject(tAlphaObjectAL).Size.z=Vector4Float(4).z
               AL_AlphaObject(tAlphaObjectAL).AtualSize.x=Vector4Float(0).x
               AL_AlphaObject(tAlphaObjectAL).AtualSize.y=Vector4Float(0).y
               AL_AlphaObject(tAlphaObjectAL).AtualSize.z=Vector4Float(0).z
               AL_AlphaObject(tAlphaObjectAL).Angle.x=Vector4Float(2).x
               AL_AlphaObject(tAlphaObjectAL).Angle.y=Vector4Float(2).y
               AL_AlphaObject(tAlphaObjectAL).Angle.z=Vector4Float(2).z
               FrustumCulling_SetBounds(AL_AlphaObject(tAlphaObjectAL).Bounds,AL_AlphaObject(tAlphaObjectAL).Center.x,AL_AlphaObject(tAlphaObjectAL).Center.y,AL_AlphaObject(tAlphaObjectAL).Center.z,AL_AlphaObject(tAlphaObjectAL).Scale.x,AL_AlphaObject(tAlphaObjectAL).Scale.y,AL_AlphaObject(tAlphaObjectAL).Scale.z)
            endif
         else
            if AL_ObjectDynamic(tDynamic).Update=1
               AL_ObjectDynamic(tDynamic).Update=0
               tObject=AL_ObjectDynamic(tDynamic).ObjectAL
               if AL_Object(tObject).MotionBlur>-1 then set object mask AL_Object(tObject).Object,AL_Object(tObject).Mask
            endif
         endif
         if AL_ObjectDynamic(tDynamic).Update>0
            AL_ObjectDynamic(AL_ObjectDynamicMVCount).Updated=tDynamic
            inc AL_ObjectDynamicMVCount
         endif
      next o
   return

`----------------------------------------------------
` Update Shadow Maps
`----------------------------------------------------
function Object_GetShadows(iX as float,iY as float,iZ as float,iOx as float,ioy as float,ioz as float,iSx as float,iSy as float,iSz as float,iR as float,iMode as boolean)
   AL_LightVec(1).x=iX:AL_LightVec(1).y=iY:AL_LightVec(1).z=iZ
   AL_LightVec(2).x=iOx:AL_LightVec(2).y=iOy:AL_LightVec(2).z=iOz
   for d=1 to 15
      tLight=AL_SpotShadowMap(d).Light-1
      if tLight>-1 and AL_SpotShadowMap(d).Update<>3
         AL_LightVec(4).x=iSx+(AL_SpotLight(tLight).Range*1.5)
         AL_LightVec(4).y=iSy+(AL_SpotLight(tLight).Range*1.5)
         AL_LightVec(4).z=iSz+(AL_SpotLight(tLight).Range*1.5)
         for c=1 to 2
            if InDistance(AL_LightVec(c).x,AL_LightVec(c).y,AL_LightVec(c).z,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,iR+AL_SpotLight(tLight).Range*0.6)=1
               if BoxCollision(AL_LightVec(c).x,AL_LightVec(c).y,AL_LightVec(c).z,AL_SpotLight(tLight).PositionCenter.x,AL_SpotLight(tLight).PositionCenter.y,AL_SpotLight(tLight).PositionCenter.z,AL_LightVec(4).x,AL_LightVec(4).y,AL_LightVec(4).z)=1
                  if GetSphereInFrustum(d,AL_LightVec(c).x,AL_LightVec(c).y,AL_LightVec(c).z,iR)=1
                     if iMode=0 then AL_SpotShadowMap(d).Update=4 else AL_SpotShadowMap(d).Update=3
                  endif
               endif
            endif
         next c
      endif
   next d
   for d=1 to 15
      tLight=AL_PointShadowMap(d).Light-1
      if tLight>-1
         AL_LightVec(4).x=iSx+(AL_PointLight(tLight).Range*2)
         AL_LightVec(4).y=iSy+(AL_PointLight(tLight).Range*2)
         AL_LightVec(4).z=iSz+(AL_PointLight(tLight).Range*2)
         for c=1 to 2
            if InDistance(AL_LightVec(c).x,AL_LightVec(c).y,AL_LightVec(c).z,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,iR+AL_PointLight(tLight).Range)=1
               if BoxCollision(AL_LightVec(c).x,AL_LightVec(c).y,AL_LightVec(c).z,AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_LightVec(4).x,AL_LightVec(4).y,AL_LightVec(4).z)=1
                  tShadowMapSide=d*6
                  AL_LightVec(5).x=AL_LightVec(c).x-AL_PointLight(tLight).Position.x
                  AL_LightVec(5).y=AL_LightVec(c).y-AL_PointLight(tLight).Position.y
                  AL_LightVec(5).z=AL_LightVec(c).z-AL_PointLight(tLight).Position.z
                  if AL_LightVec(c).x+(iSx)>AL_PointLight(tLight).Position.x and AL_PointFaceUpdate(tShadowMapSide+0)<>3
                    if AL_PointLight(tLight).Position.y<AL_LightVec(c).y+((iSY/1.5)+(iSx/1.5)+AL_LightVec(5).x) and AL_PointLight(tLight).Position.y>AL_LightVec(c).y-((iSY/1.5)+(iSx/1.5)+AL_LightVec(5).x)
                        if AL_PointLight(tLight).Position.z<AL_LightVec(c).z+((iSz/1.5)+(iSx/1.5)+AL_LightVec(5).x) and AL_PointLight(tLight).Position.z>AL_LightVec(c).z-((iSz/1.5)+(iSx/1.5)+AL_LightVec(5).x)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+0)=4 else AL_PointFaceUpdate(tShadowMapSide+0)=3
                        endif
                    endif
                  endif
                  if AL_LightVec(c).x-(iSx)<AL_PointLight(tLight).Position.x and AL_PointFaceUpdate(tShadowMapSide+1)<>3
                     if AL_PointLight(tLight).Position.y<AL_LightVec(c).y+((iSy/1.5)+(iSx/1.5)-AL_LightVec(5).x) and AL_PointLight(tLight).Position.y>AL_LightVec(c).y-((iSy/1.5)+(iSx/1.5)-AL_LightVec(5).x)
                        if AL_PointLight(tLight).Position.z<AL_LightVec(c).z+((iSz/1.5)+(iSx/1.5)-AL_LightVec(5).x) and AL_PointLight(tLight).Position.z>AL_LightVec(c).z-((iSz/1.5)+(iSx/1.5)-AL_LightVec(5).x)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+1)=4 else AL_PointFaceUpdate(tShadowMapSide+1)=3
                        endif
                     endif
                  endif
                  if AL_LightVec(c).y+(iSy)>AL_PointLight(tLight).Position.y and AL_PointFaceUpdate(tShadowMapSide+2)<>3
                     if AL_PointLight(tLight).Position.x<AL_LightVec(c).x+((iSx/1.5)+(iSy/1.5)+AL_LightVec(5).y) and AL_PointLight(tLight).Position.x>AL_LightVec(c).x-((iSx/1.5)+(iSy/1.5)+AL_LightVec(5).y)
                        if AL_PointLight(tLight).Position.z<AL_LightVec(c).z+((iSz/1.5)+(iSy/1.5)+AL_LightVec(5).y) and AL_PointLight(tLight).Position.z>AL_LightVec(c).z-((iSz/1.5)+(iSy/1.5)+AL_LightVec(5).y)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+2)=4 else AL_PointFaceUpdate(tShadowMapSide+2)=3
                        endif
                     endif
                  endif
                  if AL_LightVec(c).y-(iSy)<AL_PointLight(tLight).Position.y and AL_PointFaceUpdate(tShadowMapSide+3)<>3
                     if AL_PointLight(tLight).Position.x<AL_LightVec(c).x+((iSx/1.5)+(iSy/1.5)-AL_LightVec(5).y) and AL_PointLight(tLight).Position.x>AL_LightVec(c).x-((iSx/1.5)+(iSy/1.5)-AL_LightVec(5).y)
                        if AL_PointLight(tLight).Position.z<AL_LightVec(c).z+((iSz/1.5)+(iSy/1.5)-AL_LightVec(5).y) and AL_PointLight(tLight).Position.z>AL_LightVec(c).z-((iSz/1.5)+(iSy/1.5)-AL_LightVec(5).y)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+3)=4 else AL_PointFaceUpdate(tShadowMapSide+3)=3
                        endif
                     endif
                  endif
                  if AL_LightVec(c).z+(iSz)>AL_PointLight(tLight).Position.z and AL_PointFaceUpdate(tShadowMapSide+4)<>3
                     if AL_PointLight(tLight).Position.x<AL_LightVec(c).x+((iSx/1.5)+(iSz/1.5)+AL_LightVec(5).z) and AL_PointLight(tLight).Position.x>AL_LightVec(c).x-((iSx/1.5)+(iSz/1.5)+AL_LightVec(5).z)
                        if AL_PointLight(tLight).Position.y<AL_LightVec(c).y+((iSy/1.5)+(iSz/1.5)+AL_LightVec(5).z) and AL_PointLight(tLight).Position.y>AL_LightVec(c).y-((iSy/1.5)+(iSz/1.5)+AL_LightVec(5).z)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+4)=4 else AL_PointFaceUpdate(tShadowMapSide+4)=3
                        endif
                     endif
                  endif
                  if AL_LightVec(c).z-(iSz)<AL_PointLight(tLight).Position.z and AL_PointFaceUpdate(tShadowMapSide+5)<>3
                     if AL_PointLight(tLight).Position.x<AL_LightVec(c).x+((iSx/1.5)+(iSz/1.5)-AL_LightVec(5).z) and AL_PointLight(tLight).Position.x>AL_LightVec(c).x-((iSx/1.5)+(iSz/1.5)-AL_LightVec(5).z)
                        if AL_PointLight(tLight).Position.y<AL_LightVec(c).y+((iSy/1.5)+(iSz/1.5)-AL_LightVec(5).z) and AL_PointLight(tLight).Position.y>AL_LightVec(c).y-((iSy/1.5)+(iSz/1.5)-AL_LightVec(5).z)
                           if iMode=0 then AL_PointFaceUpdate(tShadowMapSide+5)=4 else AL_PointFaceUpdate(tShadowMapSide+5)=3
                        endif
                     endif
                  endif
               endif
            endif
         next c
      endif
   next d
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_AlphaObjectData
   InUse as integer
   Object as integer
   Bounds as integer
   Visible as boolean
   Position as Vec3Float
   Scale as Vec3Float
   Radius as float
   Size as Vec3Float
   AtualSize as Vec3Float
   Angle as Vec3Float
   Center as Vec3Float
   Mask as integer
   MaskAlpha as boolean
   MaskDistort as boolean
   Dynamic as integer
   DynamicEnabled as boolean
   ReflectionTexture as integer
endtype

`----------------------------------------------------
` Add Alpha Object
`----------------------------------------------------
function AlphaObject_Add(iAlphaObject as integer)
   tAlphaObjectAL=-1
   for o=AL_AlphaObjectFreeUp to AL_AlphaObjectCount
      if AL_AlphaObject(o).InUse=0 then tAlphaObjectAL=o:exit
   next o
   if tAlphaObjectAL=-1
      tAlphaObjectAL=AL_AlphaObjectCount+1
      AL_AlphaObjectCount=AL_AlphaObjectCount+1000
      dim AL_AlphaObject(AL_AlphaObjectCount)
   endif
   AL_AlphaObjectFreeUp=tAlphaObjectAL
   inc AL_AlphaObjectActiveCount
   array insert at bottom AL_AlphaObjectActive()
   AL_AlphaObjectActive(AL_AlphaObjectActiveCount)=tAlphaObjectAL
   AL_AlphaObject(tAlphaObjectAL).InUse=1
   AL_AlphaObject(tAlphaObjectAL).Object=iAlphaObject
   AL_AlphaObject(tAlphaObjectAL).Visible=1
   AL_AlphaObject(tAlphaObjectAL).Mask=0
   AL_AlphaObject(tAlphaObjectAL).Dynamic=-1
   AL_AlphaObject(tAlphaObjectAL).DynamicEnabled=0
   AL_AlphaObject(tAlphaObjectAL).ReflectionTexture=0
   AL_AlphaObject(tAlphaObjectAL).Center.x=-999999999
   AL_AlphaObject(tAlphaObjectAL).Center.y=-999999999
   AL_AlphaObject(tAlphaObjectAL).Center.z=-999999999
   AL_AlphaObject(tAlphaObjectAL).Bounds=FrustumCulling_AddBounds(iAlphaObject,6)
   set object transparency iAlphaObject,2
   set object radius iAlphaObject,9999^9999
   disable object zwrite iAlphaObject
   texture object iAlphaObject,5,AL_Image(12)
   texture object iAlphaObject,7,AL_ImageMRT(1)
   exclude object on iAlphaObject
   AlphaObject_Update(tAlphaObjectAL)
   AlphaObject_SetMask(tAlphaObjectAL,1,1)
endfunction tAlphaObjectAL

`----------------------------------------------------
` Remove Alpha Object
`----------------------------------------------------
function AlphaObject_Remove(iAlphaObjectAL as integer)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      set object transparency AL_AlphaObject(iAlphaObjectAL).Object,0
      AlphaObject_SetDynamic(iAlphaObjectAL,0)
      FrustumCulling_RemoveBounds(AL_AlphaObject(iAlphaObjectAL).Bounds)
      AL_AlphaObject(iAlphaObjectAL).InUse=2
      AL_AlphaObjectRemove=1
   endif
endfunction

`----------------------------------------------------
` Alpha Object Set Visible (Disable Occlusion/Dynamic update)
`----------------------------------------------------
function AlphaObject_SetVisible(iAlphaObjectAL as integer,iVisible as boolean)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      if AL_AlphaObject(iAlphaObjectAL).Visible<>iVisible
         AL_AlphaObject(iAlphaObjectAL).Visible=iVisible
         FrustumCulling_SetBoundsVisible(AL_AlphaObject(iAlphaObjectAL).Bounds,iVisible)
         if AL_AlphaObject(iAlphaObjectAL).DynamicEnabled=1
            AlphaObject_SetDynamic(iAlphaObjectAL,iVisible)
            AL_AlphaObject(iAlphaObjectAL).DynamicEnabled=1
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Alpha Object Set Mask
`----------------------------------------------------
function AlphaObject_SetMask(iAlphaObjectAL as integer,iAlpha as boolean,iDistort as boolean)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      AL_AlphaObject(iAlphaObjectAL).MaskAlpha=iAlpha
      AL_AlphaObject(iAlphaObjectAL).MaskDistort=iDistort
      if iAlpha=1 then tMask=2^AL_Camera(0)
      if iDistort>0 then tMask=tMask+(2^AL_Camera(3))
      if AL_PostFilter=1 then tMask=tMask+1
      AL_AlphaObject(iAlphaObjectAL).Mask=tMask
      set object mask AL_AlphaObject(iAlphaObjectAL).Object,AL_AlphaObject(iAlphaObjectAL).Mask
   endif
endfunction

`----------------------------------------------------
` Alpha Object Set Draw Distance
`----------------------------------------------------
function AlphaObject_SetDrawDistance(iAlphaObjectAL as integer,iDrawDistance as float)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1 then FrustumCulling_SetDrawDistance(AL_AlphaObject(iAlphaObjectAL).Bounds,iDrawDistance)
endfunction

`----------------------------------------------------
` Alpha Object Set Dynamic
`----------------------------------------------------
function AlphaObject_SetDynamic(iAlphaObjectAL as integer,iDynamic as integer)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      if AL_AlphaObject(iAlphaObjectAL).Dynamic=-1 and iDynamic=1
         tObjectDynamic=-1
         for o=AL_ObjectDynamicFreeUp to AL_ObjectDynamicCount
            if AL_ObjectDynamic(o).InUse=0 then tObjectDynamic=o:exit
         next o
         if tObjectDynamic=-1
            tObjectDynamic=AL_ObjectDynamicCount+1
            AL_ObjectDynamicCount=AL_ObjectDynamicCount+1000
            dim AL_ObjectDynamic(AL_ObjectDynamicCount)
         endif
         AL_ObjectDynamicFreeUp=tObjectDynamic
         inc AL_ObjectDynamicActiveCount
         array insert at bottom AL_ObjectDynamicActive()
         AL_ObjectDynamicActive(AL_ObjectDynamicActiveCount)=tObjectDynamic
         AL_ObjectDynamic(tObjectDynamic).InUse=1
         AL_ObjectDynamic(tObjectDynamic).ObjectType=1
         AL_ObjectDynamic(tObjectDynamic).Object=AL_AlphaObject(iAlphaObjectAL).Object
         AL_ObjectDynamic(tObjectDynamic).ObjectAL=iAlphaObjectAL
         AL_AlphaObject(iAlphaObjectAL).Dynamic=tObjectDynamic
         AL_AlphaObject(iAlphaObjectAL).DynamicEnabled=1
      endif
      if AL_AlphaObject(iAlphaObjectAL).Dynamic>-1 and iDynamic<>1
         tObjectDynamic=AL_AlphaObject(iAlphaObjectAL).Dynamic
         AL_ObjectDynamic(tObjectDynamic).InUse=2
         AL_AlphaObject(iAlphaObjectAL).Dynamic=-1
         AL_AlphaObject(iAlphaObjectAL).DynamicEnabled=0
         AL_ObjectDynamicRemove=1
      endif
   endif
endfunction

`----------------------------------------------------
` Alpha Object Get Mask
`----------------------------------------------------
function AlphaObject_GetMask(iAlphaObjectAL as integer)
   if AL_Object(iAlphaObjectAL).InUse=1
      rVal=AL_AlphaObject(iAlphaObjectAL).Mask
      exitfunction rVal
   endif
endfunction 0

`----------------------------------------------------
` Alpha Object Update
`----------------------------------------------------
function AlphaObject_Update(iAlphaObjectAL as integer)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      if AL_AlphaObject(iAlphaObjectAL).Dynamic=-1
         GetObjectBounds(AL_AlphaObject(iAlphaObjectAL).Object)
         AL_AlphaObject(iAlphaObjectAL).Position.x=Vector4Float(1).x
         AL_AlphaObject(iAlphaObjectAL).Position.y=Vector4Float(1).y
         AL_AlphaObject(iAlphaObjectAL).Position.z=Vector4Float(1).z
         AL_AlphaObject(iAlphaObjectAL).Center.x=Vector4Float(1).x+Vector4Float(5).x
         AL_AlphaObject(iAlphaObjectAL).Center.y=Vector4Float(1).y+Vector4Float(5).y
         AL_AlphaObject(iAlphaObjectAL).Center.z=Vector4Float(1).z+Vector4Float(5).z
         AL_AlphaObject(iAlphaObjectAL).Scale.x=Vector4Float(3).x
         AL_AlphaObject(iAlphaObjectAL).Scale.y=Vector4Float(3).y
         AL_AlphaObject(iAlphaObjectAL).Scale.z=Vector4Float(3).z
         AL_AlphaObject(iAlphaObjectAL).Radius=Vector4Float(3).w
         AL_AlphaObject(iAlphaObjectAL).Size.x=Vector4Float(4).x
         AL_AlphaObject(iAlphaObjectAL).Size.y=Vector4Float(4).y
         AL_AlphaObject(iAlphaObjectAL).Size.z=Vector4Float(4).z
         AL_AlphaObject(iAlphaObjectAL).AtualSize.x=Vector4Float(0).x
         AL_AlphaObject(iAlphaObjectAL).AtualSize.y=Vector4Float(0).y
         AL_AlphaObject(iAlphaObjectAL).AtualSize.z=Vector4Float(0).z
         AL_AlphaObject(iAlphaObjectAL).Angle.x=Vector4Float(2).x
         AL_AlphaObject(iAlphaObjectAL).Angle.y=Vector4Float(2).y
         AL_AlphaObject(iAlphaObjectAL).Angle.z=Vector4Float(2).z
         FrustumCulling_SetBounds(AL_AlphaObject(iAlphaObjectAL).Bounds,AL_AlphaObject(iAlphaObjectAL).Center.x,AL_AlphaObject(iAlphaObjectAL).Center.y,AL_AlphaObject(iAlphaObjectAL).Center.z,AL_AlphaObject(iAlphaObjectAL).Scale.x,AL_AlphaObject(iAlphaObjectAL).Scale.y,AL_AlphaObject(iAlphaObjectAL).Scale.z)
      else
         AL_ObjectDynamic(AL_AlphaObject(iAlphaObjectAL).Dynamic).Position.y=-9999
      endif
   endif
endfunction

`----------------------------------------------------
`Object Show
   _AlphaObjects_Show:
      for x=0 to VFC_VisibleCount(6)
         exclude object off VFC_Bounds(VFC_Visible(x,6)).Handel
      next x
   return

`----------------------------------------------------
`Object Hide
   _AlphaObjects_Hide:
      for x=0 to VFC_VisibleCount(6)
         exclude object on VFC_Bounds(VFC_Visible(x,6)).Handel
      next x
   return

`----------------------------------------------------
` Alpha Object Update Reflection
`----------------------------------------------------
function AlphaObject_UpdateReflection(iAlphaObjectAL as integer)
   if AL_AlphaObject(iAlphaObjectAL).InUse=1
      tReflectionTexture=AL_AlphaObject(iAlphaObjectAL).ReflectionTexture
      AL_AlphaObject(iAlphaObjectAL).ReflectionTexture=Reflection_GetReflections(AL_AlphaObject(iAlphaObjectAL).Position.x,AL_AlphaObject(iAlphaObjectAL).Position.y,AL_AlphaObject(iAlphaObjectAL).Position.z)
      if tReflectionTexture<>AL_AlphaObject(iAlphaObjectAL).ReflectionTexture and AL_AlphaObject(iAlphaObjectAL).ReflectionTexture>0 then texture object AL_AlphaObject(iAlphaObjectAL).Object,6,AL_AlphaObject(iAlphaObjectAL).ReflectionTexture
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_WaterObjectData
   InUse as integer
   Object as integer
   Bounds as integer
   Visible as integer
   Mask as integer
   Update as boolean
   PositionObject as Vec3Float
   Position as Vec3Float
   Scale as Vec3Float
   Radius as float
   Size as Vec3Float
   AtualSize as Vec3Float
   Angle as Vec3Float
   Center as Vec3Float
   ReflectionTexture as integer
   UnderWater as integer
   EdgeSoftness as float
   UVScale as Vec3Float
   UVSpeed as Vec4Float
   FogRange as float
   FogHeight as float
   FogColor as Vec3Float
endtype

`----------------------------------------------------
` Water Create
`----------------------------------------------------
function WaterObject_Add(iWaterObject as integer)
   tWaterObjectAL=-1
   for o=AL_WaterObjectFreeUp to AL_WaterObjectCount
      if AL_WaterObject(o).InUse=0 then tWaterObjectAL=o:exit
   next o
   if tWaterObjectAL=-1
      tWaterObjectAL=AL_WaterObjectCount+1
      AL_WaterObjectCount=AL_WaterObjectCount+100
      dim AL_WaterObject(AL_WaterObjectCount)
   endif
   AL_WaterObjectFreeUp=tWaterObjectAL
   inc AL_WaterObjectActiveCount
   array insert at bottom AL_WaterObjectActive()
   AL_WaterObjectActive(AL_WaterObjectActiveCount)=tWaterObjectAL
   AL_WaterObject(tWaterObjectAL).InUse=1
   AL_WaterObject(tWaterObjectAL).Object=iWaterObject
   AL_WaterObject(tWaterObjectAL).Visible=1
   AL_WaterObject(tWaterObjectAL).EdgeSoftness=0.25
   AL_WaterObject(tWaterObjectAL).ReflectionTexture=0
   AL_WaterObject(tWaterObjectAL).Center.x=-999999999
   AL_WaterObject(tWaterObjectAL).Center.y=-999999999
   AL_WaterObject(tWaterObjectAL).Center.z=-999999999
   AL_WaterObject(tWaterObjectAL).UnderWater=0
   AL_WaterObject(tWaterObjectAL).Bounds=FrustumCulling_AddBounds(iWaterObject,6)
   set object transparency iWaterObject,2
   set object radius iWaterObject,9999^9999
   exclude object on iWaterObject
   texture object iWaterObject,5,AL_Image(22)
   texture object iWaterObject,6,AL_Image(2)
   texture object iWaterObject,7,AL_ImageMRT(1)
   WaterObject_Update(tWaterObjectAL)
   WaterObject_SetMask(tWaterObjectAL,1,1)
endfunction tWaterObjectAL

`----------------------------------------------------
` Delete Water
`----------------------------------------------------
function WaterObject_Remove(iWaterObjectAL as integer)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      set object transparency AL_WaterObject(iWaterObjectAL).Object,0
      FrustumCulling_RemoveBounds(AL_WaterObject(iWaterObjectAL).Bounds)
      if AL_WaterUnder=iWaterObjectAL then AL_WaterUnder=-1
      AL_WaterObject(iWaterObjectAL).InUse=2
      AL_WaterObjectRemove=1
   endif
endfunction

`----------------------------------------------------
` Water Object Set Visible (Disable Occlusion/Dynamic update)
`----------------------------------------------------
function WaterObject_SetVisible(iWaterObjectAL as integer,iVisible as boolean)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      if AL_WaterObject(iWaterObjectAL).Visible<>iVisible
         AL_WaterObject(iWaterObjectAL).Visible=iVisible
         FrustumCulling_SetBoundsVisible(AL_WaterObject(iWaterObjectAL).Bounds,iVisible)
      endif
   endif
endfunction

`----------------------------------------------------
` Water Object Set Mask
`----------------------------------------------------
function WaterObject_SetMask(iWaterObjectAL as integer,iAlpha as boolean,iDistort as boolean)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      if iAlpha=1 then tMask=2^AL_Camera(0)
      if iDistort>0 then tMask=tMask+(2^AL_Camera(3))
      if AL_PostFilter=1 then tMask=tMask+1
      AL_WaterObject(iWaterObjectAL).Mask=tMask
      set object mask AL_WaterObject(iWaterObjectAL).Object,AL_WaterObject(iWaterObjectAL).Mask
   endif
endfunction

`----------------------------------------------------
` Water Object Set Draw Distance
`----------------------------------------------------
function WaterObject_SetDrawDistance(iWaterObjectAL as integer,iDrawDistance as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1 then FrustumCulling_SetDrawDistance(AL_WaterObject(iWaterObjectAL).Bounds,iDrawDistance)
endfunction

`----------------------------------------------------
` Set Water Edge
`----------------------------------------------------
function WaterObject_SetEdge(iWaterObjectAL as integer,iEdgeSoftness as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      AL_WaterObject(iWaterObjectAL).EdgeSoftness=iEdgeSoftness
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Set Water Scale
`----------------------------------------------------
function WaterObject_SetScale(iWaterObjectAL as integer,iScaleU as float,iScaleV as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      AL_WaterObject(iWaterObjectAL).UVScale.x=iScaleU
      AL_WaterObject(iWaterObjectAL).UVScale.y=iScaleV
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Set Water Speed
`----------------------------------------------------
function WaterObject_SetSpeed(iWaterObjectAL as integer,iSpeedX as float,iSpeedY as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      AL_WaterObject(iWaterObjectAL).UVSpeed.x=iSpeedX
      AL_WaterObject(iWaterObjectAL).UVSpeed.y=iSpeedY
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Set Water Fog
`----------------------------------------------------
function WaterObject_SetFog(iWaterObjectAL as integer,iRange as float,iHeight as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      AL_WaterObject(iWaterObjectAL).FogRange=iRange
      AL_WaterObject(iWaterObjectAL).FogHeight=iHeight
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Set Water Fog Color
`----------------------------------------------------
function WaterObject_SetFogColor(iWaterObjectAL as integer,iRed1 as float,iGreen1 as float,iBlue1 as float)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      AL_WaterObject(iWaterObjectAL).FogColor.x=iRed1
      AL_WaterObject(iWaterObjectAL).FogColor.y=iGreen1
      AL_WaterObject(iWaterObjectAL).FogColor.z=iBlue1
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Set Water Under Water
`----------------------------------------------------
function WaterObject_SetUnderWater(iWaterObjectAL as integer)
   if iWaterObjectAL>-1
      if AL_WaterUnder<10000
         if AL_WaterObject(iWaterObjectAL).InUse=1 and AL_WaterObject(iWaterObjectAL).UnderWater=0
            if AL_WaterUnder>-1 then AL_WaterObject(AL_WaterUnder).UnderWater=0
            AL_WaterObject(iWaterObjectAL).UnderWater=1
            AL_WaterUnder=iWaterObjectAL
            exclude object off AL_WaterFogObject
            if AL_PostFilter=1 then AL_WaterSplash.w=32
         endif
      endif
   else
      if AL_WaterUnder>-1 and AL_WaterUnder<10000
         AL_WaterObject(AL_WaterUnder).UnderWater=0
         AL_WaterUnder=-1
         exclude object on AL_WaterFogObject
         PostFilter_WaterSplash()
      endif
   endif
endfunction

`----------------------------------------------------
` Water Object Get Mask
`----------------------------------------------------
function WaterObject_GetMask(iWaterObjectAL as integer)
   if AL_Object(iWaterObjectAL).InUse=1
      rVal=AL_WaterObject(iWaterObjectAL).Mask
      exitfunction rVal
   endif
endfunction 0

`----------------------------------------------------
` Water Update
`----------------------------------------------------
function WaterObject_Update(iWaterObjectAL as integer)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      GetObjectBounds(AL_WaterObject(iWaterObjectAL).Object)
      AL_WaterObject(iWaterObjectAL).Position.x=Vector4Float(1).x
      AL_WaterObject(iWaterObjectAL).Position.y=Vector4Float(1).y
      AL_WaterObject(iWaterObjectAL).Position.z=Vector4Float(1).z
      AL_WaterObject(iWaterObjectAL).Scale.x=Vector4Float(3).x
      AL_WaterObject(iWaterObjectAL).Scale.y=Vector4Float(3).y
      AL_WaterObject(iWaterObjectAL).Scale.z=Vector4Float(3).z
      AL_WaterObject(iWaterObjectAL).Radius=Vector4Float(3).w
      AL_WaterObject(iWaterObjectAL).Size.x=Vector4Float(4).x
      AL_WaterObject(iWaterObjectAL).Size.y=Vector4Float(4).y
      AL_WaterObject(iWaterObjectAL).Size.z=Vector4Float(4).z
      AL_WaterObject(iWaterObjectAL).Angle.x=Vector4Float(2).x
      AL_WaterObject(iWaterObjectAL).Angle.y=Vector4Float(2).y
      AL_WaterObject(iWaterObjectAL).Angle.z=Vector4Float(2).z
      AL_WaterObject(iWaterObjectAL).Center.x=Vector4Float(1).x+Vector4Float(5).x
      AL_WaterObject(iWaterObjectAL).Center.y=Vector4Float(1).y+Vector4Float(5).y
      AL_WaterObject(iWaterObjectAL).Center.z=Vector4Float(1).z+Vector4Float(5).z
      FrustumCulling_SetBounds(AL_WaterObject(iWaterObjectAL).Bounds,AL_WaterObject(iWaterObjectAL).Center.x,AL_WaterObject(iWaterObjectAL).Center.y,AL_WaterObject(iWaterObjectAL).Center.z,AL_WaterObject(iWaterObjectAL).Scale.x,AL_WaterObject(iWaterObjectAL).Scale.y,AL_WaterObject(iWaterObjectAL).Scale.z)
      AL_WaterObject(iWaterObjectAL).Update=1
   endif
endfunction

`----------------------------------------------------
` Water Update
   _Water_Update:
      inc AL_WaterCausticSpeed.x,AL_WaterCaustic.z*AL_Timer
      if AL_WaterCausticSpeed.x>1 then AL_WaterCausticSpeed.x=0
      inc AL_WaterCausticSpeed.y,AL_WaterCaustic.w*AL_Timer
      if AL_WaterCausticSpeed.y>1 then AL_WaterCausticSpeed.y=0
      inc AL_WaterDistortSpeed.z,AL_WaterDistortSpeed.x*AL_Timer
      if AL_WaterDistortSpeed.z>1 then AL_WaterDistortSpeed.z=0
      inc AL_WaterDistortSpeed.w,AL_WaterDistortSpeed.y*AL_Timer
      if AL_WaterDistortSpeed.w>1 then AL_WaterDistortSpeed.w=0
      set Vector4 Vector4(1),AL_WaterDistortSpeed.z,AL_WaterDistortSpeed.z,AL_WaterDistortSpeed.w,AL_WaterDistortSpeed.w
      set effect constant vector AL_WaterFogEffect,"DistortSpeed",Vector4(1)
      set Vector4 Vector4(1),AL_WaterCaustic.x,AL_WaterCaustic.x,AL_WaterCaustic.y,AL_WaterCaustic.y
      set effect constant vector AL_WaterFogEffect,"CausticScale",Vector4(1)
      set Vector4 Vector4(2),AL_WaterCausticSpeed.x,AL_WaterCausticSpeed.x,AL_WaterCausticSpeed.y,AL_WaterCausticSpeed.y
      set effect constant vector AL_WaterFogEffect,"CausticSpeed",Vector4(2)
      for e=0 to AL_WaterEffectActiveCount
         set effect constant float AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"Timer",AL_TimerINC/10000
         set effect constant float AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"Lighting1",AL_ReflectionLight.z*(1-(AL_ReflectionLightTransition/100))
         set effect constant float AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"Lighting2",AL_ReflectionLight.w*(AL_ReflectionLightTransition/100)
         set effect constant vector AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"CausticScale",Vector4(1)
         set effect constant vector AL_WaterEffect(AL_WaterEffectActive(e)).Effect,"CausticSpeed",Vector4(2)
      next e
      if AL_WaterUnder>-1 and AL_WaterUnder<10000
         tWaterObjectAL=AL_WaterUnder
         position object AL_WaterFogObject,AL_CameraPos.x,AL_CameraPos.y-100000,AL_CameraPos.z
         set vector4 Vector4(1),AL_WaterObject(tWaterObjectAL).FogRange,AL_WaterObject(tWaterObjectAL).FogHeight,0,0
         set effect constant vector AL_WaterFogEffect,"WaterFogRange",Vector4(1)
         set vector4 Vector4(1),(AL_WaterObject(tWaterObjectAL).FogColor.x/255)^2.2,(AL_WaterObject(tWaterObjectAL).FogColor.y/255)^2.2,(AL_WaterObject(tWaterObjectAL).FogColor.z/255)^2.2,0
         set effect constant vector AL_WaterFogEffect,"WaterFogColor1",Vector4(1)
         set effect constant vector AL_WaterFogEffect,"WaterFogColor2",Vector4(1)
         set effect constant float AL_WaterFogEffect,"WaterHeight",AL_WaterObject(tWaterObjectAL).Position.y+(AL_WaterObject(tWaterObjectAL).Scale.y/2)
      endif
      for w=0 to AL_WaterObjectActiveCount
         tWaterObjectAL=AL_WaterObjectActive(w)
         if AL_WaterObject(tWaterObjectAL).InUse=1
            AL_WaterObject(tWaterObjectAL).PositionObject.x=object position x(AL_WaterObject(tWaterObjectAL).Object)
            AL_WaterObject(tWaterObjectAL).PositionObject.y=object position y(AL_WaterObject(tWaterObjectAL).Object)
            AL_WaterObject(tWaterObjectAL).PositionObject.z=object position z(AL_WaterObject(tWaterObjectAL).Object)
            position object AL_WaterObject(tWaterObjectAL).Object,AL_WaterObject(tWaterObjectAL).PositionObject.x,AL_WaterObject(tWaterObjectAL).PositionObject.y-9999999,AL_WaterObject(tWaterObjectAL).PositionObject.z
            if AL_WaterObject(tWaterObjectAL).Update=1
               AL_WaterObject(tWaterObjectAL).Update=0
               pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_WaterObject(tWaterObjectAL).Object)
               pMesh=PeekDword(pObject+8)
               for l=0 to PeekInteger(pObject)-1
                  pMeshLimb=PeekDword(pMesh+(l*4))
                  if pMeshLimb>0
                     tFVFSize=PeekInteger(pMeshLimb+8)
                     pVertex=PeekDword(pMeshLimb+20)
                     for v=0 to PeekInteger(pMeshLimb+28)-1
                        PokeDword(pVertex+(v*tFVFSize)+24,rgb(AL_WaterObject(tWaterObjectAL).FogColor.x,AL_WaterObject(tWaterObjectAL).FogColor.y,AL_WaterObject(tWaterObjectAL).FogColor.z))
                        PokeFloat(pVertex+(v*tFVFSize)+48,AL_WaterObject(tWaterObjectAL).EdgeSoftness)
                        PokeFloat(pVertex+(v*tFVFSize)+52,AL_WaterObject(tWaterObjectAL).UVScale.x)
                        PokeFloat(pVertex+(v*tFVFSize)+56,AL_WaterObject(tWaterObjectAL).UVScale.y)
                        PokeFloat(pVertex+(v*tFVFSize)+60,AL_WaterObject(tWaterObjectAL).UVSpeed.x)
                        PokeFloat(pVertex+(v*tFVFSize)+64,AL_WaterObject(tWaterObjectAL).UVSpeed.y)
                        PokeFloat(pVertex+(v*tFVFSize)+68,AL_WaterObject(tWaterObjectAL).FogRange)
                        PokeFloat(pVertex+(v*tFVFSize)+72,AL_WaterObject(tWaterObjectAL).FogHeight)
                        PokeFloat(pVertex+(v*tFVFSize)+76,AL_WaterObject(tWaterObjectAL).Center.x)
                        PokeFloat(pVertex+(v*tFVFSize)+80,AL_WaterObject(tWaterObjectAL).Center.y+(AL_WaterObject(tWaterObjectAL).Scale.y/2))
                        PokeFloat(pVertex+(v*tFVFSize)+84,AL_WaterObject(tWaterObjectAL).Center.z)
                        PokeFloat(pVertex+(v*tFVFSize)+88,AL_WaterObject(tWaterObjectAL).Radius/2)
                     next v
                  endif
                  PokeByte2(pMeshLimb+1000,1)
               next l
            endif
         endif
      next w
   return

`----------------------------------------------------
` Water Update Reflection
`----------------------------------------------------
function WaterObject_UpdateReflection(iWaterObjectAL as integer)
   if AL_WaterObject(iWaterObjectAL).InUse=1
      tReflectionTexture=AL_WaterObject(iWaterObjectAL).ReflectionTexture
      AL_WaterObject(iWaterObjectAL).ReflectionTexture=Reflection_GetReflections(AL_WaterObject(iWaterObjectAL).Position.x,AL_WaterObject(iWaterObjectAL).Position.y,AL_WaterObject(iWaterObjectAL).Position.z)
      if tReflectionTexture<>AL_WaterObject(iWaterObjectAL).ReflectionTexture and AL_WaterObject(iWaterObjectAL).ReflectionTexture>0 then texture object AL_WaterObject(iWaterObjectAL).Object,4,AL_WaterObject(iWaterObjectAL).ReflectionTexture
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_LODObjectData
   InUse as integer
   ObjectAL as integer
   LODSwich as boolean
   LODCull as integer
   LODCullRange as float
   ObjectLOD as integer
   Object1 as integer
   Object2 as integer
   Object3 as integer
   Object4 as integer
   Object5 as integer
   ObjectTransition1 as integer
   ObjectTransition2 as integer
   ObjectTransition3 as integer
   ObjectTransition4 as integer
   ObjectTransition5 as integer
   Range as float
   Range1 as float
   Range2 as float
   Range3 as float
   Range4 as float
   BatchMode as integer
   Batch1 as integer
   Batch2 as integer
   Batch3 as integer
   Batch4 as integer
   Batch5 as integer
   Inc0 as integer
   Inc1 as integer
   Inc2 as integer
   Inc3 as integer
   Inc4 as integer
   Inc5 as integer
   Dec0 as integer
   Dec1 as integer
   Dec2 as integer
   Dec3 as integer
   Dec4 as integer
   Dec5 as integer
endtype

`----------------------------------------------------
` Apply LOD
`----------------------------------------------------
function LOD_Apply(iObjectAL as integer,iObject1 as integer,iObject2 as integer,iObject3 as integer,iObject4 as integer,iObject5 as integer)
   if AL_Object(iObjectAL).InUse=1 and AL_Object(iObjectAL).LODObject=-1
      tLOD=-1
      for x=AL_LODObjectFreeUp to AL_LODObjectcount
         if AL_LODObject(x).InUse=0 then tLOD=x:exit
      next x
      if tLOD=-1
         tLOD=AL_LODObjectCount+1
         AL_LODObjectCount=AL_LODObjectCount+100
         dim AL_LODObject(AL_LODObjectCount)
      endif
      AL_LODObjectFreeUp=tLOD
      AL_Object(iObjectAL).LODObject=tLOD
      AL_LODObject(tLOD).InUse=1
      AL_LODObject(tLOD).ObjectAL=iObjectAL
      AL_LODObject(tLOD).LODCull=0
      AL_LODObject(tLOD).LODCullRange=15
      AL_LODObject(tLOD).LODSwich=0
      AL_LODObject(tLOD).Object1=-1
      AL_LODObject(tLOD).Object2=-1
      AL_LODObject(tLOD).Object3=-1
      AL_LODObject(tLOD).Object4=-1
      AL_LODObject(tLOD).Object5=-1
      if iObject1>0
         if object exist(iObject1)=1 then AL_LODObject(tLOD).Object1=iObject1
      endif
      if iObject2>0
         if object exist(iObject2)=1 then AL_LODObject(tLOD).Object2=iObject2
      endif
      if iObject3>0
         if object exist(iObject3)=1 then AL_LODObject(tLOD).Object3=iObject3
      endif
      if iObject4>0
         if object exist(iObject4)=1 then AL_LODObject(tLOD).Object4=iObject4
      endif
      if iObject5>0
         if object exist(iObject5)=1 then AL_LODObject(tLOD).Object5=iObject5
      endif
      AL_LODObject(tLOD).Range=5
      if AL_LODObject(tLOD).Object1>0 then AL_LODObject(tLOD).Range1=1:AL_LODObject(tLOD).ObjectLOD=0
      if AL_LODObject(tLOD).Object2>0 then AL_LODObject(tLOD).Range1=0.5:AL_LODObject(tLOD).Range2=1:AL_LODObject(tLOD).ObjectLOD=1
      if AL_LODObject(tLOD).Object3>0 then AL_LODObject(tLOD).Range1=0.25:AL_LODObject(tLOD).Range2=0.5:AL_LODObject(tLOD).Range3=1:AL_LODObject(tLOD).ObjectLOD=2
      if AL_LODObject(tLOD).Object4>0 then AL_LODObject(tLOD).Range1=0.125:AL_LODObject(tLOD).Range2=0.25:AL_LODObject(tLOD).Range3=0.5:AL_LODObject(tLOD).Range4=1:AL_LODObject(tLOD).ObjectLOD=3
      if AL_LODObject(tLOD).Object5>0 then AL_LODObject(tLOD).Range1=0.0625:AL_LODObject(tLOD).Range2=0.125:AL_LODObject(tLOD).Range3=0.25:AL_LODObject(tLOD).Range4=0.5:AL_LODObject(tLOD).ObjectLOD=4
      AL_LODObject(tLOD).ObjectTransition1=0
      AL_LODObject(tLOD).ObjectTransition2=0
      AL_LODObject(tLOD).ObjectTransition3=0
      AL_LODObject(tLOD).ObjectTransition4=0
      AL_LODObject(tLOD).ObjectTransition5=0
      AL_LODObject(tLOD).BatchMode=-1
      AL_LODObject(tLOD).Batch1=-1
      AL_LODObject(tLOD).Batch2=-1
      AL_LODObject(tLOD).Batch3=-1
      AL_LODObject(tLOD).Batch4=-1
      AL_LODObject(tLOD).Batch5=-1
      AL_LODObject(tLOD).Inc0=0
      AL_LODObject(tLOD).Inc1=0
      AL_LODObject(tLOD).Inc2=0
      AL_LODObject(tLOD).Inc3=0
      AL_LODObject(tLOD).Inc4=0
      AL_LODObject(tLOD).Inc5=0
      AL_LODObject(tLOD).Dec0=0
      AL_LODObject(tLOD).Dec1=0
      AL_LODObject(tLOD).Dec2=0
      AL_LODObject(tLOD).Dec3=0
      AL_LODObject(tLOD).Dec4=0
      AL_LODObject(tLOD).Dec5=0
   endif
endfunction

`----------------------------------------------------
` Remove LOD
`----------------------------------------------------
function LOD_Remove(iObjectAL as integer)
   if AL_Object(iObjectAL).LODObject>-1
      if AL_Object(iObjectAL).Batched>-1
         ObjectBatch_Remove(AL_Object(iObjectAL).Batched)
         VFC_Bounds(AL_Object(iObjectAL).Bounds).Handel=AL_Object(iObjectAL).Object
         VFC_Bounds(AL_Object(iObjectAL).Bounds).Group=0
         AL_Object(iObjectAL).Batched=-1
      endif
      LOD_SetImposter(iObjectAL,-1)
      tLOD=AL_Object(iObjectAL).LODObject
      if AL_LODTransitionCount>-1
         for x=0 to AL_LODTransitionCount
            if AL_LODTransitionObject(x)>0 and AL_LODTransitionLOD(x)=tLOD
               AL_LODTransitionObject(x)=0
               delete object AL_LODTransitionObject(x)
            endif
         next x
      endif
      AL_LODObject(tLOD).InUse=0
      if AL_LODObjectFreeUp>tLOD then AL_LODObjectFreeUp=tLOD
      AL_Object(iObjectAL).LODObject=-1
   endif
endfunction

`----------------------------------------------------
` LOD Transition (optional)
`----------------------------------------------------
function LOD_SetTransition(iObjectAL as integer,iObject1 as integer,iObject2 as integer,iObject3 as integer,iObject4 as integer,iObject5 as integer)
   if AL_Object(iObjectAL).LODObject>-1
      tLOD=AL_Object(iObjectAL).LODObject
      AL_LODObject(tLOD).ObjectTransition1=0:AL_LODObject(tLOD).ObjectTransition2=0:AL_LODObject(tLOD).ObjectTransition3=0
      AL_LODObject(tLOD).ObjectTransition4=0:AL_LODObject(tLOD).ObjectTransition5=0
      if iObject1>0
         if object exist(iObject1)=1 then AL_LODObject(tLOD).ObjectTransition1=iObject1
      endif
      if iObject2>0
         if object exist(iObject2)=1 then AL_LODObject(tLOD).ObjectTransition2=iObject2
      endif
      if iObject3>0
         if object exist(iObject3)=1 then AL_LODObject(tLOD).ObjectTransition3=iObject3
      endif
      if iObject4>0
         if object exist(iObject4)=1 then AL_LODObject(tLOD).ObjectTransition4=iObject4
      endif
      if iObject5>0
         if object exist(iObject5)=1 then AL_LODObject(tLOD).ObjectTransition5=iObject5
      endif
   endif
endfunction

`----------------------------------------------------
` LOD Batch
`----------------------------------------------------
function LOD_SetBatch(iObjectAL as integer,iBatch1 as integer,iBatch2 as integer,iBatch3 as integer,iBatch4 as integer,iBatch5 as integer)
   if AL_Object(iObjectAL).LODObject>-1
      tLOD=AL_Object(iObjectAL).LODObject
      if iBatch1>-1 then AL_LODObject(tLOD).Batch1=iBatch1
      if iBatch2>-1 then AL_LODObject(tLOD).Batch2=iBatch2
      if iBatch3>-1 then AL_LODObject(tLOD).Batch3=iBatch3
      if iBatch4>-1 then AL_LODObject(tLOD).Batch4=iBatch4
      if iBatch5>-1 then AL_LODObject(tLOD).Batch5=iBatch5
      LOD_BatchAdd(tLOD,AL_LODObject(tLOD).ObjectLOD)
   endif
endfunction

`----------------------------------------------------
` Apply Imposter to object
`----------------------------------------------------
function LOD_SetImposter(iObjectAL as integer,iImposter as integer)
   if AL_Object(iObjectAL).InUse=1
      if AL_Object(iObjectAL).ImposterInstance>-1 then Imposter_Remove(AL_Object(iObjectAL).ImposterInstance)
      AL_Object(iObjectAL).ImposterEnabled=0
      AL_Object(iObjectAL).Imposter=-1
      AL_Object(iObjectAL).ImposterInstance=-1
      if iImposter>-1
         if AL_Imposter(iImposter).InUse=1
            Object_SetVisible(iObjectAL,0)
            AL_Object(iObjectAL).ImposterEnabled=1
            AL_Object(iObjectAL).Imposter=iImposter
            AL_Object(iObjectAL).ImposterInstance=Imposter_Add(AL_Object(iObjectAL).Imposter)
            Imposter_SetPosition(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z)
            Imposter_SetAngle(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z)
            Imposter_SetScale(AL_Object(iObjectAL).ImposterInstance,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z)
            if AL_Object(iObjectAL).LODObject>-1 then AL_LODObject(AL_Object(iObjectAL).LODObject).LODCull=1
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` LOD Range
`----------------------------------------------------
function LOD_SetRange(iObjectAL as integer,iRange as float,iCullRange as float)
   if AL_Object(iObjectAL).LODObject>-1
      tLOD=AL_Object(iObjectAL).LODObject
      AL_LODObject(tLOD).Range=iRange
      AL_LODObject(tLOD).LODCullRange=iCullRange
   endif
endfunction

`----------------------------------------------------
`LOD Update
   _LOD_Update:
      if AL_LODObjectCount>-1
         if AL_LODTransitionCount=-1 and AL_LODUpdateLevel=0
            for t=0 to 200
               x=AL_LODObjectUpdate
               if AL_LODObject(x).InUse=1
                  tObjectAL=AL_LODObject(x).ObjectAL
                  set vector3 Vector3(1),AL_CameraPos.x-AL_Object(tObjectAL).Center.x,AL_CameraPos.y-AL_Object(tObjectAL).Center.y,AL_CameraPos.z-AL_Object(tObjectAL).Center.z
                  Vector4Float(1).x=length vector3(Vector3(1))/AL_Object(tObjectAL).Radius
                  if AL_Object(tObjectAL).Imposter>-1
                     if Vector4Float(1).x>AL_LODObject(x).Range
                        if AL_LODObject(x).LODCull=0 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(0)).Inc0=x:inc AL_LODInc(0)
                        if AL_LODObject(x).LODSwich=0
                           if Vector4Float(1).x>AL_LODObject(x).LODCullRange
                              if AL_Object(tObjectAL).ImposterInstance>-1 then Imposter_Remove(AL_Object(tObjectAL).ImposterInstance)
                           else
                              if AL_Object(tObjectAL).ImposterInstance=-1
                                 AL_Object(tObjectAL).ImposterInstance=Imposter_Add(AL_Object(tObjectAL).Imposter)
                                 Imposter_SetPosition(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Position.x,AL_Object(tObjectAL).Position.y,AL_Object(tObjectAL).Position.z)
                                 Imposter_SetAngle(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Angle.x,AL_Object(tObjectAL).Angle.y,AL_Object(tObjectAL).Angle.z)
                                 Imposter_SetScale(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Size.x,AL_Object(tObjectAL).Size.y,AL_Object(tObjectAL).Size.z)
                              endif
                           endif
                        endif
                     else
                        if AL_LODObject(x).LODCull=1 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(0)).Dec0=x:inc AL_LODDec(0)
                     endif
                  else
                     if Vector4Float(1).x>AL_LODObject(x).LODCullRange
                        if AL_LODObject(x).LODCull=0 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(0)).Inc0=x:inc AL_LODInc(0)
                     else
                        if AL_LODObject(x).LODCull=1 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(0)).Dec0=x:inc AL_LODDec(0)
                     endif
                  endif
                  if AL_LODObject(x).Object1>0 and AL_LODObject(x).LODCull=0
                     if Vector4Float(1).x<AL_LODObject(x).Range*AL_LODObject(x).Range1
                        if AL_LODObject(x).ObjectLOD>0 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(1)).Dec1=x:inc AL_LODDec(1)
                     else
                        if AL_LODObject(x).Object2>0
                           if Vector4Float(1).x<AL_LODObject(x).Range*AL_LODObject(x).Range2
                              if AL_LODObject(x).ObjectLOD<1 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(2)).Inc2=x:inc AL_LODInc(2)
                              if AL_LODObject(x).ObjectLOD>1 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(2)).Dec2=x:inc AL_LODDec(2)
                           else
                              if AL_LODObject(x).Object3>0
                                 if Vector4Float(1).x<AL_LODObject(x).Range*AL_LODObject(x).Range3
                                    if AL_LODObject(x).ObjectLOD<2 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(3)).Inc3=x:inc AL_LODInc(3)
                                    if AL_LODObject(x).ObjectLOD>2 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(3)).Dec3=x:inc AL_LODDec(3)
                                 else
                                    if AL_LODObject(x).Object4>0
                                       if Vector4Float(1).x<AL_LODObject(x).Range*AL_LODObject(x).Range4
                                          if AL_LODObject(x).ObjectLOD<3 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(4)).Inc4=x:inc AL_LODInc(4)
                                          if AL_LODObject(x).ObjectLOD>3 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODDec(4)).Dec4=x:inc AL_LODDec(4)
                                       else
                                          if AL_LODObject(x).Object5>0
                                             if AL_LODObject(x).ObjectLOD<4 and AL_LODObject(x).LODSwich=0 then AL_LODObject(x).LODSwich=1:AL_LODObject(AL_LODInc(5)).Inc5=x:inc AL_LODInc(5)
                                          endif
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif
                  endif
               endif
               inc AL_LODObjectUpdate
               if AL_LODObjectUpdate>AL_LODObjectCount then exit
            next t
         endif
         for x=0 to 5
            if AL_LODInc(x)>25 or AL_LODDec(x)>25 then AL_LODUpdateLevel=1
         next x
         if AL_LODObjectUpdate>AL_LODObjectCount then AL_LODObjectUpdate=0:AL_LODUpdateLevel=1
         if AL_LODTransitionCount=-1 and AL_LODUpdateLevel=1
            if AL_LODUpdate=10 and AL_LODInc(0)>0
               for o=0 to AL_LODInc(0)-1
                  tLOD=AL_LODObject(o).Inc0
                  tObjectAL=AL_LODObject(tLOD).ObjectAL
                  Object_SetVisible(tObjectAL,0)
                  if AL_Object(tObjectAL).Imposter>-1
                     AL_Object(tObjectAL).ImposterEnabled=1
                     AL_Object(tObjectAL).ImposterInstance=Imposter_Add(AL_Object(tObjectAL).Imposter)
                     Imposter_SetPosition(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Position.x,AL_Object(tObjectAL).Position.y,AL_Object(tObjectAL).Position.z)
                     Imposter_SetAngle(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Angle.x,AL_Object(tObjectAL).Angle.y,AL_Object(tObjectAL).Angle.z)
                     Imposter_SetScale(AL_Object(tObjectAL).ImposterInstance,AL_Object(tObjectAL).Size.x,AL_Object(tObjectAL).Size.y,AL_Object(tObjectAL).Size.z)
                  endif
                  LOD_BatchRemove(tLOD)
                  AL_LODObject(tLOD).LODSwich=0
                  AL_LODObject(tLOD).LODCull=1
               next o
               AL_LODInc(0)=0
            endif
            if AL_LODUpdate=11 and AL_LODDec(0)>0
               for o=0 to AL_LODDec(0)-1
                  tLOD=AL_LODObject(o).Dec0
                  tObjectAL=AL_LODObject(tLOD).ObjectAL
                  if AL_Object(tObjectAL).ImposterInstance>-1
                     AL_Object(tObjectAL).ImposterEnabled=0
                     Imposter_Remove(AL_Object(tObjectAL).ImposterInstance)
                  endif
                  Object_SetVisible(tObjectAL,1)
                  LOD_BatchAdd(tLOD,AL_LODObject(tLOD).ObjectLOD)
                  AL_LODObject(tLOD).LODSwich=0
                  AL_LODObject(tLOD).LODCull=0
               next o
               AL_LODDec(0)=0
            endif
            if AL_LODUpdate>-1 and AL_LODUpdate<5
               tLODInc=AL_LODUpdate+1
               if AL_LODInc(tLODInc)>0
                  for o=0 to AL_LODInc(tLODInc)-1
                     if tLODInc=1 then tLOD=AL_LODObject(o).Inc1:tSource=AL_LODObject(AL_LODObject(o).Inc1).Object1:tTransition=AL_LODObject(AL_LODObject(o).Inc1).ObjectTransition1
                     if tLODInc=2 then tLOD=AL_LODObject(o).Inc2:tSource=AL_LODObject(AL_LODObject(o).Inc2).Object2:tTransition=AL_LODObject(AL_LODObject(o).Inc2).ObjectTransition2
                     if tLODInc=3 then tLOD=AL_LODObject(o).Inc3:tSource=AL_LODObject(AL_LODObject(o).Inc3).Object3:tTransition=AL_LODObject(AL_LODObject(o).Inc3).ObjectTransition3
                     if tLODInc=4 then tLOD=AL_LODObject(o).Inc4:tSource=AL_LODObject(AL_LODObject(o).Inc4).Object4:tTransition=AL_LODObject(AL_LODObject(o).Inc4).ObjectTransition4
                     if tLODInc=5 then tLOD=AL_LODObject(o).Inc5:tSource=AL_LODObject(AL_LODObject(o).Inc5).Object5:tTransition=AL_LODObject(AL_LODObject(o).Inc5).ObjectTransition5
                     tObjectAL=AL_LODObject(tLOD).ObjectAL
                     delete object AL_Object(tObjectAL).Object
                     if GetSphereInFrustum(0,AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_Object(tObjectAL).Radius)=1
                        tOldObjectTransition=LOD_Transition(tLOD)
                        if tTransition>0 and tOldObjectTransition>0 and AL_LODTransitionCount<10 and AL_LODObject(tLOD).ObjectLOD=tLODInc-2
                           LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tTransition)
                           inc AL_LODTransitionCount
                           AL_LODTransitionLOD(AL_LODTransitionCount)=tLOD
                           AL_LODTransitionObject(AL_LODTransitionCount)=FreeUpObject(32500+rnd(16250))
                           LOD_Instance(tObjectAL,AL_LODTransitionObject(AL_LODTransitionCount),tOldObjectTransition)
                           AL_LODTransitionTimer=100
                           AL_LODTransition=0
                           if tLODInc=2 or tLODInc=4 then AL_LODTransition=1
                           LOD_BatchRemove(tLOD)
                        else
                           LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tSource)
                           AL_LODObject(tLOD).LODSwich=0
                           LOD_BatchAdd(tLOD,tLODInc-1)
                        endif
                     else
                        LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tSource)
                        AL_LODObject(tLOD).LODSwich=0
                        LOD_BatchAdd(tLOD,tLODInc-1)
                     endif
                     AL_LODObject(tLOD).ObjectLOD=tLODInc-1
                  next o
                  AL_LODInc(tLODInc)=0
               endif
            endif
            if AL_LODUpdate>4 and AL_LODUpdate<10
               tLODDec=AL_LODUpdate-4
               if AL_LODDec(tLODDec)>0
                  for o=0 to AL_LODDec(tLODDec)-1
                     if tLODDec=1 then tLOD=AL_LODObject(o).Dec1:tSource=AL_LODObject(AL_LODObject(o).Dec1).Object1:tTransition=AL_LODObject(AL_LODObject(o).Dec1).ObjectTransition1
                     if tLODDec=2 then tLOD=AL_LODObject(o).Dec2:tSource=AL_LODObject(AL_LODObject(o).Dec2).Object2:tTransition=AL_LODObject(AL_LODObject(o).Dec2).ObjectTransition2
                     if tLODDec=3 then tLOD=AL_LODObject(o).Dec3:tSource=AL_LODObject(AL_LODObject(o).Dec3).Object3:tTransition=AL_LODObject(AL_LODObject(o).Dec3).ObjectTransition3
                     if tLODDec=4 then tLOD=AL_LODObject(o).Dec4:tSource=AL_LODObject(AL_LODObject(o).Dec4).Object4:tTransition=AL_LODObject(AL_LODObject(o).Dec4).ObjectTransition4
                     if tLODDec=5 then tLOD=AL_LODObject(o).Dec5:tSource=AL_LODObject(AL_LODObject(o).Dec5).Object5:tTransition=AL_LODObject(AL_LODObject(o).Dec5).ObjectTransition5
                     tObjectAL=AL_LODObject(tLOD).ObjectAL
                     delete object AL_Object(tObjectAL).Object
                     if GetSphereInFrustum(0,AL_Object(tObjectAL).Center.x,AL_Object(tObjectAL).Center.y,AL_Object(tObjectAL).Center.z,AL_Object(tObjectAL).Radius)=1
                        tOldObjectTransition=LOD_Transition(tLOD)
                        if tTransition>0 and tOldObjectTransition>0 and AL_LODTransitionCount<10 and AL_LODObject(tLOD).ObjectLOD=tLODDec
                           LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tTransition)
                           inc AL_LODTransitionCount
                           AL_LODTransitionLOD(AL_LODTransitionCount)=tLOD
                           AL_LODTransitionObject(AL_LODTransitionCount)=FreeUpObject(32500+rnd(16250))
                           LOD_Instance(tObjectAL,AL_LODTransitionObject(AL_LODTransitionCount),tOldObjectTransition)
                           AL_LODTransitionTimer=100
                           AL_LODTransition=0
                           if tLODDec=2 or tLODDec=4 then AL_LODTransition=1
                           LOD_BatchRemove(tLOD)
                        else
                           LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tSource)
                           AL_LODObject(tLOD).LODSwich=0
                           LOD_BatchAdd(tLOD,tLODDec-1)
                        endif
                     else
                        LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,tSource)
                        AL_LODObject(tLOD).LODSwich=0
                        LOD_BatchAdd(tLOD,tLODDec-1)
                     endif
                     AL_LODObject(tLOD).ObjectLOD=tLODDec-1
                  next o
                  AL_LODDec(tLODDec)=0
               endif
            endif
            inc AL_LODUpdate
            if AL_LODUpdate>11 then AL_LODUpdate=0
            tLODUpdateLevel=0
            for x=0 to 5
               if AL_LODInc(x)>0 or AL_LODDec(x)>0 then tLODUpdateLevel=1
            next x
            if tLODUpdateLevel=0 then AL_LODUpdateLevel=0
         endif
      endif
      if AL_LODTransitionCount>-1
         if AL_LODTransitionTimer>0
            dec AL_LODTransitionTimer,AL_LODTransitionRate/AL_Timer
            if AL_LODTransition=0 then set vector4 Vector4(1),AL_LODTransitionTimer/100,1-(AL_LODTransitionTimer/100),0,0 else set vector4 Vector4(1),1-(AL_LODTransitionTimer/100),(AL_LODTransitionTimer/100),0,0
            for e=0 to AL_EffectActiveCount
               set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"LODTransition",Vector4(1)
            next e
         else
            for x=0 to AL_LODTransitionCount
               if AL_LODTransitionObject(x)>0
                  delete object AL_LODTransitionObject(x)
                  tLOD=AL_LODTransitionLOD(x)
                  AL_LODObject(tLOD).LODSwich=0
                  tObjectAL=AL_LODObject(tLOD).ObjectAL
                  delete object AL_Object(tObjectAL).Object
                  if AL_LODObject(tLOD).ObjectLOD=0 then LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,AL_LODObject(tLOD).Object1)
                  if AL_LODObject(tLOD).ObjectLOD=1 then LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,AL_LODObject(tLOD).Object2)
                  if AL_LODObject(tLOD).ObjectLOD=2 then LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,AL_LODObject(tLOD).Object3)
                  if AL_LODObject(tLOD).ObjectLOD=3 then LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,AL_LODObject(tLOD).Object4)
                  if AL_LODObject(tLOD).ObjectLOD=4 then LOD_Instance(tObjectAL,AL_Object(tObjectAL).Object,AL_LODObject(tLOD).Object5)
                  LOD_BatchAdd(tLOD,AL_LODObject(tLOD).ObjectLOD)
                  AL_LODTransitionObject(x)=0
                  AL_LODTransitionLOD(x)=0
               endif
            next x
            AL_LODCull=0
            AL_LODTransitionCount=-1
         endif
      endif
   return

`----------------------------------------------------
` Object Instance
`----------------------------------------------------
function LOD_Instance(iObjectAL as integer,iObject as integer,iSource as integer)
   if object exist(iSource)=1 then instance object iObject,iSource else make object box iObject,100,100,100
   position object iObject,AL_Object(iObjectAL).Position.x,AL_Object(iObjectAL).Position.y,AL_Object(iObjectAL).Position.z
   Scale object iObject,AL_Object(iObjectAL).Size.x,AL_Object(iObjectAL).Size.y,AL_Object(iObjectAL).Size.z
   rotate object iObject,AL_Object(iObjectAL).Angle.x,AL_Object(iObjectAL).Angle.y,AL_Object(iObjectAL).Angle.z
   set object mask iObject,AL_Object(iObjectAL).Mask
   set object radius iObject,9999^9999
   exclude object on iObject
endfunction

`----------------------------------------------------
` Get Transition
`----------------------------------------------------
function LOD_Transition(iLOD as integer)
   if AL_LODObject(iLOD).ObjectLOD=0 then tTransition=AL_LODObject(iLOD).ObjectTransition1
   if AL_LODObject(iLOD).ObjectLOD=1 then tTransition=AL_LODObject(iLOD).ObjectTransition2
   if AL_LODObject(iLOD).ObjectLOD=2 then tTransition=AL_LODObject(iLOD).ObjectTransition3
   if AL_LODObject(iLOD).ObjectLOD=3 then tTransition=AL_LODObject(iLOD).ObjectTransition4
   if AL_LODObject(iLOD).ObjectLOD=4 then tTransition=AL_LODObject(iLOD).ObjectTransition5
endfunction tTransition

`----------------------------------------------------
` Batch Add
`----------------------------------------------------
function LOD_BatchAdd(iLOD as integer,iLODLevel as integer)
   if AL_LODObject(iLOD).BatchMode<>iLODLevel
      tObjectAL=AL_LODObject(iLOD).ObjectAL
      LOD_BatchRemove(iLOD)
      tLODBatch=-1
      if iLODLevel=0 and AL_LODObject(iLOD).Batch1>-1 then tLODBatch=AL_LODObject(iLOD).Batch1
      if iLODLevel=1 and AL_LODObject(iLOD).Batch2>-1 then tLODBatch=AL_LODObject(iLOD).Batch2
      if iLODLevel=2 and AL_LODObject(iLOD).Batch3>-1 then tLODBatch=AL_LODObject(iLOD).Batch3
      if iLODLevel=3 and AL_LODObject(iLOD).Batch4>-1 then tLODBatch=AL_LODObject(iLOD).Batch4
      if iLODLevel=4 and AL_LODObject(iLOD).Batch5>-1 then tLODBatch=AL_LODObject(iLOD).Batch5
      if tLODBatch>-1
         if AL_BatchGroup(tLODBatch).InUse=1
            tBatch=ObjectBatch_Add(-(tLODBatch+1))
            AL_Object(tObjectAL).Batched=tBatch
            VFC_Bounds(AL_Object(tObjectAL).Bounds).Handel=tBatch
            VFC_Bounds(AL_Object(tObjectAL).Bounds).Group=1
            if AL_BatchGroup(tBatchGroup).Occlude=1 then VFC_Bounds(AL_Object(tObjectAL).Bounds).BatchGroup=tBatchGroup+1 else VFC_Bounds(AL_Object(tObjectAL).Bounds).BatchGroup=0
            Occlusion_BoundsUpdate(AL_Object(tObjectAL).Bounds)
            AL_Batch(tBatch).Position.x=AL_Object(tObjectAL).Position.x
            AL_Batch(tBatch).Position.y=AL_Object(tObjectAL).Position.y
            AL_Batch(tBatch).Position.z=AL_Object(tObjectAL).Position.z
            AL_Batch(tBatch).Size.x=AL_Object(tObjectAL).Size.x
            AL_Batch(tBatch).Size.y=AL_Object(tObjectAL).Size.y
            AL_Batch(tBatch).Size.z=AL_Object(tObjectAL).Size.z
            AL_Batch(tBatch).Angle.x=AL_Object(tObjectAL).Angle.x
            AL_Batch(tBatch).Angle.y=AL_Object(tObjectAL).Angle.y
            AL_Batch(tBatch).Angle.z=AL_Object(tObjectAL).Angle.z
            rotate x matrix4 Matrix(1),wrapvalue(AL_Batch(tBatch).Angle.x)*0.01745329251
            rotate y matrix4 Matrix(2),wrapvalue(AL_Batch(tBatch).Angle.y)*0.01745329251
            rotate z matrix4 Matrix(3),wrapvalue(AL_Batch(tBatch).Angle.z)*0.01745329251
            multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
            multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
            scale matrix4 Matrix(1),AL_Batch(tBatch).Size.x/100,AL_Batch(tBatch).Size.y/100,AL_Batch(tBatch).Size.z/100
            multiply matrix4 Matrix(1),Matrix(1),Matrix(4)
            AL_Batch(tBatch).Matrix1.x=get matrix4 element(Matrix(1),0):AL_Batch(tBatch).Matrix1.y=get matrix4 element(Matrix(1),1):AL_Batch(tBatch).Matrix1.z=get matrix4 element(Matrix(1),2)
            AL_Batch(tBatch).Matrix2.x=get matrix4 element(Matrix(1),4):AL_Batch(tBatch).Matrix2.y=get matrix4 element(Matrix(1),5):AL_Batch(tBatch).Matrix2.z=get matrix4 element(Matrix(1),6)
            AL_Batch(tBatch).Matrix3.x=get matrix4 element(Matrix(1),8):AL_Batch(tBatch).Matrix3.y=get matrix4 element(Matrix(1),9):AL_Batch(tBatch).Matrix3.z=get matrix4 element(Matrix(1),10)
            AL_Batch(tBatch).Scale.x=AL_Object(tObjectAL).Scale.x
            AL_Batch(tBatch).Scale.y=AL_Object(tObjectAL).Scale.x
            AL_Batch(tBatch).Scale.z=AL_Object(tObjectAL).Scale.x
            AL_Batch(tBatch).Radius=AL_Object(tObjectAL).Radius
            AL_Batch(tBatch).AtualSize.x=AL_Object(tObjectAL).AtualSize.x
            AL_Batch(tBatch).AtualSize.y=AL_Object(tObjectAL).AtualSize.y
            AL_Batch(tBatch).AtualSize.z=AL_Object(tObjectAL).AtualSize.z
         endif
      endif
      AL_LODObject(iLOD).BatchMode=iLODLevel
   endif
endfunction

`----------------------------------------------------
` Batch Remove
`----------------------------------------------------
function LOD_BatchRemove(iLOD as integer)
   tObjectAL=AL_LODObject(iLOD).ObjectAL
   if AL_Object(tObjectAL).Batched>-1
      ObjectBatch_Remove(AL_Object(tObjectAL).Batched)
      VFC_Bounds(AL_Object(tObjectAL).Bounds).Handel=AL_Object(tObjectAL).Object
      VFC_Bounds(AL_Object(tObjectAL).Bounds).Group=0
      VFC_Bounds(AL_Object(tObjectAL).Bounds).BatchGroup=0
      Occlusion_BoundsUpdate(AL_Object(tObjectAL).Bounds)
      AL_Object(tObjectAL).Batched=-1
   endif
   AL_LODObject(iLOD).BatchMode=-1
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_ImposterData
   InUse as boolean
   Object as integer
   CubeMap1 as integer
   CubeMap2 as integer
   CubeMap3 as integer
   Offsets as Vec3Float
   Shadow as boolean
   Vegetation as boolean
   Size as Vec3Float
   Center as Vec3Float
   ImposterCount as integer
   pInstance as dword
   pMeshLimb as dword
   pMeshUpdate as dword
endtype

type AL_ImposterInstanceData
   InUse as boolean
   Imposter as integer
   ImposterIdx as integer
   Update as boolean
   Position as Vec3Float
   Scale as Vec3Float
   Angle as Vec3Float
endtype

`----------------------------------------------------
` Create Imposter
`----------------------------------------------------
function Imposter_Create(iObject as integer,iColorTexture as integer)
   tImposter=-1
   for x=AL_ImposterFreeUp to 256
      if AL_Imposter(x).InUse=0 then tImposter=x:exit
   next x
   if tImposter>-1
      AL_ImposterFreeUp=tImposter
      if AL_ImposterTotal<tImposter then AL_ImposterTotal=tImposter
      AL_Imposter(tImposter).InUse=1
      AL_Imposter(tImposter).ImposterCount=-1
      AL_Imposter(tImposter).Shadow=0
      AL_Imposter(tImposter).Offsets.x=0
      AL_Imposter(tImposter).Offsets.y=0
      AL_Imposter(tImposter).Offsets.z=0
      if iColorTexture>0 then AL_Imposter(tImposter).Vegetation=1 else AL_Imposter(tImposter).Vegetation=0
      AL_Imposter(tImposter).pInstance=make memory(24004)
      AL_Imposter(tImposter).pMeshLimb=make memory(28)
      AL_Imposter(tImposter).pMeshUpdate=make memory(28)
      fill memory AL_Imposter(tImposter).pInstance,0,24004
      fill memory AL_Imposter(tImposter).pMeshLimb,0,28
      fill memory AL_Imposter(tImposter).pMeshUpdate,0,28
      if AL_Imposter(tImposter).CubeMap1=0
         AL_Imposter(tImposter).CubeMap1=CubeTex_MakeNew(256,0,21)
         AL_Imposter(tImposter).CubeMap2=CubeTex_MakeNew(128,0,21)
         AL_Imposter(tImposter).CubeMap3=CubeTex_MakeNew(128,0,21)
         CubeTex_SetRange AL_Imposter(tImposter).CubeMap1,1,200
         CubeTex_SetRange AL_Imposter(tImposter).CubeMap2,1,200
         CubeTex_SetRange AL_Imposter(tImposter).CubeMap3,1,200
      endif
      pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",iObject)
      tVisible=PeekByte1(pObject+1160)
      tExcluded=PeekByte2(pObject+1184)
      tMask=PeekDword(pObject+1220)
      AL_Imposter(tImposter).Size.x=1*(100.0/object size x(iObject))
      AL_Imposter(tImposter).Size.y=1*(100.0/object size y(iObject))
      AL_Imposter(tImposter).Size.z=1*(100.0/object size z(iObject))
      Vector4Float(2).x=object angle x(iObject)
      Vector4Float(2).y=object angle y(iObject)
      Vector4Float(2).z=object angle z(iObject)
      AL_Imposter(tImposter).Center.x=object collision center x(iObject)
      AL_Imposter(tImposter).Center.y=object collision center y(iObject)
      AL_Imposter(tImposter).Center.z=object collision center z(iObject)
      set vector4 Vector4(1),-AL_Imposter(tImposter).Center.x,-AL_Imposter(tImposter).Center.y,-AL_Imposter(tImposter).Center.z,0
      for e=0 to AL_EffectActiveCount
         set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ImposterPosition",Vector4(1)
      next e
      set object wireframe iObject,0
      rotate object iObject,0,0,0
      show object iObject
      exclude object off iObject
      set object mask iObject,2^AL_Camera(8)
      backdrop off
      set camera range AL_Camera(8),1,200
      set camera aspect AL_Camera(8),1
      exclude object off AL_ImposterObject
      for t=0 to 5
         if t=0 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,-50,0,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,-50,0,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,-50,0,0:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x*0.001,AL_Imposter(tImposter).Size.y,AL_Imposter(tImposter).Size.z,0:set vector4 Vector4(2),0,0,1,0:set vector4 Vector4(3),0,1,0,0:set vector4 Vector4(4),-1,0,0,0
         if t=1 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,50,0,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,50,0,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,50,0,0:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x*0.001,AL_Imposter(tImposter).Size.y,AL_Imposter(tImposter).Size.z,0:set vector4 Vector4(2),0,0,1,0:set vector4 Vector4(3),0,-1,0,0:set vector4 Vector4(4),1,0,0,0
         if t=2 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,0,-50,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,0,-50,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,0,-50,0:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x,AL_Imposter(tImposter).Size.y*0.001,AL_Imposter(tImposter).Size.z,0:set vector4 Vector4(2),0,0,1,0:set vector4 Vector4(3),-1,0,0,0:set vector4 Vector4(4),0,-1,0,0
         if t=3 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,0,50,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,0,50,0:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,0,50,0:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x,AL_Imposter(tImposter).Size.y*0.001,AL_Imposter(tImposter).Size.z,0:set vector4 Vector4(2),0,0,1,0:set vector4 Vector4(3),1,0,0,0:set vector4 Vector4(4),0,1,0,0
         if t=4 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,0,0,-50:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,0,0,-50:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,0,0,-50:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x,AL_Imposter(tImposter).Size.y,AL_Imposter(tImposter).Size.z*0.001,0:set vector4 Vector4(2),-1,0,0,0:set vector4 Vector4(3),0,1,0,0:set vector4 Vector4(4),0,0,-1,0
         if t=5 then CubeTex_SetPosition AL_Imposter(tImposter).CubeMap1,0,0,50:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap2,0,0,50:CubeTex_SetPosition AL_Imposter(tImposter).CubeMap3,0,0,50:set vector4 Vector4(1),AL_Imposter(tImposter).Size.x,AL_Imposter(tImposter).Size.y,AL_Imposter(tImposter).Size.z*0.001,0:set vector4 Vector4(2),-1,0,0,0:set vector4 Vector4(3),0,-1,0,0:set vector4 Vector4(4),0,0,1,0
         for e=0 to AL_EffectActiveCount
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ImposterSize",Vector4(1)
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ImposterDirX",Vector4(2)
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ImposterDirY",Vector4(3)
            set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"ImposterDirZ",Vector4(4)
            set effect technique AL_Effect(AL_EffectActive(e)).Effect,"ImposterBase"
         next e
         set effect technique AL_ImposterEffect(1),"FillBase"
         set camera view AL_Camera(8),0,0,256,256
         CubeTex_SyncFaces AL_Imposter(tImposter).CubeMap1,AL_Camera(8),2^t
         set camera view AL_Camera(8),0,0,128,128
         for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"ImposterNormal":next e
         set effect technique AL_ImposterEffect(1),"FillNormal"
         CubeTex_SyncFaces AL_Imposter(tImposter).CubeMap2,AL_Camera(8),2^t
         for e=0 to AL_EffectActiveCount:set effect technique AL_Effect(AL_EffectActive(e)).Effect,"ImposterSpecular":next e
         set effect technique AL_ImposterEffect(1),"FillSpecular"
         CubeTex_SyncFaces AL_Imposter(tImposter).CubeMap3,AL_Camera(8),2^t
      next t
      exclude object on AL_ImposterObject
      rotate object iObject,Vector4Float(2).x,Vector4Float(2).y,Vector4Float(2).z
      if tVisible=1 then show object iObject else show object iObject
      if tExcluded=1 then exclude object on iObject else exclude object off iObject
      set object mask iObject,tMask
      AL_Imposter(tImposter).Object=FreeUpObject(32500+rnd(16250))
      load object AL_Directory+"Resources\Imposter.dbo",AL_Imposter(tImposter).Object
      if AL_Imposter(tImposter).Vegetation=0 then set object effect AL_Imposter(tImposter).Object,AL_ImposterEffect(2) else set object effect AL_Imposter(tImposter).Object,AL_ImposterEffect(3)
      CubeTex_ApplyObject AL_Imposter(tImposter).CubeMap1,AL_Imposter(tImposter).Object,0
      CubeTex_ApplyObject AL_Imposter(tImposter).CubeMap2,AL_Imposter(tImposter).Object,1
      CubeTex_ApplyObject AL_Imposter(tImposter).CubeMap3,AL_Imposter(tImposter).Object,2
      if iColorTexture>0 then texture object AL_Imposter(tImposter).Object,3,iColorTexture
      tMask=2^AL_Camera(1)
      if AL_PostFilter=1 then tMask=tMask+1
      set object mask AL_Imposter(tImposter).Object,tMask
      set object cull AL_Imposter(tImposter).Object,0
      set object radius AL_Imposter(tImposter).Object,9999^9999
      exclude object on AL_Imposter(tImposter).Object
      pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_Imposter(tImposter).Object)
      pMesh=PeekDword(pObject+8)
      for l=0 to 5
         pMeshLimb=PeekDword(pMesh+(l*4))
         PokeDword(AL_Imposter(tImposter).pMeshLimb+(l*4),pMeshLimb)
         exclude limb on AL_Imposter(tImposter).Object,l
      next l
   endif
endfunction tImposter

`----------------------------------------------------
` Delete Imposter
`----------------------------------------------------
function Imposter_Delete(iImposter as integer)
   if AL_Imposter(iImposter).InUse=1
      for o=0 to AL_Imposter(tImposter).ImposterCount
         tInstance=PeekInteger(AL_Imposter(iImposter).pInstance+(o*4))-1
         AL_ImposterInstance(tInstance).InUse=0
         AL_ImposterInstance(tInstance).Update=0
         if AL_ImposterInstanceFreeUp>tInstance then AL_ImposterInstanceFreeUp=tInstance
      next o
      delete object AL_Imposter(iImposter).Object
      delete memory AL_Imposter(iImposter).pInstance
      delete memory AL_Imposter(iImposter).pMeshLimb
      delete memory AL_Imposter(iImposter).pMeshUpdate
      AL_Imposter(iImposter).InUse=0
      AL_Imposter(iImposter).ImposterCount=-1
      if AL_ImposterFreeUp>iImposter then AL_ImposterFreeUp=iImposter
   endif
endfunction

`----------------------------------------------------
` Set Imposter Plain Offsets
`----------------------------------------------------
function Imposter_SetOffset(iImposter as integer,iX as float,iY as float,iZ as float)
   if AL_Imposter(iImposter).InUse=1
      AL_Imposter(iImposter).Offsets.x=iX/200
      AL_Imposter(iImposter).Offsets.y=iY/200
      AL_Imposter(iImposter).Offsets.z=iZ/200
      for o=0 to AL_Imposter(iImposter).ImposterCount
         tInstance=PeekInteger(AL_Imposter(iImposter).pInstance+(o*4))-1
         Imposter_Update(tInstance)
      next o
   endif
endfunction

`----------------------------------------------------
` Set Imposter Shadows
`----------------------------------------------------
function Imposter_SetShadow(iImposter as integer,iShadow as boolean)
   if AL_Imposter(iImposter).InUse=1 and AL_Imposter(iImposter).Shadow<>iShadow
      AL_Imposter(iImposter).Shadow=iShadow
      tMask=2^AL_Camera(1)
      if iShadow=1 then tMask=tMask+(2^AL_DirLightCamera(1))+(2^AL_DirLightCamera(2))
      if AL_PostFilter=1 then tMask=tMask+1
      set object mask AL_Imposter(iImposter).Object,tMask
   endif
endfunction

`----------------------------------------------------
` Imposter Add Instance
`----------------------------------------------------
function Imposter_Add(iImposter as integer)
   if AL_Imposter(iImposter).InUse=1 and AL_Imposter(iImposter).ImposterCount<5000
      tInstance=-1
      for i=AL_ImposterInstanceFreeUp to AL_ImposterInstanceCount
         if AL_ImposterInstance(i).InUse=0 then tInstance=i:exit
      next i
      if tInstance=-1
         tInstance=AL_ImposterInstanceCount+1
         AL_ImposterInstanceCount=AL_ImposterInstanceCount+1000
         dim AL_ImposterInstance(AL_ImposterInstanceCount)
         dim AL_ImposterInstanceUpdate(AL_ImposterInstanceCount)
      endif
      AL_ImposterInstanceFreeUp=tInstance
      AL_ImposterInstance(tInstance).InUse=1
      AL_ImposterInstance(tInstance).Imposter=iImposter
      inc AL_Imposter(iImposter).ImposterCount
      PokeInteger(AL_Imposter(iImposter).pInstance+(AL_Imposter(iImposter).ImposterCount*4),tInstance+1)
      AL_ImposterInstance(tInstance).ImposterIdx=AL_Imposter(iImposter).ImposterCount
      AL_ImposterInstance(tInstance).Position.x=0
      AL_ImposterInstance(tInstance).Position.y=-99999999
      AL_ImposterInstance(tInstance).Position.z=0
      AL_ImposterInstance(tInstance).Scale.x=0
      AL_ImposterInstance(tInstance).Scale.y=0
      AL_ImposterInstance(tInstance).Scale.z=0
      AL_ImposterInstance(tInstance).Angle.x=0
      AL_ImposterInstance(tInstance).Angle.y=0
      AL_ImposterInstance(tInstance).Angle.z=0
      if AL_ImposterInstance(tInstance).Update=0
         AL_ImposterInstance(tInstance).Update=1
         inc AL_ImposterInstanceUpdateCount
         AL_ImposterInstanceUpdate(AL_ImposterInstanceUpdateCount)=tInstance
      endif
   endif
endfunction tInstance

`----------------------------------------------------
` Imposter Remove Instance
`----------------------------------------------------
function Imposter_Remove(iInstance as integer)
   if AL_ImposterInstance(iInstance).InUse=1
      AL_ImposterInstance(iInstance).InUse=0
      AL_ImposterInstance(iInstance).Update=0
      if AL_ImposterInstanceFreeUp>iInstance then AL_ImposterInstanceFreeUp=iInstance
      tImposter=AL_ImposterInstance(iInstance).Imposter
      tImposterIdx=AL_ImposterInstance(iInstance).ImposterIdx
      if tImposterIdx<AL_Imposter(tImposter).ImposterCount
         tInstance=PeekInteger(AL_Imposter(tImposter).pInstance+(AL_Imposter(tImposter).ImposterCount*4))-1
         AL_ImposterInstance(tInstance).ImposterIdx=tImposterIdx
         PokeInteger(AL_Imposter(tImposter).pInstance+(tImposterIdx*4),tInstance+1)
         Imposter_Update(tInstance)
      endif
      tImposterLimb=floor(AL_Imposter(tImposter).ImposterCount/1000)
      tIndex=(AL_Imposter(tImposter).ImposterCount-(tImposterLimb*1000))*12
      PokeInteger(AL_Imposter(tImposter).pMeshUpdate+(tImposterLimb*4),1)
      pMeshLimb=PeekDword(AL_Imposter(tImposter).pMeshLimb+(tImposterLimb*4))
      tFVFSize=PeekInteger(pMeshLimb+8)
      pVertex=PeekDword(pMeshLimb+20)
      for c=1 to 12
         PokeFloat((pVertex+(tIndex*tFVFSize)),0)
         PokeFloat((pVertex+(tIndex*tFVFSize))+4,-99999999)
         PokeFloat((pVertex+(tIndex*tFVFSize))+8,0)
         inc tIndex
      next c
      dec AL_Imposter(tImposter).ImposterCount
   endif
endfunction

`----------------------------------------------------
` Imposter Set Instance Position
`----------------------------------------------------
function Imposter_SetPosition(iInstance as integer,iPositionX as float,iPositionY as float,iPositionZ as float)
   if AL_ImposterInstance(iInstance).InUse=1
      AL_ImposterInstance(iInstance).Position.x=iPositionX
      AL_ImposterInstance(iInstance).Position.y=iPositionY
      AL_ImposterInstance(iInstance).Position.z=iPositionZ
      if AL_ImposterInstance(iInstance).Update=0
         AL_ImposterInstance(iInstance).Update=1
         inc AL_ImposterInstanceUpdateCount
         AL_ImposterInstanceUpdate(AL_ImposterInstanceUpdateCount)=iInstance
      endif
   endif
endfunction

`----------------------------------------------------
` Imposter Set Instance Angle
`----------------------------------------------------
function Imposter_SetAngle(iInstance as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_ImposterInstance(iInstance).InUse=1
      AL_ImposterInstance(iInstance).Angle.x=iAngleX
      AL_ImposterInstance(iInstance).Angle.y=iAngleY
      AL_ImposterInstance(iInstance).Angle.z=iAngleZ
      if AL_ImposterInstance(iInstance).Update=0
         AL_ImposterInstance(iInstance).Update=1
         inc AL_ImposterInstanceUpdateCount
         AL_ImposterInstanceUpdate(AL_ImposterInstanceUpdateCount)=iInstance
      endif
   endif
endfunction

`----------------------------------------------------
` Imposter Set Instance Scale
`----------------------------------------------------
function Imposter_SetScale(iInstance as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_ImposterInstance(iInstance).InUse=1
      AL_ImposterInstance(iInstance).Scale.x=iScaleX
      AL_ImposterInstance(iInstance).Scale.y=iScaleY
      AL_ImposterInstance(iInstance).Scale.z=iScaleZ
      if AL_ImposterInstance(iInstance).Update=0
         AL_ImposterInstance(iInstance).Update=1
         inc AL_ImposterInstanceUpdateCount
         AL_ImposterInstanceUpdate(AL_ImposterInstanceUpdateCount)=iInstance
      endif
   endif
endfunction

`----------------------------------------------------
`Show Imposter
   _Imposter_Show:
      if AL_ImposterInstanceUpdateCount>-1
         for x=0 to AL_ImposterInstanceUpdateCount
            tInstance=AL_ImposterInstanceUpdate(x)
            if AL_ImposterInstance(tInstance).Update=1 then Imposter_Update(tInstance)
            AL_ImposterInstance(tInstance).Update=0
         next x
         AL_ImposterInstanceUpdateCount=-1
      endif
      for x=0 to AL_ImposterTotal
         if AL_Imposter(x).InUse=1
            if AL_Imposter(x).ImposterCount>-1
               for l=0 to 5
                  if PeekInteger(AL_Imposter(x).pMeshUpdate+(l*4))=1
                     PokeInteger(AL_Imposter(x).pMeshUpdate+(l*4),0)
                     pMeshLimb=PeekDword(AL_Imposter(x).pMeshLimb+(l*4))
                     PokeByte2(pMeshLimb+1000,1)
                  endif
               next l
               exclude object off AL_Imposter(x).Object
               exclude limb off AL_Imposter(x).Object,0
               if AL_Imposter(x).ImposterCount>999 then exclude limb off AL_Imposter(x).Object,1
               if AL_Imposter(x).ImposterCount>1999 then exclude limb off AL_Imposter(x).Object,2
               if AL_Imposter(x).ImposterCount>2999 then exclude limb off AL_Imposter(x).Object,3
               if AL_Imposter(x).ImposterCount>3999 then exclude limb off AL_Imposter(x).Object,4
               if AL_Imposter(x).ImposterCount>4999 then exclude limb off AL_Imposter(x).Object,5
            endif
         endif
      next x
   return

`----------------------------------------------------
`Hide Imposter
   _Imposter_Hide:
      for x=0 to AL_ImposterTotal
         if AL_Imposter(x).InUse=1
            if AL_Imposter(x).ImposterCount>-1
               exclude object on AL_Imposter(x).Object
               for l=0 to 5:exclude limb on AL_Imposter(x).Object,l:next l
            endif
         endif
      next x
   return

`----------------------------------------------------
` Update Imposter Instance
`----------------------------------------------------
function Imposter_Update(iInstance as integer)
   if AL_ImposterInstance(iInstance).InUse=1
      tImposter=AL_ImposterInstance(iInstance).Imposter
      tImposterIdx=AL_ImposterInstance(iInstance).ImposterIdx
      rotate x matrix4 Matrix(1),AL_ImposterInstance(iInstance).Angle.x*0.01745329251
      rotate y matrix4 Matrix(2),AL_ImposterInstance(iInstance).Angle.y*0.01745329251
      rotate z matrix4 Matrix(3),AL_ImposterInstance(iInstance).Angle.z*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      scale matrix4 Matrix(1),AL_ImposterInstance(iInstance).Scale.x/AL_Imposter(tImposter).Size.x,AL_ImposterInstance(iInstance).Scale.y/AL_Imposter(tImposter).Size.y,AL_ImposterInstance(iInstance).Scale.z/AL_Imposter(tImposter).Size.z
      multiply matrix4 Matrix(1),Matrix(1),Matrix(4)
      set vector3 Vector3(7),AL_Imposter(tImposter).Center.x*(AL_ImposterInstance(iInstance).Scale.x/100),AL_Imposter(tImposter).Center.y*(AL_ImposterInstance(iInstance).Scale.y/100),AL_Imposter(tImposter).Center.z*(AL_ImposterInstance(iInstance).Scale.z/100)
      transform coords vector3 Vector3(7),Vector3(7),Matrix(4)
      tImposterLimb=floor(tImposterIdx/1000)
      tIndex=(tImposterIdx-(tImposterLimb*1000))*12
      PokeInteger(AL_Imposter(tImposter).pMeshUpdate+(tImposterLimb*4),1)
      pMeshLimb=PeekDword(AL_Imposter(tImposter).pMeshLimb+(tImposterLimb*4))
      tFVFSize=PeekInteger(pMeshLimb+8)
      pVertex=PeekDword(pMeshLimb+20)
      for o=1 to 3
         if o=1
            set vector3 Vector3(1),-0.5,0.5,AL_Imposter(tImposter).Offsets.z:set vector3 Vector3(2),0.5,0.5,AL_Imposter(tImposter).Offsets.z:set vector3 Vector3(3),-0.5,-0.5,AL_Imposter(tImposter).Offsets.z
            set vector3 Vector3(4),0.5,-0.5,AL_Imposter(tImposter).Offsets.z:set vector3 Vector3(5),0,0,1
            set vector3 Vector3(6),0,0,AL_Imposter(tImposter).Offsets.z
         endif
         if o=2
            set vector3 Vector3(1),-0.5,AL_Imposter(tImposter).Offsets.y,-0.5:set vector3 Vector3(2),0.5,AL_Imposter(tImposter).Offsets.y,-0.5:set vector3 Vector3(3),-0.5,AL_Imposter(tImposter).Offsets.y,0.5
            set vector3 Vector3(4),0.5,AL_Imposter(tImposter).Offsets.y,0.5:set vector3 Vector3(5),0,1,0
            set vector3 Vector3(6),0,AL_Imposter(tImposter).Offsets.y,0
         endif
         if o=3
            set vector3 Vector3(1),-AL_Imposter(tImposter).Offsets.x,0.5,0.5:set vector3 Vector3(2),-AL_Imposter(tImposter).Offsets.x,0.5,-0.5:set vector3 Vector3(3),-AL_Imposter(tImposter).Offsets.x,-0.5,0.5
            set vector3 Vector3(4),-AL_Imposter(tImposter).Offsets.x,-0.5,-0.5:set vector3 Vector3(5),1,0,0
            set vector3 Vector3(6),-AL_Imposter(tImposter).Offsets.x,0,0
         endif
         for x=1 to 6:transform coords vector3 Vector3(x),Vector3(x),Matrix(1):next x
         normalize vector3 Vector3(5),Vector3(5)
         for c=1 to 4
            PokeFloat((pVertex+(tIndex*tFVFSize)),x vector3(Vector3(c))+x vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.x)
            PokeFloat((pVertex+(tIndex*tFVFSize))+4,y vector3(Vector3(c))+y vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.y)
            PokeFloat((pVertex+(tIndex*tFVFSize))+8,z vector3(Vector3(c))+z vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.z)
            PokeFloat((pVertex+(tIndex*tFVFSize))+12,x vector3(Vector3(5)))
            PokeFloat((pVertex+(tIndex*tFVFSize))+16,y vector3(Vector3(5)))
            PokeFloat((pVertex+(tIndex*tFVFSize))+20,z vector3(Vector3(5)))
            PokeFloat((pVertex+(tIndex*tFVFSize))+48,x vector3(Vector3(6))+x vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.x)
            PokeFloat((pVertex+(tIndex*tFVFSize))+52,y vector3(Vector3(6))+y vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.y)
            PokeFloat((pVertex+(tIndex*tFVFSize))+56,z vector3(Vector3(6))+z vector3(Vector3(7))+AL_ImposterInstance(iInstance).Position.z)
            inc tIndex
         next c
      next o
      tIndex=(tImposterIdx-(tImposterLimb*1000))*12
      Vector4Float(1).y=AL_ImposterInstance(iInstance).Scale.y/AL_Imposter(tImposter).Size.y
      PokeFloat((pVertex+(tIndex*tFVFSize))+60,Vector4Float(1).y)
      PokeFloat((pVertex+((tIndex+1)*tFVFSize))+60,Vector4Float(1).y)
      PokeFloat((pVertex+((tIndex+4)*tFVFSize))+60,Vector4Float(1).y*(AL_Imposter(tImposter).Offsets.y+0.5))
      PokeFloat((pVertex+((tIndex+5)*tFVFSize))+60,Vector4Float(1).y*(AL_Imposter(tImposter).Offsets.y+0.5))
      PokeFloat((pVertex+((tIndex+6)*tFVFSize))+60,Vector4Float(1).y*(AL_Imposter(tImposter).Offsets.y+0.5))
      PokeFloat((pVertex+((tIndex+7)*tFVFSize))+60,Vector4Float(1).y*(AL_Imposter(tImposter).Offsets.y+0.5))
      PokeFloat((pVertex+((tIndex+8)*tFVFSize))+60,Vector4Float(1).y)
      PokeFloat((pVertex+((tIndex+9)*tFVFSize))+60,Vector4Float(1).y)
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_StaticBatchData
   InUse as integer
   ObjectCount as integer
   pObject as dword
endtype

type AL_StaticBatchObjectData
   InUse as integer
   StaticBatch as integer
   Index as integer
   Position as Vec3Float
   Scale as Vec3Float
   Angle as Vec3Float
endtype

type AL_BatchGroupData
   InUse as integer
   Count as integer
   FreeUp as integer
   Batched as integer
   Object as integer
   ObjectCount as integer
   VisibleCount as integer
   DrawCount as integer
   PrevDrawCount as integer
   DrawObjectCount as integer
   Occlude as boolean
   OccludeAdd as boolean
   DynamicEnabled as boolean
   DrawDistance as float
   Mask as integer
   MaskAdvLighting as boolean
   MaskShadow as boolean
   MaskDirectionalShadow as integer
   ReflectionCapture as boolean
   PixelCount as integer
   pBatch as dword
   pObject as dword
   pPixel as dword
   pEffect as dword
   pWMat1 as dword
   pWMat2 as dword
   pWMat3 as dword
endtype

type AL_BatchData
   InUse as integer
   BatchGroup as integer
   BatchGroupIndex as integer
   Visible as integer
   Bounds as integer
   Position as Vec3Float
   Scale as Vec3Float
   Radius as float
   Size as Vec3Float
   AtualSize as Vec3Float
   Angle as Vec3Float
   Center as Vec3Float
   Matrix1 as Vec3Float
   Matrix2 as Vec3Float
   Matrix3 as Vec3Float
endtype

type AL_BatchShaderData
   Effect as integer
   pEffect as dword
   pPixel as dword
endtype

`----------------------------------------------------
` Batch Static Create
`----------------------------------------------------
function StaticBatch_Create()
   tStaticBatch=-1
   for x=AL_StaticBatchFreeup to AL_StaticBatchCount
      if AL_StaticBatch(x).InUse=0 then tStaticBatch=x:exit
   next x
   if tStaticBatch=-1
      tStaticBatch=AL_StaticBatchCount+1
      inc AL_StaticBatchCount,10
      dim AL_StaticBatch(AL_StaticBatchCount)
   endif
   if tStaticBatch>-1
      AL_StaticBatchFreeup=tStaticBatch
      AL_StaticBatch(tStaticBatch).InUse=1
      AL_StaticBatch(tStaticBatch).ObjectCount=-1
      AL_StaticBatch(tStaticBatch).pObject=make memory(40000)
   endif
endfunction tStaticBatch

`----------------------------------------------------
` Batch Static Delete
`----------------------------------------------------
function StaticBatch_Delete(iStaticBatch as integer)
   if AL_StaticBatch(iStaticBatch).InUse=1
      AL_StaticBatch(iStaticBatch).InUse=0
      if AL_StaticBatchFreeup>iStaticBatch then AL_StaticBatchFreeup=iStaticBatch
      for d=0 to AL_StaticBatch(iStaticBatch).ObjectCount
         tStaticObject=PeekInteger(AL_StaticBatch(iStaticBatch).pObject+(d*4))
         AL_StaticBatchObject(tStaticObject).InUse=0
         if AL_StaticBatchObjectFreeup>tStaticObject then AL_StaticBatchObjectFreeup=tStaticObject
      next d
      delete memory AL_StaticBatch(iStaticBatch).pObject
   endif
endfunction

`----------------------------------------------------
` Terrain Decal Add
`----------------------------------------------------
function StaticBatch_Add(iStaticBatch as integer)
   if AL_StaticBatch(iStaticBatch).InUse=1
      tStaticObject=-1
      for x=AL_StaticBatchObjectFreeup to AL_StaticBatchObjectCount
         if AL_StaticBatchObject(x).InUse=0 then tStaticObject=x:exit
      next x
      if tStaticObject=-1
         tStaticObject=AL_StaticBatchObjectCount+1
         inc AL_StaticBatchObjectCount,10
         dim AL_StaticBatchObject(AL_StaticBatchObjectCount)
      endif
      if tStaticObject>-1
         AL_StaticBatchObjectFreeup=tStaticObject
         inc AL_StaticBatch(iStaticBatch).ObjectCount
         PokeInteger(AL_StaticBatch(iStaticBatch).pObject+(AL_StaticBatch(iStaticBatch).ObjectCount*4),tStaticObject)
         AL_StaticBatchObject(tStaticObject).InUse=1
         AL_StaticBatchObject(tStaticObject).StaticBatch=iStaticBatch
         AL_StaticBatchObject(tStaticObject).Index=AL_StaticBatch(iStaticBatch).ObjectCount
         AL_StaticBatchObject(tStaticObject).Position.x=0
         AL_StaticBatchObject(tStaticObject).Position.y=0
         AL_StaticBatchObject(tStaticObject).Position.z=0
         AL_StaticBatchObject(tStaticObject).Scale.x=100
         AL_StaticBatchObject(tStaticObject).Scale.y=100
         AL_StaticBatchObject(tStaticObject).Scale.z=100
         AL_StaticBatchObject(tStaticObject).Angle.x=0
         AL_StaticBatchObject(tStaticObject).Angle.y=0
         AL_StaticBatchObject(tStaticObject).Angle.z=0
      endif
   endif
endfunction tStaticObject

`----------------------------------------------------
` Batch Static Remove
`----------------------------------------------------
function StaticBatch_Remove(iStaticObject as integer)
   if AL_StaticBatchObject(iStaticObject).InUse=1
      AL_StaticBatchObject(iStaticObject).InUse=0
      if AL_StaticBatchObjectFreeup>iStaticObject then AL_StaticBatchObjectFreeup=iStaticObject
      tStaticBatch=AL_StaticBatchObject(iStaticObject).StaticBatch
      if AL_StaticBatchObject(iStaticObject).Index<AL_StaticBatch(tStaticBatch).ObjectCount
         for d=AL_StaticBatchObject(iStaticObject).Index to AL_StaticBatch(tStaticBatch).ObjectCount-1
            tDecal=PeekInteger(AL_StaticBatch(tStaticBatch).pObject+((d+1)*4))
            PokeInteger(AL_StaticBatch(tStaticBatch).pObject+(d*4),tDecal)
            AL_StaticBatchObject(tDecal).Index=d
         next d
      endif
      dec AL_StaticBatch(tStaticBatch).ObjectCount
   endif
endfunction

`----------------------------------------------------
` Batch Static Set Position
`----------------------------------------------------
function StaticBatch_SetPosition(iStaticObject as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_StaticBatchObject(iStaticObject).InUse=1
      AL_StaticBatchObject(iStaticObject).Position.x=iPosX
      AL_StaticBatchObject(iStaticObject).Position.y=iPosY
      AL_StaticBatchObject(iStaticObject).Position.z=iPosZ
   endif
endfunction

`----------------------------------------------------
` Batch Static Set Angle
`----------------------------------------------------
function StaticBatch_SetAngle(iStaticObject as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_StaticBatchObject(iStaticObject).InUse=1
      AL_StaticBatchObject(iStaticObject).Angle.x=iAngleX
      AL_StaticBatchObject(iStaticObject).Angle.y=iAngleY
      AL_StaticBatchObject(iStaticObject).Angle.z=iAngleZ
   endif
endfunction

`----------------------------------------------------
` Batch Static Set Scale
`----------------------------------------------------
function StaticBatch_SetScale(iStaticObject as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_StaticBatchObject(iStaticObject).InUse=1
      AL_StaticBatchObject(iStaticObject).Scale.x=iScaleX
      AL_StaticBatchObject(iStaticObject).Scale.y=iScaleY
      AL_StaticBatchObject(iStaticObject).Scale.z=iScaleZ
   endif
endfunction

`----------------------------------------------------
` Batch Static Make Object
`----------------------------------------------------
function StaticBatch_MakeObject(iStaticBatch as integer,iObject as integer,iSourceObject as integer,iDoNotGenerateExtraData as integer)
   if AL_StaticBatch(iStaticBatch).InUse=1
      if object exist(iSourceObject)=1
         if iObject=iSourceObject
            tObject=FreeUpObject(32500+1250)
            clone object tObject,iSourceObject
            tSourceObject=tObject
            tObject=iSourceObject
         else
            if object exist(iObject)=1 then delete object iObject
            clone object iObject,iSourceObject
            tObject=iObject
            tSourceObject=iSourceObject
         endif
         if iDoNotGenerateExtraData=0 then CalculateObjectTangents(tObject,0x002||0x010||0x300)
         if iDoNotGenerateExtraData=-1 then CalculateObjectTangents(tObject,0x002||0x010||0x400)
         tMesh=FreeUpMesh()
         tObjectTemp=FreeUpObject(32500+1250)
         pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",tObject)
         tLimbCount=PeekInteger(pObject)-1
         dim VertexCount(tLimbCount)
         AL_StaticBatchVertex=0
         for l=0 to tLimbCount
            make object from limb tObjectTemp,tObject,l
            make mesh from object tMesh,tObjectTemp
            delete object tObjectTemp
            lock vertexdata for limb tObject,l,2
               VertexCount(l)=get vertexdata vertex count()-1
               for o=1 to AL_StaticBatch(iStaticBatch).ObjectCount:add mesh to vertexdata tMesh:next o
            unlock vertexdata
            if AL_StaticBatchVertex<(VertexCount(l)+1)*(AL_StaticBatch(iStaticBatch).ObjectCount+1) then AL_StaticBatchVertex=(VertexCount(l)+1)*(AL_StaticBatch(iStaticBatch).ObjectCount+1)
            delete mesh tMesh
         next l
         if iDoNotGenerateExtraData<1
            for l=0 to tLimbCount
               lock vertexdata for limb tObject,l,1
                  tVertex=0
                  for o=0 to AL_StaticBatch(iStaticBatch).ObjectCount
                     tStaticObject=PeekInteger(AL_StaticBatch(iStaticBatch).pObject+(o*4))
                     rotate x matrix4 Matrix(1),wrapvalue(AL_StaticBatchObject(tStaticObject).Angle.x)*0.01745329251
                     rotate y matrix4 Matrix(2),wrapvalue(AL_StaticBatchObject(tStaticObject).Angle.y)*0.01745329251
                     rotate y matrix4 Matrix(3),wrapvalue(AL_StaticBatchObject(tStaticObject).Angle.z)*0.01745329251
                     multiply matrix4 Matrix(1),Matrix(1),Matrix(2)
                     multiply matrix4 Matrix(1),Matrix(1),Matrix(3)
                     for v=0 to VertexCount(l)
                        set vector3 Vector3(1),get vertexdata position x(tVertex)*(AL_StaticBatchObject(tStaticObject).Scale.x/100),get vertexdata position y(tVertex)*(AL_StaticBatchObject(tStaticObject).Scale.y/100),get vertexdata position z(tVertex)*(AL_StaticBatchObject(tStaticObject).Scale.z/100)
                        set vector3 Vector3(2),get vertexdata normals x(tVertex),get vertexdata normals y(tVertex),get vertexdata normals z(tVertex)
                        set vector3 Vector3(3),get vertexdata u(tVertex,1),get vertexdata v(tVertex,1),get vertexdata u(tVertex,2)
                        transform coords vector3 Vector3(1),Vector3(1),Matrix(1)
                        transform normals vector3 Vector3(2),Vector3(2),Matrix(1)
                        transform normals vector3 Vector3(3),Vector3(3),Matrix(1)
                        set vertexdata normals tVertex,x vector3(Vector3(2)),y vector3(Vector3(2)),z vector3(Vector3(2))
                        if iDoNotGenerateExtraData=0
                           set vertexdata position tVertex,x vector3(Vector3(1))+AL_StaticBatchObject(tStaticObject).Position.x,y vector3(Vector3(1))+AL_StaticBatchObject(tStaticObject).Position.y,z vector3(Vector3(1))+AL_StaticBatchObject(tStaticObject).Position.z
                           set vertexdata uv tVertex,1,x vector3(Vector3(3)),y vector3(Vector3(3))
                           set vertexdata uv tVertex,2,z vector3(Vector3(3)),0
                        else
                           set vertexdata position tVertex,x vector3(Vector3(1)),y vector3(Vector3(1)),z vector3(Vector3(1))
                           set vertexdata uv tVertex,1,x vector3(Vector3(3)),y vector3(Vector3(3))
                           set vertexdata uv tVertex,2,z vector3(Vector3(3)),AL_StaticBatchObject(tStaticObject).Position.x
                           set vertexdata uv tVertex,3,AL_StaticBatchObject(tStaticObject).Position.z,0
                        endif
                        inc tVertex
                     next v
                  next o
               unlock vertexdata
            next l
         endif
         undim VertexCount()
         if iObject=iSourceObject then delete object tSourceObject
         if iDoNotGenerateExtraData=0 then convert object fvf tObject,0x002||0x010||0x300
         if iDoNotGenerateExtraData=-1 then convert object fvf tObject,0x002||0x010||0x400
         calculate object bounds tObject
      endif
   endif
endfunction

`----------------------------------------------------
` Create Batch
`----------------------------------------------------
function Batch_Create(iObject as integer,iBatchedCount as integer,iDoNotGenerateExtraData as boolean)
   tBatchGroup=-1
   if object exist(iObject)=1
      for b=AL_BatchGroupFreeUp to AL_BatchGroupCount
         if AL_BatchGroup(b).InUse=0 then tBatchGroup=b:exit
      next b
      if tBatchGroup=-1
         tBatchGroup=AL_BatchGroupCount+1
         AL_BatchGroupCount=AL_BatchGroupCount+10
         dim AL_BatchGroup(AL_BatchGroupCount)
      endif
      tStaticBatch=StaticBatch_Create()
      for o=0 to iBatchedCount-1:StaticBatch_Add(tStaticBatch):next o
      tBatchObject=FreeUpObject(34000+(tBatchGroup*50))
      StaticBatch_MakeObject(tStaticBatch,tBatchObject,iObject,iDoNotGenerateExtraData)
      StaticBatch_Delete(tStaticBatch)
      array insert at bottom AL_BatchDraw()
      if tBatchObject>0
         AL_BatchGroupFreeUp=tBatchGroup
         AL_BatchGroup(tBatchGroup).InUse=1
         AL_BatchGroup(tBatchGroup).Count=-1
         AL_BatchGroup(tBatchGroup).FreeUp=0
         AL_BatchGroup(tBatchGroup).Object=tBatchObject
         AL_BatchGroup(tBatchGroup).ObjectCount=-1
         AL_BatchGroup(tBatchGroup).Occlude=0
         AL_BatchGroup(tBatchGroup).Batched=iBatchedCount
         AL_BatchGroup(tBatchGroup).DrawDistance=60
         AL_BatchGroup(tBatchGroup).DrawCount=-1
         AL_BatchGroup(tBatchGroup).PrevDrawCount=-1
         AL_BatchGroup(tBatchGroup).DrawObjectCount=iBatchedCount
         AL_BatchGroup(tBatchGroup).PixelCount=-1
         AL_BatchGroup(tBatchGroup).pBatch=make memory(40000)
         AL_BatchGroup(tBatchGroup).pObject=make memory(4000)
         AL_BatchGroup(tBatchGroup).pPixel=make memory(20000)
         AL_BatchGroup(tBatchGroup).pEffect=make memory(20000)
         AL_BatchGroup(tBatchGroup).pWMat1=make memory(20000)
         AL_BatchGroup(tBatchGroup).pWMat2=make memory(20000)
         AL_BatchGroup(tBatchGroup).pWMat3=make memory(20000)
         fill memory AL_BatchGroup(tBatchGroup).pBatch,0,40000
         fill memory AL_BatchGroup(tBatchGroup).pObject,0,4000
         texture object tBatchObject,6,AL_Image(6)
         set object radius tBatchObject,9999^9999
         exclude object on tBatchObject
         Batch_SetMask(tBatchGroup,1,1,4,1)
      endif
   endif
endfunction tBatchGroup

`----------------------------------------------------
` Delete Batch
`----------------------------------------------------
function Batch_Delete(iBatchGroup as integer)
   if AL_BatchGroup(iBatchGroup).InUse=1
      AL_BatchGroup(iBatchGroup).InUse=0
      if AL_BatchGroupFreeUp>iBatchGroup then AL_BatchGroupFreeUp=iBatchGroup
      Occlusion_SetBatch(iBatchGroup,0)
      for b=0 to AL_BatchGroup(iBatchGroup).Count
         tBatch=PeekInteger(AL_BatchGroup(iBatchGroup).pBatch+(b*4))-1
         if tBatch>-1
            AL_Batch(tBatch).InUse=0
            if AL_Batch(tBatch).Bounds>-1 then FrustumCulling_RemoveBounds(AL_Batch(tBatch).Bounds)
            if AL_BatchFreeUp>tBatch then AL_BatchFreeUp=tBatch
         endif
      next b
      delete object AL_BatchGroup(iBatchGroup).Object
      for o=1 to AL_BatchGroup(iBatchGroup).ObjectCount
         delete object PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4))
      next o
      for p=0 to AL_BatchGroup(iBatchGroup).PixelCount
         tPixel=PeekInteger(AL_BatchGroup(iBatchGroup).pPixel+(p*4))-1
         AL_BatchPixel(tPixel)=0
      next p
      delete memory AL_BatchGroup(iBatchGroup).pBatch
      delete memory AL_BatchGroup(iBatchGroup).pObject
      delete memory AL_BatchGroup(iBatchGroup).pPixel
      delete memory AL_BatchGroup(iBatchGroup).pEffect
      delete memory AL_BatchGroup(iBatchGroup).pWMat1
      delete memory AL_BatchGroup(iBatchGroup).pWMat2
      delete memory AL_BatchGroup(iBatchGroup).pWMat3
   endif
endfunction

`----------------------------------------------------
` Batch Set Texture
`----------------------------------------------------
function Batch_SetTexture(iBatchGroup as integer,iLimb as integer,iStage as integer,iTexture as integer)
   if AL_BatchGroup(iBatchGroup).InUse=1
      if iLimb=-1
         texture object AL_BatchGroup(iBatchGroup).Object,iStage,iTexture
         for o=1 to AL_BatchGroup(iBatchGroup).ObjectCount
            texture object PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4)),iStage,iTexture
         next o
      else
         if limb exist(AL_BatchGroup(iBatchGroup).Object,iLimb)=1
            texture limb AL_BatchGroup(iBatchGroup).Object,iLimb,iStage,iTexture
            for o=1 to AL_BatchGroup(iBatchGroup).ObjectCount
               texture limb PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4)),iLimb,iStage,iTexture
            next o
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Batch Set Effect
`----------------------------------------------------
function Batch_SetEffect(iBatchGroup as integer,iLimb as integer,iEffect as integer)
   if AL_BatchGroup(iBatchGroup).InUse=1
      if iLimb=-1
         set object effect AL_BatchGroup(iBatchGroup).Object,iEffect
         for o=1 to AL_BatchGroup(iBatchGroup).ObjectCount
            set object effect PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4)),iEffect
         next o
      else
         if limb exist(AL_BatchGroup(iBatchGroup).Object,iLimb)=1
            set limb effect AL_BatchGroup(iBatchGroup).Object,iLimb,iEffect
            for o=1 to AL_BatchGroup(iBatchGroup).ObjectCount
               set limb effect PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4)),iLimb,iEffect
            next o
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Batch Set Dynamic
`----------------------------------------------------
function Batch_SetDynamic(iBatchGroup as integer,iDynamic as boolean)
   if AL_BatchGroup(iBatchGroup).InUse=1
      if AL_BatchGroup(iBatchGroup).DynamicEnabled<>iDynamic
         AL_BatchGroup(iBatchGroup).DynamicEnabled=iDynamic
         for b=0 to AL_BatchGroup(iBatchGroup).Count
            tBatch=PeekInteger(AL_BatchGroup(iBatchGroup).pBatch+(b*4))-1
            if tBatch>-1
               if AL_Batch(tBatch).Bounds>-1 then VFC_Bounds(AL_Batch(tBatch).Bounds).Dynamic=AL_BatchGroup(iBatchGroup).DynamicEnabled
            endif
         next b
      endif
   endif
endfunction

`----------------------------------------------------
` Batch Set Draw Distance
`----------------------------------------------------
function Batch_SetDrawDistance(iBatchGroup as integer,iDrawDistance as float)
   if AL_BatchGroup(iBatchGroup).InUse=1
      AL_BatchGroup(iBatchGroup).DrawDistance=iDrawDistance
      for b=0 to AL_BatchGroup(iBatchGroup).Count
         tBatch=PeekInteger(AL_BatchGroup(iBatchGroup).pBatch+(b*4))-1
         if tBatch>-1
            if AL_Batch(tBatch).InUse=1
               if AL_Batch(tBatch).Bounds>-1 then FrustumCulling_SetDrawDistance(AL_Batch(tBatch).Bounds,AL_BatchGroup(iBatchGroup).DrawDistance)
            endif
         endif
      next b
   endif
endfunction

`----------------------------------------------------
` Batch Set Occluder
`----------------------------------------------------
function Batch_SetOccluder(iBatchGroup as integer,iOcclude as boolean)
   if AL_BatchGroup(iBatchGroup).InUse=1
      Occlusion_SetBatch(iBatchGroup,iOcclude)
      for b=0 to AL_BatchGroup(iBatchGroup).Count
         tBatch=PeekInteger(AL_BatchGroup(iBatchGroup).pBatch+(b*4))-1
         if tBatch>-1
            if AL_Batch(tBatch).InUse=1 and AL_Batch(tBatch).Bounds>-1
               if AL_BatchGroup(iBatchGroup).Occlude=1 then VFC_Bounds(AL_Batch(tBatch).Bounds).BatchGroup=iBatchGroup+1 else VFC_Bounds(AL_Batch(tBatch).Bounds).BatchGroup=0
               Occlusion_BoundsUpdate(AL_Batch(tBatch).Bounds)
            endif
         endif
      next b
   endif
endfunction

`----------------------------------------------------
` Batch Set Mask
`----------------------------------------------------
function Batch_SetMask(iBatchGroup as integer,iAdvLighting as boolean,iShadow as boolean,iDirectionalShadow as integer,iReflectionCapture as boolean)
   if AL_BatchGroup(iBatchGroup).InUse=1
      AL_BatchGroup(iBatchGroup).MaskAdvLighting=iAdvLighting
      AL_BatchGroup(iBatchGroup).MaskShadow=iShadow
      AL_BatchGroup(iBatchGroup).MaskDirectionalShadow=iDirectionalShadow
      AL_BatchGroup(iBatchGroup).ReflectionCapture=iReflectionCapture
      if iAdvLighting=1 then tMask=2^AL_Camera(1)
      if iDirectionalShadow>0 then tMask=tMask+(2^AL_DirLightCamera(1))+(2^AL_DirLightCamera(2))
      if iShadow=1 then tMask=tMask+(2^AL_SpotLightCamera(1))+(2^AL_SpotLightCamera(2))+(2^AL_SpotLightCamera(3))+(2^AL_SpotLightCamera(4))+(2^AL_SpotLightCamera(5))+(2^AL_SpotLightCamera(6))
      if AL_PostFilter=1 then tMask=tMask+1
      AL_BatchGroup(iBatchGroup).Mask=tMask
      for b=0 to AL_BatchGroup(iBatchGroup).Count
         tBatch=PeekInteger(AL_BatchGroup(iBatchGroup).pBatch+(b*4))-1
         if tBatch>-1
            if AL_Batch(tBatch).Bounds>-1
               VFC_Bounds(AL_Batch(tBatch).Bounds).Shadow=AL_BatchGroup(iBatchGroup).MaskShadow
               VFC_Bounds(AL_Batch(tBatch).Bounds).DirectionalShadow=AL_BatchGroup(iBatchGroup).MaskDirectionalShadow
            endif
         endif
      next b
      for o=0 to AL_BatchGroup(iBatchGroup).ObjectCount
         tObject=PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(o*4))
         set object mask tObject,AL_BatchGroup(iBatchGroup).Mask
      next o
   endif
endfunction

`----------------------------------------------------
` Batch Get Mask
`----------------------------------------------------
function Batch_GetMask(iBatchGroup as integer)
   if AL_BatchGroup(iBatchGroup).InUse=1 then rVal=AL_BatchGroup(iBatchGroup).Mask
endfunction rVal

`----------------------------------------------------
` Batch Add Object
`----------------------------------------------------
function ObjectBatch_Add(iBatchGroup as integer)
   tBatch=-1
   if iBatchGroup>-1 then tBatchGroup=iBatchGroup else tBatchGroup=-(iBatchGroup+1)
   if AL_BatchGroup(tBatchGroup).InUse=1
      for b=AL_BatchFreeUp to AL_BatchCount
         if AL_Batch(b).InUse=0 then tBatch=b:exit
      next b
      if tBatch=-1
         tBatch=AL_BatchCount+1
         AL_BatchCount=AL_BatchCount+1000
         dim AL_Batch(AL_BatchCount)
      endif
      AL_BatchFreeUp=tBatch
      tBatchGroupIndex=-1
      for b=AL_BatchGroup(tBatchGroup).FreeUp to AL_BatchGroup(tBatchGroup).Count
         tIndex=AL_BatchGroup(tBatchGroup).pBatch+(b*4):tIndex= *tIndex
         if tIndex=0 then tBatchGroupIndex=b:exit
      next b
      if tBatchGroupIndex=-1
         inc AL_BatchGroup(tBatchGroup).Count
         tBatchGroupIndex=AL_BatchGroup(tBatchGroup).Count
      endif
      AL_BatchGroup(tBatchGroup).FreeUp=tBatchGroupIndex
      PokeInteger(AL_BatchGroup(tBatchGroup).pBatch+(tBatchGroupIndex*4),tBatch+1)
      AL_Batch(tBatch).InUse=1
      AL_Batch(tBatch).BatchGroup=tBatchGroup
      AL_Batch(tBatch).BatchGroupIndex=tBatchGroupIndex
      AL_Batch(tBatch).Bounds=-1
      if iBatchGroup>-1
         AL_Batch(tBatch).Bounds=FrustumCulling_AddBounds(tBatch,1)
         VFC_Bounds(AL_Batch(tBatch).Bounds).Dynamic=AL_BatchGroup(iBatchGroup).DynamicEnabled
         VFC_Bounds(AL_Batch(tBatch).Bounds).Shadow=AL_BatchGroup(iBatchGroup).MaskShadow
         VFC_Bounds(AL_Batch(tBatch).Bounds).DirectionalShadow=AL_BatchGroup(iBatchGroup).MaskDirectionalShadow
         FrustumCulling_SetDrawDistance(AL_Batch(tBatch).Bounds,AL_BatchGroup(iBatchGroup).DrawDistance)
      endif
      ObjectBatch_SetVisible(tBatch,1)
   endif
endfunction tBatch


`----------------------------------------------------
` Batch Remove Object
`----------------------------------------------------
function ObjectBatch_Remove(iBatch as integer)
   if AL_Batch(iBatch).InUse=1
      AL_Batch(iBatch).InUse=0
      tBatchGroup=AL_Batch(iBatch).BatchGroup
      tBatchGroupIndex=AL_Batch(iBatch).BatchGroupIndex
      if AL_Batch(iBatch).Bounds>-1 then FrustumCulling_RemoveBounds(AL_Batch(iBatch).Bounds)
      PokeInteger(AL_BatchGroup(tBatchGroup).pBatch+(tBatchGroupIndex*4),0)
      if iBatch<AL_BatchFreeUp then AL_BatchFreeUp=iBatch
      if tBatchGroupIndex<AL_BatchGroup(tBatchGroup).FreeUp then AL_BatchGroup(tBatchGroup).FreeUp=tBatchGroupIndex
   endif
endfunction

`----------------------------------------------------
` Batch Set Object Visible
`----------------------------------------------------
function ObjectBatch_SetVisible(iBatch as integer,iVisible as boolean)
   if AL_Batch(iBatch).InUse=1
      if iVisible=1 and AL_Batch(iBatch).Visible=0
         AL_Batch(iBatch).Visible=1
         if AL_Batch(iBatch).Bounds>-1 then FrustumCulling_SetBoundsVisible(AL_Batch(iBatch).Bounds,1)
      endif
      if iVisible=0 and AL_Batch(iBatch).Visible=1
         AL_Batch(iBatch).Visible=0
         if AL_Batch(iBatch).Bounds>-1 then FrustumCulling_SetBoundsVisible(AL_Batch(iBatch).Bounds,0)
      endif
   endif
endfunction

`----------------------------------------------------
` Batch Set Object Position
`----------------------------------------------------
function ObjectBatch_SetPosition(iBatch as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_Batch(iBatch).InUse=1
      AL_Batch(iBatch).Position.x=iPosX
      AL_Batch(iBatch).Position.y=iPosY
      AL_Batch(iBatch).Position.z=iPosZ
      ObjectBatch_Update(iBatch)
   endif
endfunction

`----------------------------------------------------
` Batch Set Object Angle
`----------------------------------------------------
function ObjectBatch_SetAngle(iBatch as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_Batch(iBatch).InUse=1
      AL_Batch(iBatch).Angle.x=iAngleX
      AL_Batch(iBatch).Angle.y=iAngleY
      AL_Batch(iBatch).Angle.z=iAngleZ
      ObjectBatch_Update(iBatch)
   endif
endfunction

`----------------------------------------------------
` Batch Set Object Scale
`----------------------------------------------------
function ObjectBatch_SetScale(iBatch as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_Batch(iBatch).InUse=1
      AL_Batch(iBatch).Size.x=iScaleX
      AL_Batch(iBatch).Size.y=iScaleY
      AL_Batch(iBatch).Size.z=iScaleZ
      ObjectBatch_Update(iBatch)
   endif
endfunction

`----------------------------------------------------
`Show Batch
   _Batch_Show:
      if AL_BatchGroupCount>-1
         if VFC_VisibleCount(1)>-1
            for b=0 to VFC_VisibleCount(1)
               tBatch=VFC_Bounds(VFC_Visible(b,1)).Handel
               tBatchGroup=AL_Batch(tBatch).BatchGroup
               Batch_Draw(tBatchGroup)
               pEffect=PeekDword(AL_BatchGroup(tBatchGroup).pEffect+(AL_BatchGroup(tBatchGroup).DrawCount*4))
               Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat1+(AL_BatchGroup(tBatchGroup).DrawCount*4)),AL_Batch(tBatch).Matrix1.x,AL_Batch(tBatch).Matrix1.y,AL_Batch(tBatch).Matrix1.z,AL_Batch(tBatch).Position.x
               Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat2+(AL_BatchGroup(tBatchGroup).DrawCount*4)),AL_Batch(tBatch).Matrix2.x,AL_Batch(tBatch).Matrix2.y,AL_Batch(tBatch).Matrix2.z,AL_Batch(tBatch).Position.y
               Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat3+(AL_BatchGroup(tBatchGroup).DrawCount*4)),AL_Batch(tBatch).Matrix3.x,AL_Batch(tBatch).Matrix3.y,AL_Batch(tBatch).Matrix3.z,AL_Batch(tBatch).Position.z
            next b
         endif
         for b=0 to AL_BatchGroupCount
            if AL_BatchGroup(b).InUse=1
               if AL_BatchGroup(b).PrevDrawCount>AL_BatchGroup(b).DrawCount
                  for x=AL_BatchGroup(b).DrawCount+1 to AL_BatchGroup(b).PrevDrawCount
                     pEffect=PeekDword(AL_BatchGroup(b).pEffect+(x*4))
                     shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(b).pWMat1+(x*4)),0,0,0,-999999999
                     shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(b).pWMat2+(x*4)),0,0,0,-999999999
                     shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(b).pWMat3+(x*4)),0,0,0,-999999999
                  next x
               endif
               AL_BatchGroup(b).PrevDrawCount=AL_BatchGroup(b).DrawCount
               AL_BatchGroup(b).DrawCount=-1
               AL_BatchGroup(b).DrawObjectCount=AL_BatchGroup(b).Batched
            endif
         next b
      endif
   return

`----------------------------------------------------
`Hide Batch
   _Batch_Hide:
      if AL_BatchDrawCount>-1
         for b=0 to AL_BatchDrawCount:exclude object on AL_BatchDraw(b):next b
      endif
      AL_BatchDrawCount=-1
   return

`----------------------------------------------------
` Batch UpDate
`----------------------------------------------------
function ObjectBatch_Update(iBatch as integer)
   tBatchGroup=AL_Batch(iBatch).BatchGroup
   Vector4Float(0).x=AL_Batch(iBatch).Size.x*(object size x(AL_BatchGroup(tBatchGroup).Object)/100)
   Vector4Float(0).y=AL_Batch(iBatch).Size.y*(object size y(AL_BatchGroup(tBatchGroup).Object)/100)
   Vector4Float(0).z=AL_Batch(iBatch).Size.z*(object size z(AL_BatchGroup(tBatchGroup).Object)/100)
   Vector4Float(1).x=AL_Batch(iBatch).Position.x
   Vector4Float(1).y=AL_Batch(iBatch).Position.y
   Vector4Float(1).z=AL_Batch(iBatch).Position.z
   Vector4Float(2).x=AL_Batch(iBatch).Angle.x
   Vector4Float(2).y=AL_Batch(iBatch).Angle.y
   Vector4Float(2).z=AL_Batch(iBatch).Angle.z
   GetObjectBounds(-AL_BatchGroup(tBatchGroup).Object)
   scale matrix4 Matrix(1),AL_Batch(iBatch).Size.x/100,AL_Batch(iBatch).Size.y/100,AL_Batch(iBatch).Size.z/100
   multiply matrix4 Matrix(1),Matrix(1),Matrix(4)
   AL_Batch(iBatch).Matrix1.x=get matrix4 element(Matrix(1),0):AL_Batch(iBatch).Matrix1.y=get matrix4 element(Matrix(1),1):AL_Batch(iBatch).Matrix1.z=get matrix4 element(Matrix(1),2)
   AL_Batch(iBatch).Matrix2.x=get matrix4 element(Matrix(1),4):AL_Batch(iBatch).Matrix2.y=get matrix4 element(Matrix(1),5):AL_Batch(iBatch).Matrix2.z=get matrix4 element(Matrix(1),6)
   AL_Batch(iBatch).Matrix3.x=get matrix4 element(Matrix(1),8):AL_Batch(iBatch).Matrix3.y=get matrix4 element(Matrix(1),9):AL_Batch(iBatch).Matrix3.z=get matrix4 element(Matrix(1),10)
   AL_Batch(iBatch).Scale.x=Vector4Float(3).x
   AL_Batch(iBatch).Scale.y=Vector4Float(3).y
   AL_Batch(iBatch).Scale.z=Vector4Float(3).z
   AL_Batch(iBatch).Radius=Vector4Float(3).w
   AL_Batch(iBatch).AtualSize.x=Vector4Float(0).x
   AL_Batch(iBatch).AtualSize.y=Vector4Float(0).y
   AL_Batch(iBatch).AtualSize.z=Vector4Float(0).z
   tBounds=AL_Batch(iBatch).Bounds
   if tBounds>-1
      if AL_BatchGroup(tBatchGroup).MaskShadow=1
         if AL_BatchGroup(tBatchGroup).DynamicEnabled=1
            Object_GetShadows(Vector4Float(1).x+Vector4Float(5).x,Vector4Float(1).y+Vector4Float(5).y,Vector4Float(1).z+Vector4Float(5).z,AL_Batch(iBatch).Center.x,AL_Batch(iBatch).Center.y,AL_Batch(iBatch).Center.z,AL_Batch(iBatch).Scale.x,AL_Batch(iBatch).Scale.y,AL_Batch(iBatch).Scale.z,AL_Batch(iBatch).Radius,0)
         else
            Object_GetShadows(Vector4Float(1).x+Vector4Float(5).x,Vector4Float(1).y+Vector4Float(5).y,Vector4Float(1).z+Vector4Float(5).z,AL_Batch(iBatch).Center.x,AL_Batch(iBatch).Center.y,AL_Batch(iBatch).Center.z,AL_Batch(iBatch).Scale.x,AL_Batch(iBatch).Scale.y,AL_Batch(iBatch).Scale.z,AL_Batch(iBatch).Radius,1)
         endif
      endif
      AL_Batch(iBatch).Center.x=Vector4Float(1).x+Vector4Float(5).x
      AL_Batch(iBatch).Center.y=Vector4Float(1).y+Vector4Float(5).y
      AL_Batch(iBatch).Center.z=Vector4Float(1).z+Vector4Float(5).z
      FrustumCulling_SetBounds(tBounds,AL_Batch(iBatch).Center.x,AL_Batch(iBatch).Center.y,AL_Batch(iBatch).Center.z,AL_Batch(iBatch).Scale.x,AL_Batch(iBatch).Scale.y,AL_Batch(iBatch).Scale.z)
      Occlusion_SetObjectTransform(tBounds,AL_Batch(iBatch).Position.x,AL_Batch(iBatch).Position.y,AL_Batch(iBatch).Position.z,AL_Batch(iBatch).Size.x,AL_Batch(iBatch).Size.y,AL_Batch(iBatch).Size.z,AL_Batch(iBatch).Angle.x,AL_Batch(iBatch).Angle.y,AL_Batch(iBatch).Angle.z)
      if AL_BatchGroup(tBatchGroup).Occlude=1 then VFC_Bounds(tBounds).BatchGroup=tBatchGroup+1 else VFC_Bounds(tBounds).BatchGroup=0
   endif
endfunction

`----------------------------------------------------
` Batch Draw
`----------------------------------------------------
function Batch_Draw(iBatchGroup as integer)
   inc AL_BatchGroup(iBatchGroup).DrawCount
   inc AL_BatchGroup(iBatchGroup).DrawObjectCount
   if AL_BatchGroup(iBatchGroup).DrawObjectCount>AL_BatchGroup(iBatchGroup).Batched-1
      AL_BatchGroup(iBatchGroup).DrawObjectCount=0
      tPos=floor(AL_BatchGroup(iBatchGroup).DrawCount/AL_BatchGroup(iBatchGroup).Batched)
      tObject=PeekInteger(AL_BatchGroup(iBatchGroup).pObject+(tPos*4))
      tPos=tPos*AL_BatchGroup(iBatchGroup).Batched
      if tObject=0
         tObject=FreeUpObject(AL_BatchGroup(iBatchGroup).Object)
         if tPos=0 then tObject=AL_BatchGroup(iBatchGroup).Object else clone object tObject,AL_BatchGroup(iBatchGroup).Object,0
         set object mask tObject,AL_BatchGroup(iBatchGroup).Mask
         set object radius tObject,9999^9999
         inc AL_BatchGroup(iBatchGroup).ObjectCount
         PokeInteger(AL_BatchGroup(iBatchGroup).pObject+(AL_BatchGroup(iBatchGroup).ObjectCount*4),tObject)
         for r=0 to AL_BatchGroup(iBatchGroup).Batched-1
            tPixel=-1
            for x=AL_BatchPixelFreeUp to AL_BatchPixelCount
               if AL_BatchPixel(x)=0 then tPixel=x:exit
            next x
            if tPixel=-1
               tPixel=AL_BatchPixelCount+1
               AL_BatchPixelCount=AL_BatchPixelCount+5000
               dim AL_BatchPixel(AL_BatchPixelCount)
            endif
            AL_BatchPixelFreeUp=tPixel
            AL_BatchPixel(tPixel)=1
            tShader=floor(tPixel/84)
            if AL_BatchShader(tShader).Effect=0
               tMesh=FreeUpMesh()
               tMemBlock=FreeUpMemblock()
               AL_BatchShader(tShader).Effect=FreeUpEffect(32500+rnd(16250))
               load effect AL_Directory+"Post Processing\Batch.fx",AL_BatchShader(tShader).Effect,0,1
               make memblock tMemBlock,3072
               write memblock dword tMemBlock,0,0x002
               write memblock dword tMemBlock,4,12
               write memblock dword tMemBlock,8,255
               for v=0 to 254
                  Vector4Float(0).x=v
                  Vector4Float(0).y=-tShader
                  write memblock float tMemBlock,12+(v*12),(Vector4Float(0).x/128)-1
                  write memblock float tMemBlock,16+(v*12),(Vector4Float(0).y/128)+1
                  write memblock float tMemBlock,20+(v*12),v+0.5
               next v
               write memblock float tMemBlock,3064,10
               make mesh from memblock tMesh,tMemBlock
               delete memblock tMemBlock
               if AL_BatchObject=0
                  AL_BatchObject=FreeUpObject(32500+rnd(16250))
                  make object AL_BatchObject,tMesh,0
                  set object radius AL_BatchObject,9999^9999
                  set object mask AL_BatchObject,2^AL_Camera(6)
                  disable object zwrite AL_BatchObject
                  disable object zdepth AL_BatchObject
               else
                  add limb AL_BatchObject,tShader,tMesh
               endif
               delete mesh tMesh
               set limb effect AL_BatchObject,tShader,AL_BatchShader(tShader).Effect
               AL_BatchShader(tShader).pEffect=Object_GetShaderPtr(AL_BatchObject,tShader)
               AL_BatchShader(tShader).pPixel=Shader_GetParameterByName(AL_BatchShader(tShader).pEffect,0,"PixelColor")
               exclude object on AL_BatchObject
            endif
            inc AL_BatchGroup(iBatchGroup).PixelCount
            PokeInteger(AL_BatchGroup(iBatchGroup).pPixel+(AL_BatchGroup(iBatchGroup).PixelCount*4),tPixel+1)
            PokeDword(AL_BatchGroup(iBatchGroup).pEffect+(AL_BatchGroup(iBatchGroup).PixelCount*4),AL_BatchShader(tShader).pEffect)
            pPixel=Shader_GetParameterElement(AL_BatchShader(tShader).pEffect,AL_BatchShader(tShader).pPixel,((tPixel-(tShader*84))*3)+0)
            Shader_SetVectorVal AL_BatchShader(tShader).pEffect,pPixel,0,0,0,-999999999
            PokeDword(AL_BatchGroup(iBatchGroup).pWMat1+(AL_BatchGroup(iBatchGroup).PixelCount*4),pPixel)
            pPixel=Shader_GetParameterElement(AL_BatchShader(tShader).pEffect,AL_BatchShader(tShader).pPixel,((tPixel-(tShader*84))*3)+1)
            Shader_SetVectorVal AL_BatchShader(tShader).pEffect,pPixel,0,0,0,-999999999
            PokeDword(AL_BatchGroup(iBatchGroup).pWMat2+(AL_BatchGroup(iBatchGroup).PixelCount*4),pPixel)
            pPixel=Shader_GetParameterElement(AL_BatchShader(tShader).pEffect,AL_BatchShader(tShader).pPixel,((tPixel-(tShader*84))*3)+2)
            Shader_SetVectorVal AL_BatchShader(tShader).pEffect,pPixel,0,0,0,-999999999
            PokeDword(AL_BatchGroup(iBatchGroup).pWMat3+(AL_BatchGroup(iBatchGroup).PixelCount*4),pPixel)
         next r
         pObject1=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_BatchGroup(iBatchGroup).Object)
         pObject2=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",tObject)
         pMesh1=PeekDword(pObject1+8)
         pMesh2=PeekDword(pObject2+8)
         for l=0 to PeekInteger(pObject1)-1
            pMeshLimb1=PeekDword(pMesh1+(l*4))
            pMeshLimb2=PeekDword(pMesh2+(l*4))
            if pMeshLimb1>0
               tVertex=0
               tFVFSize=PeekInteger(pMeshLimb1+8)
               pVertex1=PeekDword(pMeshLimb1+20)
               pVertex2=PeekDword(pMeshLimb2+20)
               tVertexCount=(PeekInteger(pMeshLimb1+28)-1)/AL_BatchGroup(iBatchGroup).Batched
               for r=0 to AL_BatchGroup(iBatchGroup).Batched-1
                  for v=0 to tVertexCount
                     PokeFloat(pVertex1+(tVertex*tFVFSize)+tFVFSize-4,((PeekInteger(AL_BatchGroup(iBatchGroup).pPixel+(r*4))-1)*3)+0.5)
                     PokeFloat(pVertex2+(tVertex*tFVFSize)+tFVFSize-4,((PeekInteger(AL_BatchGroup(iBatchGroup).pPixel+((r+tPos)*4))-1)*3)+0.5)
                     inc tVertex
                  next v
               next r
            endif
            PokeByte2(pMeshLimb1+1000,1)
            PokeByte2(pMeshLimb2+1000,1)
         next l
         array insert at bottom AL_BatchDraw()
      endif
      inc AL_BatchDrawCount
      AL_BatchDraw(AL_BatchDrawCount)=tObject
      exclude object off tObject
   endif
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type InstanceData
   InUse as boolean
   Object as integer
   ObjectLOD1 as integer
   ObjectLOD2 as integer
   ObjectLOD3 as integer
   ObjectLOD4 as integer
   LODTransition as boolean
   TransitionObject as integer
   TransitionLOD1 as integer
   TransitionLOD2 as integer
   TransitionLOD3 as integer
   TransitionLOD4 as integer
   BatchLOD1 as integer
   BatchLOD2 as integer
   BatchLOD3 as integer
   BatchLOD4 as integer
   Imposter as integer
   ImposterOffset as Vec3Float
   ImposterEnabled as integer
   CullRange as float
   LODRange as float
   Size as Vec4Float
   MaskAdvLighting as boolean
   MaskShadow as boolean
   MaskDirectionalShadow as integer
   ReflectionCapture as boolean
   InstanceCount as integer
   pInstance as dword
endtype

type InstanceObjectData
   InUse as boolean
   Visible as boolean
   Object as integer
   ObjectAL as integer
   Imposter as integer
   Instance as integer
   InstanceIdx as integer
   Position as Vec3Float
   Scale as Vec4Float
   Angle as Vec3Float
   Entity as integer
endtype

`----------------------------------------------------
` Create Instance Object (Group)
`----------------------------------------------------
function Instance_Create(iObject as integer,iObjectLOD1 as integer,iObjectLOD2 as integer,iObjectLOD3 as integer,iObjectLOD4 as integer,iLodBatchCount1 as integer,iLodBatchCount2 as integer,iLodBatchCount3 as integer,iLodBatchCount4 as integer,iLODTransition as boolean,iImposter as integer,iDoNotGenerateExtraData as boolean)
   if object exist(iObject)=1
      tInstance=-1
      for i=AL_InstanceFreeUp to AL_InstanceCount
         if AL_Instance(i).InUse=0 then tInstance=i:exit
      next i
      if tInstance=-1
         tInstance=AL_InstanceCount+1
         AL_InstanceCount=AL_InstanceCount+400
         dim AL_Instance(AL_InstanceCount)
      endif
      AL_InstanceFreeUp=tInstance
      AL_Instance(tInstance).InUse=1
      AL_Instance(tInstance).Object=-1
      AL_Instance(tInstance).ObjectLOD1=-1
      AL_Instance(tInstance).ObjectLOD2=-1
      AL_Instance(tInstance).ObjectLOD3=-1
      AL_Instance(tInstance).ObjectLOD4=-1
      AL_Instance(tInstance).TransitionObject=-1
      AL_Instance(tInstance).TransitionLOD1=-1
      AL_Instance(tInstance).TransitionLOD2=-1
      AL_Instance(tInstance).TransitionLOD3=-1
      AL_Instance(tInstance).TransitionLOD4=-1
      AL_Instance(tInstance).CullRange=50
      AL_Instance(tInstance).LODRange=8
      AL_Instance(tInstance).Imposter=-1
      AL_Instance(tInstance).ImposterEnabled=iImposter
      AL_Instance(tInstance).MaskAdvLighting=1
      AL_Instance(tInstance).MaskShadow=1
      AL_Instance(tInstance).MaskDirectionalShadow=4
      AL_Instance(tInstance).ReflectionCapture=1
      AL_Instance(tInstance).InstanceCount=-1
      AL_Instance(tInstance).pInstance=make memory(80000)
      fill memory AL_Instance(tInstance).pInstance,0,80000
      AL_Instance(tInstance).Object=iObject:hide object iObject:exclude object on iObject:set object mask iObject,0
      AL_Instance(tInstance).Size.x=object size x(iObject)
      AL_Instance(tInstance).Size.y=object size y(iObject)
      AL_Instance(tInstance).Size.z=object size z(iObject)
      AL_Instance(tInstance).Size.w=AL_Instance(tInstance).Size.x
      if AL_Instance(tInstance).Size.w<AL_Instance(tInstance).Size.y then AL_Instance(tInstance).Size.w=AL_Instance(tInstance).Size.y
      if AL_Instance(tInstance).Size.w<AL_Instance(tInstance).Size.z then AL_Instance(tInstance).Size.w=AL_Instance(tInstance).Size.z
      if iObjectLOD1>0
         if object exist(iObjectLOD1)=1 then AL_Instance(tInstance).ObjectLOD1=iObjectLOD1:hide object iObjectLOD1:exclude object on iObjectLOD1:set object mask iObjectLOD1,0
      endif
      if iObjectLOD2>0
         if object exist(iObjectLOD2)=1 then AL_Instance(tInstance).ObjectLOD2=iObjectLOD2:hide object iObjectLOD2:exclude object on iObjectLOD2:set object mask iObjectLOD2,0
      endif
      if iObjectLOD3>0
         if object exist(iObjectLOD3)=1 then AL_Instance(tInstance).ObjectLOD3=iObjectLOD3:hide object iObjectLOD3:exclude object on iObjectLOD3:set object mask iObjectLOD3,0
      endif
      if iObjectLOD4>0
         if object exist(iObjectLOD4)=1 then AL_Instance(tInstance).ObjectLOD4=iObjectLOD4:hide object iObjectLOD4:exclude object on iObjectLOD4:set object mask iObjectLOD4,0
      endif
      AL_Instance(tInstance).LODTransition=iLODTransition
      if AL_Instance(tInstance).LODTransition=1
         for o=1 to 5
            tObject=-1:tObjectSource=-1
            if o=1 and AL_Instance(tInstance).Object>-1 then tObjectSource=AL_Instance(tInstance).Object
            if o=2 and AL_Instance(tInstance).ObjectLOD1>-1 then tObjectSource=AL_Instance(tInstance).ObjectLOD1
            if o=3 and AL_Instance(tInstance).ObjectLOD2>-1 then tObjectSource=AL_Instance(tInstance).ObjectLOD2
            if o=4 and AL_Instance(tInstance).ObjectLOD3>-1 then tObjectSource=AL_Instance(tInstance).ObjectLOD3
            if o=5 and AL_Instance(tInstance).ObjectLOD4>-1 then tObjectSource=AL_Instance(tInstance).ObjectLOD4
            if tObjectSource>0
               tObject=FreeUpObject(32500+rnd(16250))
               clone object tObject,tObjectSource
               hide object tObject:exclude object on tObject:set object mask tObject,0
            endif
            if o=1 then AL_Instance(tInstance).TransitionObject=tObject
            if o=2 then AL_Instance(tInstance).TransitionLOD1=tObject
            if o=3 then AL_Instance(tInstance).TransitionLOD2=tObject
            if o=4 then AL_Instance(tInstance).TransitionLOD3=tObject
            if o=5 then AL_Instance(tInstance).TransitionLOD4=tObject
         next o
      endif
      for o=1 to 4
         tBatch=-1:tObject=-1:tCount=-1
         if o=1 then tObject=AL_Instance(tInstance).ObjectLOD1:tCount=iLodBatchCount1
         if o=2 then tObject=AL_Instance(tInstance).ObjectLOD2:tCount=iLodBatchCount2
         if o=3 then tObject=AL_Instance(tInstance).ObjectLOD3:tCount=iLodBatchCount3
         if o=4 then tObject=AL_Instance(tInstance).ObjectLOD4:tCount=iLodBatchCount4
         if tCount>0 and tObject>-1 then tBatch=Batch_Create(tObject,tCount,iDoNotGenerateExtraData)
         if o=1 then AL_Instance(tInstance).BatchLOD1=tBatch
         if o=2 then AL_Instance(tInstance).BatchLOD2=tBatch
         if o=3 then AL_Instance(tInstance).BatchLOD3=tBatch
         if o=4 then AL_Instance(tInstance).BatchLOD4=tBatch
      next o
   endif
endfunction tInstance

`----------------------------------------------------
` Delete Instance
`----------------------------------------------------
function Instance_Delete(iInstance as integer)
   if AL_Instance(iInstance).InUse=1
      AL_Instance(iInstance).InUse=0
      if AL_InstanceFreeUp>iInstance then AL_InstanceFreeUp=iInstance
      for i=0 to AL_Instance(iInstance).InstanceCount
         tInstanceObject=PeekInteger(AL_Instance(iInstance).pInstance+(i*4))-1
         if AL_InstanceObject(tInstanceObject).Object>0
            Object_Remove(AL_InstanceObject(tInstanceObject).ObjectAL)
            delete object AL_InstanceObject(tInstanceObject).Object
         endif
         if AL_InstanceObject(tInstanceObject).Imposter>-1 then Imposter_Remove(AL_InstanceObject(tInstanceObject).Imposter)
         AL_InstanceObject(tInstanceObject).InUse=0
         if AL_InstanceObjectFreeUp>tInstanceObject then AL_InstanceObjectFreeUp=tInstanceObject
      next i
      if AL_Instance(iInstance).Imposter>-1 then Imposter_Delete(AL_Instance(iInstance).Imposter)
      if AL_Instance(iInstance).TransitionObject>0 then delete object AL_Instance(iInstance).TransitionObject
      if AL_Instance(iInstance).TransitionLOD1>0 then delete object AL_Instance(iInstance).TransitionLOD1
      if AL_Instance(iInstance).TransitionLOD2>0 then delete object AL_Instance(iInstance).TransitionLOD2
      if AL_Instance(iInstance).TransitionLOD3>0 then delete object AL_Instance(iInstance).TransitionLOD3
      if AL_Instance(iInstance).TransitionLOD4>0 then delete object AL_Instance(iInstance).TransitionLOD4
      if AL_Instance(iInstance).BatchLOD1>-1 then Batch_Delete(AL_Instance(iInstance).BatchLOD1) 
      if AL_Instance(iInstance).BatchLOD2>-1 then Batch_Delete(AL_Instance(iInstance).BatchLOD2) 
      if AL_Instance(iInstance).BatchLOD3>-1 then Batch_Delete(AL_Instance(iInstance).BatchLOD3) 
      if AL_Instance(iInstance).BatchLOD4>-1 then Batch_Delete(AL_Instance(iInstance).BatchLOD4) 
      delete memory AL_Instance(iInstance).pInstance
   endif
endfunction

`----------------------------------------------------
` Instance Set Texture
`----------------------------------------------------
function Instance_SetTexture(iInstance as integer,iLimb as integer,iStage as integer,iTexture as integer)
   if AL_Instance(iInstance).InUse=1
      if iLimb=-1
         if AL_Instance(iInstance).Object>-1 then texture object AL_Instance(iInstance).Object,iStage,iTexture
         if AL_Instance(iInstance).ObjectLOD1>-1 then texture object AL_Instance(iInstance).ObjectLOD1,iStage,iTexture
         if AL_Instance(iInstance).ObjectLOD2>-1 then texture object AL_Instance(iInstance).ObjectLOD2,iStage,iTexture
         if AL_Instance(iInstance).ObjectLOD3>-1 then texture object AL_Instance(iInstance).ObjectLOD3,iStage,iTexture
         if AL_Instance(iInstance).ObjectLOD4>-1 then texture object AL_Instance(iInstance).ObjectLOD4,iStage,iTexture
         if AL_Instance(iInstance).TransitionObject>-1 then texture object AL_Instance(iInstance).TransitionObject,iStage,iTexture
         if AL_Instance(iInstance).TransitionLOD1>-1 then texture object AL_Instance(iInstance).TransitionLOD1,iStage,iTexture
         if AL_Instance(iInstance).TransitionLOD2>-1 then texture object AL_Instance(iInstance).TransitionLOD2,iStage,iTexture
         if AL_Instance(iInstance).TransitionLOD3>-1 then texture object AL_Instance(iInstance).TransitionLOD3,iStage,iTexture
         if AL_Instance(iInstance).TransitionLOD4>-1 then texture object AL_Instance(iInstance).TransitionLOD4,iStage,iTexture
      else
         if AL_Instance(iInstance).Object>-1
            if limb exist(AL_Instance(iInstance).Object,iLimb)=1 then texture limb AL_Instance(iInstance).Object,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).ObjectLOD1>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD1,iLimb)=1 then texture limb AL_Instance(iInstance).ObjectLOD1,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).ObjectLOD2>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD2,iLimb)=1 then texture limb AL_Instance(iInstance).ObjectLOD2,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).ObjectLOD3>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD3,iLimb)=1 then texture limb AL_Instance(iInstance).ObjectLOD3,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).ObjectLOD4>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD4,iLimb)=1 then texture limb AL_Instance(iInstance).ObjectLOD4,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).TransitionObject>-1
            if limb exist(AL_Instance(iInstance).TransitionObject,iLimb)=1 then texture limb AL_Instance(iInstance).TransitionObject,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).TransitionLOD1>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD1,iLimb)=1 then texture limb AL_Instance(iInstance).TransitionLOD1,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).TransitionLOD2>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD2,iLimb)=1 then texture limb AL_Instance(iInstance).TransitionLOD2,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).TransitionLOD3>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD3,iLimb)=1 then texture limb AL_Instance(iInstance).TransitionLOD3,iLimb,iStage,iTexture
         endif
         if AL_Instance(iInstance).TransitionLOD4>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD4,iLimb)=1 then texture limb AL_Instance(iInstance).TransitionLOD4,iLimb,iStage,iTexture
         endif
      endif
      if AL_Instance(iInstance).BatchLOD1>-1 then Batch_SetTexture(AL_Instance(iInstance).BatchLOD1,iLimb,iStage,iTexture)
      if AL_Instance(iInstance).BatchLOD2>-1 then Batch_SetTexture(AL_Instance(iInstance).BatchLOD2,iLimb,iStage,iTexture)
      if AL_Instance(iInstance).BatchLOD3>-1 then Batch_SetTexture(AL_Instance(iInstance).BatchLOD3,iLimb,iStage,iTexture)
      if AL_Instance(iInstance).BatchLOD4>-1 then Batch_SetTexture(AL_Instance(iInstance).BatchLOD4,iLimb,iStage,iTexture)
   endif
endfunction

`----------------------------------------------------
` Instance Set Effect
`----------------------------------------------------
function Instance_SetEffect(iInstance as integer,iLimb as integer,iEffect as integer,iBatchEffect as integer,iEffectLOD1 as integer,iEffectLOD2 as integer)
   if AL_Instance(iInstance).InUse=1
      if iLimb=-1
         if AL_Instance(iInstance).Object>-1 then set object effect AL_Instance(iInstance).Object,iEffect
         if AL_Instance(iInstance).ObjectLOD1>-1 then texture object AL_Instance(iInstance).ObjectLOD1,iEffect
         if AL_Instance(iInstance).ObjectLOD2>-1 then texture object AL_Instance(iInstance).ObjectLOD2,iEffect
         if AL_Instance(iInstance).ObjectLOD3>-1 then texture object AL_Instance(iInstance).ObjectLOD3,iEffect
         if AL_Instance(iInstance).ObjectLOD4>-1 then texture object AL_Instance(iInstance).ObjectLOD4,iEffect
         if AL_Instance(iInstance).TransitionObject>-1 then texture object AL_Instance(iInstance).TransitionObject,iEffectLOD1
         if AL_Instance(iInstance).TransitionLOD1>-1 then texture object AL_Instance(iInstance).TransitionLOD1,iEffectLOD2
         if AL_Instance(iInstance).TransitionLOD2>-1 then texture object AL_Instance(iInstance).TransitionLOD2,iEffectLOD1
         if AL_Instance(iInstance).TransitionLOD3>-1 then texture object AL_Instance(iInstance).TransitionLOD3,iEffectLOD2
         if AL_Instance(iInstance).TransitionLOD4>-1 then texture object AL_Instance(iInstance).TransitionLOD4,iEffectLOD1
      else
         if AL_Instance(iInstance).Object>-1
            if limb exist(AL_Instance(iInstance).Object,iLimb)=1 then set limb effect AL_Instance(iInstance).Object,iLimb,iEffect
         endif
         if AL_Instance(iInstance).ObjectLOD1>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD1,iLimb)=1 then set limb effect AL_Instance(iInstance).ObjectLOD1,iLimb,iEffect
         endif
         if AL_Instance(iInstance).ObjectLOD2>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD2,iLimb)=1 then set limb effect AL_Instance(iInstance).ObjectLOD2,iLimb,iEffect
         endif
         if AL_Instance(iInstance).ObjectLOD3>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD3,iLimb)=1 then set limb effect AL_Instance(iInstance).ObjectLOD3,iLimb,iEffect
         endif
         if AL_Instance(iInstance).ObjectLOD4>-1
            if limb exist(AL_Instance(iInstance).ObjectLOD4,iLimb)=1 then set limb effect AL_Instance(iInstance).ObjectLOD4,iLimb,iEffect
         endif
         if AL_Instance(iInstance).TransitionObject>-1
            if limb exist(AL_Instance(iInstance).TransitionObject,iLimb)=1 then set limb effect AL_Instance(iInstance).TransitionObject,iLimb,iEffectLOD1
         endif
         if AL_Instance(iInstance).TransitionLOD1>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD1,iLimb)=1 then set limb effect AL_Instance(iInstance).TransitionLOD1,iLimb,iEffectLOD2
         endif
         if AL_Instance(iInstance).TransitionLOD2>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD2,iLimb)=1 then set limb effect AL_Instance(iInstance).TransitionLOD2,iLimb,iEffectLOD1
         endif
         if AL_Instance(iInstance).TransitionLOD3>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD3,iLimb)=1 then set limb effect AL_Instance(iInstance).TransitionLOD3,iLimb,iEffectLOD1
         endif
         if AL_Instance(iInstance).TransitionLOD4>-1
            if limb exist(AL_Instance(iInstance).TransitionLOD4,iLimb)=1 then set limb effect AL_Instance(iInstance).TransitionLOD4,iLimb,iEffectLOD2
         endif
      endif
      if AL_Instance(iInstance).BatchLOD1>-1 then Batch_SetEffect(AL_Instance(iInstance).BatchLOD1,iLimb,iBatchEffect)
      if AL_Instance(iInstance).BatchLOD2>-1 then Batch_SetEffect(AL_Instance(iInstance).BatchLOD2,iLimb,iBatchEffect)
      if AL_Instance(iInstance).BatchLOD3>-1 then Batch_SetEffect(AL_Instance(iInstance).BatchLOD3,iLimb,iBatchEffect)
      if AL_Instance(iInstance).BatchLOD4>-1 then Batch_SetEffect(AL_Instance(iInstance).BatchLOD4,iLimb,iBatchEffect)
   endif
endfunction

`----------------------------------------------------
` Instance Set Mask
`----------------------------------------------------
function Instance_SetMask(iInstance as integer,iAdvLighting as boolean,iShadow as boolean,iDirectionalShadow as integer,iReflectionCapture as boolean)
   if AL_Instance(iInstance).InUse=1
      AL_Instance(iInstance).MaskAdvLighting=iAdvLighting
      AL_Instance(iInstance).MaskShadow=iShadow
      AL_Instance(iInstance).MaskDirectionalShadow=iDirectionalShadow
      AL_Instance(iInstance).ReflectionCapture=iReflectionCapture
      if AL_Instance(iInstance).Imposter>-1
         if AL_Instance(iInstance).MaskDirectionalShadow>0 then Imposter_SetShadow(AL_Instance(iInstance).Imposter,1) else Imposter_SetShadow(AL_Instance(iInstance).Imposter,0)
      endif
      for i=0 to AL_Instance(iInstance).InstanceCount
         tInstanceObject=PeekInteger(AL_Instance(iInstance).pInstance+(i*4))-1
         if AL_InstanceObject(tInstanceObject).Object>0
            Object_SetMask(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(iInstance).MaskAdvLighting,AL_Instance(iInstance).MaskShadow,AL_Instance(iInstance).MaskDirectionalShadow,AL_Instance(iInstance).ReflectionCapture)
         endif
      next i
   endif
endfunction

`----------------------------------------------------
` Instance Set Draw Distance
`----------------------------------------------------
function Instance_SetDrawDistance(iInstance as integer,iDistance as float,iLODRange as float)
   if AL_Instance(iInstance).InUse=1
      AL_Instance(iInstance).CullRange=iDistance
      AL_Instance(iInstance).LODRange=iLODRange
      for i=0 to AL_Instance(iInstance).InstanceCount
         tInstanceObject=PeekInteger(AL_Instance(iInstance).pInstance+(i*4))-1
         if AL_InstanceObject(tInstanceObject).Object>0
            Object_SetDrawDistance(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(iInstance).CullRange)
            if AL_Instance(iInstance).ObjectLOD1>-1 then LOD_SetRange(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(iInstance).LODRange,AL_Instance(iInstance).CullRange)
         endif
      next i
   endif
endfunction

`----------------------------------------------------
` Instance Set Imposter Offsets
`----------------------------------------------------
function Instance_SetImposterOffset(iInstance as integer,ix as float,iy as float,iz as float)
   if AL_Instance(iInstance).InUse=1
      AL_Instance(iInstance).ImposterOffset.x=ix
      AL_Instance(iInstance).ImposterOffset.y=iy
      AL_Instance(iInstance).ImposterOffset.z=iz
      if AL_Instance(iInstance).Imposter>-1
         Imposter_SetOffset(AL_Instance(iInstance).Imposter,AL_Instance(iInstance).ImposterOffset.x,AL_Instance(iInstance).ImposterOffset.y,AL_Instance(iInstance).ImposterOffset.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Instance Object Add
`----------------------------------------------------
function ObjectInstance_Add(iInstance as integer)
   tInstanceObject=-1
   if AL_Instance(iInstance).InUse=1 and AL_Instance(iInstance).Object>0
      for i=AL_InstanceObjectFreeUp to AL_InstanceObjectCount
         if AL_InstanceObject(i).InUse=0 then tInstanceObject=i:exit
      next i
      if tInstanceObject=-1
         tInstanceObject=AL_InstanceObjectCount+1
         AL_InstanceObjectCount=AL_InstanceObjectCount+500
         dim AL_InstanceObject(AL_InstanceObjectCount)
      endif
      AL_InstanceObjectFreeUp=tInstanceObject
      AL_InstanceObject(tInstanceObject).InUse=1
      AL_InstanceObject(tInstanceObject).Visible=1
      AL_InstanceObject(tInstanceObject).Object=0
      AL_InstanceObject(tInstanceObject).ObjectAL=-1
      AL_InstanceObject(tInstanceObject).Imposter=-1
      AL_InstanceObject(tInstanceObject).Instance=iInstance
      inc AL_Instance(iInstance).InstanceCount
      PokeInteger(AL_Instance(iInstance).pInstance+(AL_Instance(iInstance).InstanceCount*4),tInstanceObject+1)
      AL_InstanceObject(tInstanceObject).InstanceIdx=AL_Instance(iInstance).InstanceCount
      AL_InstanceObject(tInstanceObject).Position.x=0
      AL_InstanceObject(tInstanceObject).Position.y=0
      AL_InstanceObject(tInstanceObject).Position.z=0
      AL_InstanceObject(tInstanceObject).Scale.x=100
      AL_InstanceObject(tInstanceObject).Scale.y=100
      AL_InstanceObject(tInstanceObject).Scale.z=100
      AL_InstanceObject(tInstanceObject).Angle.x=0
      AL_InstanceObject(tInstanceObject).Angle.y=0
      AL_InstanceObject(tInstanceObject).Angle.z=0
   endif
endfunction tInstanceObject

`----------------------------------------------------
` Instance Object Remove
`----------------------------------------------------
function ObjectInstance_Remove(iInstanceObject as integer)
   if AL_InstanceObject(iInstanceObject).InUse=1
      AL_InstanceObject(iInstanceObject).InUse=0
      if AL_InstanceObjectFreeUp>iInstanceObject then AL_InstanceObjectFreeUp=iInstanceObject
      tInstance=AL_InstanceObject(iInstanceObject).Instance
      tInstanceIdx=AL_InstanceObject(iInstanceObject).InstanceIdx
      if tInstanceIdx<AL_Instance(tInstance).InstanceCount
         tInstanceObject=PeekInteger(AL_Instance(tInstance).pInstance+(AL_Instance(tInstance).InstanceCount*4))-1
         AL_InstanceObject(tInstanceObject).InstanceIdx=tInstanceIdx
         PokeInteger(AL_Instance(tInstance).pInstance+(tInstanceIdx*4),tInstanceObject+1)
      endif
      if AL_InstanceObject(iInstanceObject).Object>0
         Object_Remove(AL_InstanceObject(iInstanceObject).ObjectAL)
         delete object AL_InstanceObject(iInstanceObject).Object
      endif
      if AL_InstanceObject(iInstanceObject).Imposter>-1 then Imposter_Remove(AL_InstanceObject(iInstanceObject).Imposter)
      dec AL_Instance(tInstance).InstanceCount
   endif
endfunction

`----------------------------------------------------
` Set Visible
`----------------------------------------------------
function ObjectInstance_SetVisible(iInstanceObject as integer,iVisible as boolean)
   if AL_InstanceObject(iInstanceObject).InUse=1
      if AL_InstanceObject(iInstanceObject).Visible<>iVisible
         AL_InstanceObject(iInstanceObject).Visible=iVisible
         if AL_InstanceObject(iInstanceObject).Object>0 then Object_SetVisible(AL_InstanceObject(iInstanceObject).ObjectAL,iVisible)
         if AL_InstanceObject(iInstanceObject).Imposter>-1
            Imposter_Remove(AL_InstanceObject(iInstanceObject).Imposter)
            AL_InstanceObject(iInstanceObject).Imposter=-1
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Instance Object Set Position
`----------------------------------------------------
function ObjectInstance_SetPosition(iInstanceObject as integer,iPositionX as float,iPositionY as float,iPositionZ as float)
   if AL_InstanceObject(iInstanceObject).InUse=1
      AL_InstanceObject(iInstanceObject).Position.x=iPositionX
      AL_InstanceObject(iInstanceObject).Position.y=iPositionY
      AL_InstanceObject(iInstanceObject).Position.z=iPositionZ
      if AL_InstanceObject(iInstanceObject).Object>0 then position object AL_InstanceObject(iInstanceObject).Object,iPositionX,iPositionY,iPositionZ
      if AL_InstanceObject(iInstanceObject).Imposter>-1 then Imposter_Setposition(AL_InstanceObject(iInstanceObject).Imposter,iPositionX,iPositionY,iPositionZ)
      if AL_InstanceObject(iInstanceObject).ObjectAL>-1 then Object_Update(AL_InstanceObject(iInstanceObject).ObjectAL)
   endif
endfunction

`----------------------------------------------------
` Instance Object Set Angle
`----------------------------------------------------
function ObjectInstance_SetAngle(iInstanceObject as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_InstanceObject(iInstanceObject).InUse=1
      AL_InstanceObject(iInstanceObject).Angle.x=iAngleX
      AL_InstanceObject(iInstanceObject).Angle.y=iAngleY
      AL_InstanceObject(iInstanceObject).Angle.z=iAngleZ
      if AL_InstanceObject(iInstanceObject).Object>0 then rotate object AL_InstanceObject(iInstanceObject).Object,iAngleX,iAngleY,iAngleZ
      if AL_InstanceObject(iInstanceObject).Imposter>-1 then Imposter_SetAngle(AL_InstanceObject(iInstanceObject).Imposter,iAngleX,iAngleY,iAngleZ)
      if AL_InstanceObject(iInstanceObject).ObjectAL>-1 then Object_Update(AL_InstanceObject(iInstanceObject).ObjectAL)
   endif
endfunction

`----------------------------------------------------
` Instance Object Set Position
`----------------------------------------------------
function ObjectInstance_SetScale(iInstanceObject as integer,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_InstanceObject(iInstanceObject).InUse=1
      AL_InstanceObject(iInstanceObject).Scale.x=iScaleX
      AL_InstanceObject(iInstanceObject).Scale.y=iScaleY
      AL_InstanceObject(iInstanceObject).Scale.z=iScaleZ
      AL_InstanceObject(iInstanceObject).Scale.w=AL_InstanceObject(iInstanceObject).Scale.x/100
      if AL_InstanceObject(iInstanceObject).Scale.w<AL_InstanceObject(iInstanceObject).Scale.y then AL_InstanceObject(iInstanceObject).Scale.w=AL_InstanceObject(iInstanceObject).Scale.y/100
      if AL_InstanceObject(iInstanceObject).Scale.w<AL_InstanceObject(iInstanceObject).Scale.z then AL_InstanceObject(iInstanceObject).Scale.w=AL_InstanceObject(iInstanceObject).Scale.z/100
      if AL_InstanceObject(iInstanceObject).Object>0 then scale object AL_InstanceObject(iInstanceObject).Object,iScaleX,iScaleY,iScaleZ
      if AL_InstanceObject(iInstanceObject).Imposter>-1 then Imposter_SetScale(AL_InstanceObject(iInstanceObject).Imposter,iScaleX,iScaleY,iScaleZ)
      if AL_InstanceObject(iInstanceObject).ObjectAL>-1 then Object_Update(AL_InstanceObject(iInstanceObject).ObjectAL)
   endif
endfunction

`----------------------------------------------------
`Hide Batch
   _Instance_Update:
      if AL_InstanceObjectCount>-1
         for x=0 to 400
            tInstanceObject=AL_InstanceUpdate
            if AL_InstanceObject(tInstanceObject).InUse=1 and AL_InstanceObject(tInstanceObject).Visible=1
               tInstance=AL_InstanceObject(tInstanceObject).Instance
               set vector3 Vector3(1),AL_CameraPos.x-AL_InstanceObject(tInstanceObject).Position.x,AL_CameraPos.y-AL_InstanceObject(tInstanceObject).Position.y,AL_CameraPos.z-AL_InstanceObject(tInstanceObject).Position.z
               Vector4Float(1).x=length vector3(Vector3(1))/(AL_Instance(tInstance).Size.w*AL_InstanceObject(tInstanceObject).Scale.w)
               if Vector4Float(1).x>AL_Instance(tInstance).CullRange
                  if AL_InstanceObject(tInstanceObject).Object>0
                     Object_Remove(AL_InstanceObject(tInstanceObject).ObjectAL)
                     delete object AL_InstanceObject(tInstanceObject).Object
                     AL_InstanceObject(tInstanceObject).Object=0
                     AL_InstanceObject(tInstanceObject).ObjectAL=-1
                  endif
                  if AL_InstanceObject(tInstanceObject).Imposter>-1
                     Imposter_Remove(AL_InstanceObject(tInstanceObject).Imposter)
                     AL_InstanceObject(tInstanceObject).Imposter=-1
                  endif
               else
                  if AL_Instance(tInstance).ImposterEnabled>-1
                     if AL_Instance(tInstance).Imposter=-1
                        if AL_InstanceObject(tInstanceObject).Object=0 then tobject=AL_Instance(tInstance).Object
                        if AL_Instance(tInstance).ObjectLOD1>-1 then tobject=AL_Instance(tInstance).ObjectLOD1
                        if AL_Instance(tInstance).ObjectLOD2>-1 then tobject=AL_Instance(tInstance).ObjectLOD2
                        if AL_Instance(tInstance).ObjectLOD3>-1 then tobject=AL_Instance(tInstance).ObjectLOD3
                        if AL_Instance(tInstance).ObjectLOD4>-1 then tobject=AL_Instance(tInstance).ObjectLOD4
                        AL_Instance(tInstance).Imposter=Imposter_Create(tobject,AL_Instance(tInstance).ImposterEnabled)
                        Imposter_SetOffset(AL_Instance(tInstance).Imposter,AL_Instance(tInstance).ImposterOffset.x,AL_Instance(tInstance).ImposterOffset.y,AL_Instance(tInstance).ImposterOffset.z)
                        if AL_Instance(tInstance).MaskDirectionalShadow>0 then Imposter_SetShadow(AL_Instance(tInstance).Imposter,1) else Imposter_SetShadow(AL_Instance(tInstance).Imposter,0)
                     endif
                     if Vector4Float(1).x>AL_Instance(tInstance).LODRange
                        if AL_InstanceObject(tInstanceObject).Imposter=-1
                           if AL_InstanceObject(tInstanceObject).Object>0
                              Object_Remove(AL_InstanceObject(tInstanceObject).ObjectAL)
                              delete object AL_InstanceObject(tInstanceObject).Object
                              AL_InstanceObject(tInstanceObject).Object=0
                              AL_InstanceObject(tInstanceObject).ObjectAL=-1
                           endif
                           AL_InstanceObject(tInstanceObject).Imposter=Imposter_Add(AL_Instance(tInstance).Imposter)
                           Imposter_SetPosition(AL_InstanceObject(tInstanceObject).Imposter,AL_InstanceObject(tInstanceObject).Position.x,AL_InstanceObject(tInstanceObject).Position.y,AL_InstanceObject(tInstanceObject).Position.z)
                           Imposter_SetAngle(AL_InstanceObject(tInstanceObject).Imposter,AL_InstanceObject(tInstanceObject).Angle.x,AL_InstanceObject(tInstanceObject).Angle.y,AL_InstanceObject(tInstanceObject).Angle.z)
                           Imposter_SetScale(AL_InstanceObject(tInstanceObject).Imposter,AL_InstanceObject(tInstanceObject).Scale.x,AL_InstanceObject(tInstanceObject).Scale.y,AL_InstanceObject(tInstanceObject).Scale.z)
                        endif
                     else
                        if AL_InstanceObject(tInstanceObject).Imposter>-1
                           Imposter_Remove(AL_InstanceObject(tInstanceObject).Imposter)
                           AL_InstanceObject(tInstanceObject).Imposter=-1
                        endif
                     endif
                  endif
                  if AL_InstanceObject(tInstanceObject).Object=0 and AL_InstanceObject(tInstanceObject).Imposter=-1
                     if AL_Instance(tInstance).ObjectLOD4>-1 and AL_InstanceObject(tInstanceObject).Object=0 then AL_InstanceObject(tInstanceObject).Object=FreeUpObject(32500+rnd(16250)):tobject=AL_Instance(tInstance).ObjectLOD4
                     if AL_Instance(tInstance).ObjectLOD3>-1 and AL_InstanceObject(tInstanceObject).Object=0 then AL_InstanceObject(tInstanceObject).Object=FreeUpObject(32500+rnd(16250)):tobject=AL_Instance(tInstance).ObjectLOD3
                     if AL_Instance(tInstance).ObjectLOD2>-1 and AL_InstanceObject(tInstanceObject).Object=0 then AL_InstanceObject(tInstanceObject).Object=FreeUpObject(32500+rnd(16250)):tobject=AL_Instance(tInstance).ObjectLOD2
                     if AL_Instance(tInstance).ObjectLOD1>-1 and AL_InstanceObject(tInstanceObject).Object=0 then AL_InstanceObject(tInstanceObject).Object=FreeUpObject(32500+rnd(16250)):tobject=AL_Instance(tInstance).ObjectLOD1
                     if AL_InstanceObject(tInstanceObject).Object=0 then AL_InstanceObject(tInstanceObject).Object=FreeUpObject(32500+rnd(16250)):tobject=AL_Instance(tInstance).Object
                     if object exist(tobject)=1
                        instance object AL_InstanceObject(tInstanceObject).Object,tobject
                        position object AL_InstanceObject(tInstanceObject).Object,AL_InstanceObject(tInstanceObject).Position.x,AL_InstanceObject(tInstanceObject).Position.y,AL_InstanceObject(tInstanceObject).Position.z
                        scale object AL_InstanceObject(tInstanceObject).Object,AL_InstanceObject(tInstanceObject).Scale.x,AL_InstanceObject(tInstanceObject).Scale.y,AL_InstanceObject(tInstanceObject).Scale.z
                        rotate object AL_InstanceObject(tInstanceObject).Object,AL_InstanceObject(tInstanceObject).Angle.x,AL_InstanceObject(tInstanceObject).Angle.y,AL_InstanceObject(tInstanceObject).Angle.z
                        AL_InstanceObject(tInstanceObject).ObjectAL=Object_Add(AL_InstanceObject(tInstanceObject).Object)
                        tBounds=AL_Object(AL_InstanceObject(tInstanceObject).ObjectAL).Bounds
                        VFC_Bounds(tBounds).MapScape.x=2
                        VFC_Bounds(tBounds).MapScape.y=AL_InstanceObject(tInstanceObject).Entity
                        Object_SetDrawDistance(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(tInstance).CullRange)
                        Object_SetMask(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(tInstance).MaskAdvLighting,AL_Instance(tInstance).MaskShadow,AL_Instance(tInstance).MaskDirectionalShadow,AL_Instance(tInstance).ReflectionCapture)
                        if AL_Instance(tInstance).ObjectLOD1>-1
                           LOD_Apply(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(tInstance).Object,AL_Instance(tInstance).ObjectLOD1,AL_Instance(tInstance).ObjectLOD2,AL_Instance(tInstance).ObjectLOD3,AL_Instance(tInstance).ObjectLOD4)
                           LOD_SetTransition(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(tInstance).TransitionObject,AL_Instance(tInstance).TransitionLOD1,AL_Instance(tInstance).TransitionLOD2,AL_Instance(tInstance).TransitionLOD3,AL_Instance(tInstance).TransitionLOD4)
                           LOD_SetBatch(AL_InstanceObject(tInstanceObject).ObjectAL,-1,AL_Instance(tInstance).BatchLOD1,AL_Instance(tInstance).BatchLOD2,AL_Instance(tInstance).BatchLOD3,AL_Instance(tInstance).BatchLOD4)
                           LOD_SetRange(AL_InstanceObject(tInstanceObject).ObjectAL,AL_Instance(tInstance).LODRange,AL_Instance(tInstance).CullRange)
                        endif
                     endif
                  endif
               endif
            endif
            inc AL_InstanceUpdate
            if AL_InstanceUpdate>AL_InstanceObjectCount then exit
         next x
         if AL_InstanceUpdate>AL_InstanceObjectCount then AL_InstanceUpdate=0
      endif
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Create Sky
`----------------------------------------------------
function Sky_Create()
   if AL_Sky=0
      global AL_Sky as boolean
      global AL_SkyVisible as integer
      global AL_SkyDynamic as integer
      global AL_SkySunAngle as Vec4Float
      global AL_SkySunDirection as Vec4Float
      global AL_SkyMoonAngle as Vec4Float
      global AL_SkyMoonDirection as Vec3Float
      global AL_SkyStarsAngle as Vec4Float
      global AL_SkyColor as Vec3Float
      global AL_SkyNightColor as Vec3Float
      global AL_SkyDensity as float
      global AL_SkyScatterPhase as float
      global AL_SkyAbsorption as Vec4Float
      global AL_SkyAbsorptionSun as Vec4Float
      global AL_SkyTotal as Vec4Float
      global AL_SkySunPhase as Vec4Float
      global AL_SkyFog1 as Vec3Float
      global AL_SkyFog2 as Vec3Float
      global AL_SkyLighting as Vec4Float
      global AL_SkySunScale as float
      global AL_SkyScattering as float
      global dim AL_SkyObject(2) as integer
      global dim AL_SkyEffect(2) as integer
      AL_Sky=1
      AL_SkyDynamic=0
      AL_SkySunScale=0.03
      AL_SkyScattering=2
      AL_SkyEffect(1)=FreeUpEffect(32500+rnd(16250))
      AL_SkyObject(1)=FreeUpObject(32500+rnd(16250))
      make object sphere AL_SkyObject(1),98,18,18
      set object radius AL_SkyObject(1),9999^9999
      set object mask AL_SkyObject(1),(2^AL_Camera(0))+(2^AL_Camera(1))+(2^AL_Camera(5))
      load effect AL_Directory+"Sky\Sky.fx",AL_SkyEffect(1),0,1
      Effect_SetConstants(AL_SkyEffect(1))
      set object effect AL_SkyObject(1),AL_SkyEffect(1)
      texture object AL_SkyObject(1),0,AL_ImageMRT(1)
      texture object AL_SkyObject(1),1,AL_ImageMRT(5)
      set vector4 Vector4(1),AL_SkySunScale,AL_SkySunScale-0.002,50,0
      set effect constant vector AL_SkyEffect(1),"SunScale",Vector4(1)
      AL_SkyObject(2)=FreeUpObject(32500+rnd(16250))
      AL_SkyEffect(2)=FreeUpEffect(32500+rnd(16250))
      make object sphere AL_SkyObject(2),98,18,18
      set object radius AL_SkyObject(2),9999^9999
      texture object AL_SkyObject(2),0,AL_Image(2)
      texture object AL_SkyObject(2),1,AL_ImageMRT(5)
      set object mask AL_SkyObject(2),2^AL_Camera(3)
      load effect AL_Directory+"Sky/Sky Mask.fx",AL_SkyEffect(2),0,1
      set effect constant vector AL_SkyEffect(2),"ViewSize2",Camera_ViewVec(Vector4(1),AL_PostViewVec.x,AL_PostViewVec.y,0)
      set effect constant float AL_SkyEffect(2),"CameraRange",AL_CameraData(2)/1000
      set object effect AL_SkyObject(2),AL_SkyEffect(2)
      Sky_SetPhase(0.4,0.015)
      Sky_SetColor(120,175,225,70,74,80)
      Sky_SetCloudsScale(1,1)
      Sky_SetSunAngle(0,0,0)
      Sky_SetMoonAngle(0,0,0,0.01)
      Sky_SetStarsAngle(0,0,0)
      Sky_SetVisible(1)
   endif
endfunction

`----------------------------------------------------
` Delete Sky
`----------------------------------------------------
function Sky_Delete()
   if AL_Sky=1
      if object exist(AL_SkyObject(1))=1 then delete object AL_SkyObject(1)
      if effect exist(AL_SkyEffect(1))=1 then delete effect AL_SkyEffect(1)
      if object exist(AL_SkyObject(2))=1 then delete object AL_SkyObject(2)
      if effect exist(AL_SkyEffect(2))=1 then delete effect AL_SkyEffect(2)
      AL_Sky=0
      AL_SkyVisible=0
   endif
endfunction

`----------------------------------------------------
` Set Sky Visible
`----------------------------------------------------
function Sky_SetVisible(iVisible as integer)
   if AL_Sky=1
      AL_SkyVisible=iVisible
      if iVisible=1
         show object AL_SkyObject(1)
         show object AL_SkyObject(2)
      else
         hide object AL_SkyObject(1)
         hide object AL_SkyObject(2)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Sky Dynamic
`----------------------------------------------------
function Sky_SetDynamic(iDynamic as boolean)
   if AL_Sky=1 then AL_SkyDynamic=iDynamic
endfunction

`----------------------------------------------------
` Set Sky Phase
`----------------------------------------------------
function Sky_SetPhase(iDensity as float,iScatterPhase as float)
   if AL_Sky=1
      AL_SkyDensity=iDensity
      AL_SkyScatterPhase=iScatterPhase
      set effect constant float AL_SkyEffect(1),"Density",AL_SkyDensity
   endif
endfunction

`----------------------------------------------------
` Set Sky Color
`----------------------------------------------------
function Sky_SetColor(iSkyColorR as float,iSkyColorG as float,iSkyColorB as float,iNightColorR as float,iNightColorG as float,iNightColorB as float)
   if AL_Sky=1
      AL_SkyColor.x=((iSkyColorR/255)^2.2)*AL_SkyScattering
      AL_SkyColor.y=((iSkyColorG/255)^2.2)*AL_SkyScattering
      AL_SkyColor.z=((iSkyColorB/255)^2.2)*AL_SkyScattering
      AL_SkyNightColor.x=(iNightColorR/255)^2.2
      AL_SkyNightColor.y=(iNightColorG/255)^2.2
      AL_SkyNightColor.z=(iNightColorB/255)^2.2
      set vector4 Vector4(1),AL_SkyColor.x,AL_SkyColor.y,AL_SkyColor.z,0
      set effect constant vector AL_SkyEffect(1),"SkyColor",Vector4(1)
      set vector4 Vector4(1),AL_SkyNightColor.x,AL_SkyNightColor.y,AL_SkyNightColor.z,(AL_SkyNightColor.x+AL_SkyNightColor.y+AL_SkyNightColor.z)*0.3333
      set effect constant vector AL_SkyEffect(1),"NightColor",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Star Texture
`----------------------------------------------------
function Sky_SetTexture(iClouds as integer,iMoon as integer,iStars as integer)
   if AL_Sky=1
      texture object AL_SkyObject(1),2,iClouds
      texture object AL_SkyObject(1),3,iMoon
      texture object AL_SkyObject(1),4,iStars
      texture object AL_SkyObject(2),2,iClouds
   endif
endfunction

`----------------------------------------------------
` Set Sky Cloud Scale
`----------------------------------------------------
function Sky_SetCloudsScale(iUSacle as float,iVSacle as float)
   if AL_Sky=1
      set vector4 Vector4(1),iUSacle,iVSacle,0,0
      set effect constant vector AL_SkyEffect(1),"CloudScale",Vector4(1)
      set effect constant vector AL_SkyEffect(2),"CloudScale",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Sun Angle
`----------------------------------------------------
function Sky_SetSunAngle(iAngX as float,iAngY as float,iAngZ as float)
   if AL_Sky=1
      AL_SkySunAngle.x=wrapvalue(iAngX)
      AL_SkySunAngle.y=wrapvalue(iAngY)
      AL_SkySunAngle.z=wrapvalue(iAngZ)
      rotate x matrix4 Matrix(1),AL_SkySunAngle.x*0.01745329251
      rotate y matrix4 Matrix(2),AL_SkySunAngle.y*0.01745329251
      rotate z matrix4 Matrix(3),AL_SkySunAngle.z*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      set vector3 Vector3(1),0,0,1
      transform normals vector3 Vector3(1),Vector3(1),Matrix(4)
      AL_SkySunDirection.x=x vector3(Vector3(1))
      AL_SkySunDirection.y=y vector3(Vector3(1))
      AL_SkySunDirection.z=z vector3(Vector3(1))
      Effect_SetAllConstantVector("SunDirection",-AL_SkySunDirection.x,-AL_SkySunDirection.y,-AL_SkySunDirection.z,0)
      if AL_SkyDynamic=1
         if AL_SkySunDirection.y<0 then DirectionalLight_SetAngle(AL_SkySunAngle.x,AL_SkySunAngle.y,AL_SkySunAngle.z) else DirectionalLight_SetAngle(AL_SkyMoonAngle.x,AL_SkyMoonAngle.y,AL_SkyMoonAngle.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Moon Angle
`----------------------------------------------------
function Sky_SetMoonAngle(iAngX as float,iAngY as float,iAngZ as float,iSize as float)
   if AL_Sky=1
      AL_SkyMoonAngle.x=wrapvalue(iAngX)
      AL_SkyMoonAngle.y=wrapvalue(iAngY)
      AL_SkyMoonAngle.z=wrapvalue(iAngZ)
      AL_SkyMoonAngle.w=iSize
      rotate x matrix4 Matrix(1),AL_SkyMoonAngle.x*0.01745329251
      rotate y matrix4 Matrix(2),AL_SkyMoonAngle.y*0.01745329251
      rotate z matrix4 Matrix(3),AL_SkyMoonAngle.z*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      set vector3 Vector3(1),0,0,1
      transform normals vector3 Vector3(1),Vector3(1),Matrix(4)
      AL_SkyMoonDirection.x=x vector3(Vector3(1))
      AL_SkyMoonDirection.y=y vector3(Vector3(1))
      AL_SkyMoonDirection.z=z vector3(Vector3(1))
      set vector3 Vector3(1),0,0,0
      set vector3 Vector3(2),-AL_SkyMoonDirection.x,-AL_SkyMoonDirection.y,-AL_SkyMoonDirection.z
      set vector3 Vector3(3),0,1,0
      build lookat lhmatrix4 Matrix(1),Vector3(1),Vector3(2),Vector3(3)
      build fov lhmatrix4 Matrix(2),AL_SkyMoonAngle.w*0.01745329251,1,1,10000
      multiply matrix4 Matrix(3),Matrix(1),Matrix(2)
      set effect constant matrix AL_SkyEffect(1),"MoonProj",Matrix(3)
      if AL_SkyDynamic=1
         if AL_SkySunDirection.y<0 then DirectionalLight_SetAngle(AL_SkySunAngle.x,AL_SkySunAngle.y,AL_SkySunAngle.z) else DirectionalLight_SetAngle(AL_SkyMoonAngle.x,AL_SkyMoonAngle.y,AL_SkyMoonAngle.z)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Stars Angle
`----------------------------------------------------
function Sky_SetStarsAngle(iAngX as float,iAngY as float,iAngZ as float)
   if AL_Sky=1
      AL_SkyStarsAngle.x=iAngX
      AL_SkyStarsAngle.y=iAngY
      AL_SkyStarsAngle.z=iAngZ
      rotate x matrix4 Matrix(1),AL_SkyStarsAngle.x*0.01745329251
      rotate y matrix4 Matrix(2),AL_SkyStarsAngle.Y*0.01745329251
      rotate z matrix4 Matrix(3),AL_SkyStarsAngle.Z*0.01745329251
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      set effect constant matrix AL_SkyEffect(1),"StarsAngle",Matrix(4)
   endif
endfunction

`----------------------------------------------------
`Update Sky
   _Sky_Update:
      if AL_Sky=1
         position object AL_SkyObject(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         scale object AL_SkyObject(1),AL_CameraData(2)*1.99,AL_CameraData(2)*1.99,AL_CameraData(2)*1.99
         position object AL_SkyObject(2),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         scale object AL_SkyObject(2),AL_CameraData(2)*1.99,AL_CameraData(2)*1.99,AL_CameraData(2)*1.99
         if AL_SkyDynamic=1
            AL_SkySunDirection.w=AL_SkySunDirection.y*2
            if AL_SkySunDirection.w>1 then AL_SkySunDirection.w=1
            AL_SkySunDirection.w=AL_SkySunDirection.w*abs(AL_SkySunDirection.w)
            AL_SkyAbsorptionSun.w=-(AL_SkySunDirection.w)+AL_SkyScatterPhase
            if AL_SkyAbsorptionSun.w<0.0035 then AL_SkyAbsorptionSun.w=0.0035
            AL_SkyAbsorptionSun.x=exp(AL_SkyColor.x*-(AL_SkyDensity/(AL_SkyAbsorptionSun.w^0.75))*0.30102999566)^2
            AL_SkyAbsorptionSun.y=exp(AL_SkyColor.y*-(AL_SkyDensity/(AL_SkyAbsorptionSun.w^0.75))*0.30102999566)^2
            AL_SkyAbsorptionSun.z=exp(AL_SkyColor.z*-(AL_SkyDensity/(AL_SkyAbsorptionSun.w^0.75))*0.30102999566)^2
            set vector4 Vector4(1),AL_SkyAbsorptionSun.x,AL_SkyAbsorptionSun.y,AL_SkyAbsorptionSun.z,AL_SkySunPhase.x
            set effect constant vector AL_SkyEffect(1),"AbsorptionSun",Vector4(1)
            AL_SkySunPhase.x=-(AL_SkySunDirection.w)+AL_SkyScatterPhase
            if AL_SkySunPhase.x<0 then AL_SkySunPhase.x=0
            if AL_SkySunPhase.x>1 then AL_SkySunPhase.x=1
            AL_SkySunPhase.y=abs(AL_SkySunDirection.y*20)
            if AL_SkySunPhase.y>1 then AL_SkySunPhase.y=1
            AL_SkySunPhase.z=-(AL_SkySunDirection.w-(AL_SkyScatterPhase/1.25))*2500
            if AL_SkySunPhase.z<0 then AL_SkySunPhase.z=0
            if AL_SkySunPhase.z>255 then AL_SkySunPhase.z=255
            AL_SkySunPhase.w=0.333+((1-((AL_CloudsDensity/100)^10))*0.666)
            set effect constant float AL_SkyEffect(1),"CloudIntensity",AL_SkySunPhase.w*5
            AL_SkyTotal.x=AL_SkyAbsorptionSun.x*0.5+0.16666*(AL_SkyAbsorptionSun.x+AL_SkyAbsorptionSun.y+AL_SkyAbsorptionSun.z)
            AL_SkyTotal.y=AL_SkyAbsorptionSun.y*0.5+0.16666*(AL_SkyAbsorptionSun.x+AL_SkyAbsorptionSun.y+AL_SkyAbsorptionSun.z)
            AL_SkyTotal.z=AL_SkyAbsorptionSun.z*0.5+0.16666*(AL_SkyAbsorptionSun.x+AL_SkyAbsorptionSun.y+AL_SkyAbsorptionSun.z)
            AL_SkyTotal.w=(AL_SkyTotal.x+AL_SkyTotal.y+AL_SkyTotal.z)*2
            if AL_SkyTotal.w>1 then AL_SkyTotal.w=1
            set vector4 Vector4(1),AL_SkyTotal.x,AL_SkyTotal.y,AL_SkyTotal.z,AL_SkyTotal.w
            set effect constant vector AL_SkyEffect(1),"SkyTotal",Vector4(1)
            AL_SkyLighting.x=(AL_SkyNightColor.x*0.22)+AL_SkyTotal.w*(AL_SkyAbsorptionSun.x-(AL_SkyNightColor.x*0.22))
            AL_SkyLighting.y=(AL_SkyNightColor.y*0.22)+AL_SkyTotal.w*(AL_SkyAbsorptionSun.y-(AL_SkyNightColor.y*0.22))
            AL_SkyLighting.z=(AL_SkyNightColor.z*0.22)+AL_SkyTotal.w*(AL_SkyAbsorptionSun.z-(AL_SkyNightColor.z*0.22))
            AL_SkyLighting.x=AL_SkyTotal.x+AL_SkySunPhase.w*(AL_SkyLighting.x-AL_SkyTotal.x)
            AL_SkyLighting.y=AL_SkyTotal.y+AL_SkySunPhase.w*(AL_SkyLighting.y-AL_SkyTotal.y)
            AL_SkyLighting.z=AL_SkyTotal.z+AL_SkySunPhase.w*(AL_SkyLighting.z-AL_SkyTotal.z)
            AL_SkyLighting.x=(AL_SkyLighting.x^0.45454545)*255
            AL_SkyLighting.y=(AL_SkyLighting.y^0.45454545)*255
            AL_SkyLighting.z=(AL_SkyLighting.z^0.45454545)*255
            DirectionalLight_SetColor(AL_SkyLighting.x*AL_SkySunPhase.y*AL_SkySunPhase.w,AL_SkyLighting.y*AL_SkySunPhase.y*AL_SkySunPhase.w,AL_SkyLighting.z*AL_SkySunPhase.y*AL_SkySunPhase.w)
            Ambient_SetColor(AL_SkyLighting.x,AL_SkyLighting.y,AL_SkyLighting.z)
            AL_SkyAbsorption.w=AL_SkyDensity/0.01438967659
            AL_SkyAbsorption.x=exp(AL_SkyColor.x*-AL_SkyAbsorption.w*0.30102999566)^2
            AL_SkyAbsorption.y=exp(AL_SkyColor.y*-AL_SkyAbsorption.w*0.30102999566)^2
            AL_SkyAbsorption.z=exp(AL_SkyColor.z*-AL_SkyAbsorption.w*0.30102999566)^2
            AL_SkyFog1.x=AL_SkyColor.x*AL_SkyAbsorption.w
            AL_SkyFog1.y=AL_SkyColor.y*AL_SkyAbsorption.w
            AL_SkyFog1.z=AL_SkyColor.z*AL_SkyAbsorption.w
            AL_SkyFog1.x=(AL_SkyFog1.x*AL_SkyAbsorption.x)+AL_SkySunPhase.x*((AL_SkyFog1.x/(AL_SkyFog1.x+0.5))-(AL_SkyFog1.x*AL_SkyAbsorption.x))
            AL_SkyFog1.y=(AL_SkyFog1.y*AL_SkyAbsorption.y)+AL_SkySunPhase.x*((AL_SkyFog1.y/(AL_SkyFog1.y+0.5))-(AL_SkyFog1.y*AL_SkyAbsorption.y))
            AL_SkyFog1.z=(AL_SkyFog1.z*AL_SkyAbsorption.z)+AL_SkySunPhase.x*((AL_SkyFog1.z/(AL_SkyFog1.z+0.5))-(AL_SkyFog1.z*AL_SkyAbsorption.z))
            AL_SkyFog1.z=((AL_SkyTotal.z*AL_SkyFog1.z)^0.45454545)*255
            AL_SkyFog1.x=((AL_SkyTotal.x*AL_SkyFog1.x)^0.45454545)*255
            AL_SkyFog1.y=((AL_SkyTotal.y*AL_SkyFog1.y)^0.45454545)*255
            AL_SkyFog2.x=(AL_SkyAbsorptionSun.x^0.45454545)*AL_SkySunPhase.z
            AL_SkyFog2.y=(AL_SkyAbsorptionSun.y^0.45454545)*AL_SkySunPhase.z
            AL_SkyFog2.z=(AL_SkyAbsorptionSun.z^0.45454545)*AL_SkySunPhase.z
            AL_SkyFog2.x=AL_SkyFog1.x+AL_SkySunPhase.w*(AL_SkyFog2.x-AL_SkyFog1.x)
            AL_SkyFog2.y=AL_SkyFog1.y+AL_SkySunPhase.w*(AL_SkyFog2.y-AL_SkyFog1.y)
            AL_SkyFog2.z=AL_SkyFog1.z+AL_SkySunPhase.w*(AL_SkyFog2.z-AL_SkyFog1.z)
            Fog_SetColor(AL_SkyFog1.x,AL_SkyFog1.y,AL_SkyFog1.z,AL_SkyFog2.x,AL_SkyFog2.y,AL_SkyFog2.z)
         endif
      endif
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Create Cloud
`----------------------------------------------------
function Clouds_Create()
   if AL_Clouds=0
      global AL_Clouds as boolean
      global AL_CloudsCurrent as integer
      global AL_CloudsDensity as float
      global AL_CloudsShift as float
      global AL_CloudsSize as float
      global AL_CloudsUvSize as Vec4Float
      global AL_CloudsHeight as Vec2Float
      global AL_CloudsOldPos as Vec3Float
      global AL_CloudsD3DEfx as dword
      global AL_CloudsCloudScaleParam as dword
      global AL_CloudsSpeed as Vec4Float
      global AL_CloudsObject as integer
      global AL_CloudsEffect as integer
      global dim AL_CloudsRandom(60) as float
      AL_Clouds=1
      AL_CloudsCurrent=1
      AL_CloudsEffect=FreeUpEffect(32500+rnd(16250))
      AL_CloudsObject=FreeUpObject(32500+rnd(16250))
   `   load object AL_Directory+"Resources\Clouds.dbo",AL_CloudsObject
   		AL_CloudsObject=makeobjectcube(-1000)
      set object radius AL_CloudsObject,9999^9999
      disable object zwrite AL_CloudsObject
      enable object zbias AL_CloudsObject,-160000,160000
      set object mask AL_CloudsObject,2^AL_Camera(2)
      set object transparency AL_CloudsObject,1
      load effect AL_Directory+"Sky\Clouds.fx",AL_CloudsEffect,0,1
      set object effect AL_CloudsObject,AL_CloudsEffect
      AL_CloudsD3DEfx=Object_GetShaderPtr(AL_CloudsObject,0)
      AL_CloudsCloudScaleParam=Shader_GetParameterByName(AL_CloudsD3DEfx,0,"CloudScale")
      for r=1 to 50
         repeat
            AL_CloudsRandom(r)=rnd(20)
         until (AL_CloudsRandom(r)<AL_CloudsRandom(r-1)-5 or AL_CloudsRandom(r)>AL_CloudsRandom(r-1)+5)
      next r
      AL_CloudsSpeed.x=0.00001
      AL_CloudsSpeed.y=-0.00001
      Clouds_SetDensity(25)
      Clouds_SetHeight(14000,100)
      Clouds_SetScale(140000,32,32,3,3)
   endif
endfunction

`----------------------------------------------------
` Delete Clouds
`----------------------------------------------------
function Clouds_Delete()
   if AL_Clouds=1
      AL_Clouds=0
      if object exist(AL_CloudsObject) then delete object AL_CloudsObject
      if effect exist(AL_CloudsEffect) then delete effect AL_CloudsEffect
   endif
endfunction

`----------------------------------------------------
` Clouds Texture
`----------------------------------------------------
function Clouds_SetTexture(iCloudTexture as integer,iNoiseTexture as integer)
   if AL_Clouds=1
      texture object AL_CloudsObject,0,iCloudTexture
      texture object AL_CloudsObject,1,iNoiseTexture
   endif
endfunction

`----------------------------------------------------
` Clouds Density
`----------------------------------------------------
function Clouds_SetDensity(iDensity as float)
   if AL_Clouds=1
      if AL_CloudsDensity<>iDensity
         AL_CloudsDensity=iDensity
         if AL_CloudsDensity>100 then AL_CloudsDensity=100
         if AL_CloudsDensity<1 then AL_CloudsDensity=1
         Vector4Float(1).x=1+(AL_CloudsDensity/100)
         set vector4 Vector4(1),1-(Vector4Float(1).x-1),((Vector4Float(1).x-1)^2)*6,1+(((Vector4Float(1).x-1)^4)*4),0.75+((Vector4Float(1).x-1)*0.25)
         set effect constant vector AL_CloudsEffect,"CloudDensity",Vector4(1)
         set vector4 Vector4(1),AL_CloudsHeight.x,((AL_CloudsSize/50)*(AL_CloudsHeight.y/100)),0,0
         set effect constant vector AL_CloudsEffect,"CloudHeight",Vector4(1)
      endif
   endif
endfunction

`----------------------------------------------------
` Clouds Scale
`----------------------------------------------------
function Clouds_SetScale(iSacle as float,iUSacle as float,iVSacle as float,iNoiseUSacle as float,iNoiseVSacle as float)
   if AL_Clouds=1
      AL_CloudsSize=iSacle
      AL_CloudsUvSize.x=iUSacle
      AL_CloudsUvSize.y=iVSacle
      AL_CloudsUvSize.z=iNoiseUSacle
      AL_CloudsUvSize.w=iNoiseVSacle
      set vector4 Vector4(1),(AL_CloudsSize/50)*iUSacle,(AL_CloudsSize/50)*iVSacle,0,0
      set effect constant vector AL_CloudsEffect,"CloudUvScale",Vector4(1)
      set vector4 Vector4(1),(AL_CloudsSize/50)*iNoiseUSacle,(AL_CloudsSize/50)*iNoiseVSacle,0,0
      set effect constant vector AL_CloudsEffect,"NoiseUvScale",Vector4(1)
      set vector4 Vector4(1),AL_CloudsSize,(AL_CloudsSize/50),0.001+AL_Fog(1),0
      set effect constant vector AL_CloudsEffect,"CloudFalloff",Vector4(1)
      set vector4 Vector4(1),AL_CloudsHeight.x,(AL_CloudsSize/50)*(AL_CloudsHeight.y/100),0,0
      set effect constant vector AL_CloudsEffect,"CloudHeight",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Clouds Height
`----------------------------------------------------
function Clouds_SetHeight(iHeight as float,iHeightSacle as float)
   if AL_Clouds=1
      AL_CloudsHeight.x=iHeight
      AL_CloudsHeight.y=iHeightSacle
      set vector4 Vector4(1),AL_CloudsHeight.x,((AL_CloudsSize/50)*(AL_CloudsHeight.y/100))*(0.25+((AL_CloudsDensity/100)*0.75)),0,0
      set effect constant vector AL_CloudsEffect,"CloudHeight",Vector4(1)
   endif
endfunction

`----------------------------------------------------
`Update Clouds
   _Clouds_Update:
      if AL_Clouds=1
         set vector4 Vector4(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,0
         set effect constant vector AL_CloudsEffect,"CloudPosition",Vector4(1)
         position object AL_CloudsObject,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         Vector4Float(1).x=(AL_CameraPos.x-AL_CloudsOldPos.x)*AL_CameraDir.x
         Vector4Float(1).y=(AL_CameraPos.y-AL_CloudsOldPos.y)*AL_CameraDir.y
         Vector4Float(1).z=(AL_CameraPos.z-AL_CloudsOldPos.z)*AL_CameraDir.z
         AL_CloudsShift=AL_CloudsShift-(Vector4Float(1).x+Vector4Float(1).y+Vector4Float(1).z)
         AL_CloudsOldPos=AL_CameraPos
         if AL_CloudsShift<0 then AL_CloudsShift=(AL_CloudsSize/50):inc AL_CloudsRandom(0)
         if AL_CloudsShift>(AL_CloudsSize/50) then AL_CloudsShift=0:dec AL_CloudsRandom(0)
         if AL_CloudsRandom(0)<0 then AL_CloudsRandom(0)=49
         if AL_CloudsRandom(0)>49 then AL_CloudsRandom(0)=0
         for s=1 to 50
            tRandom=s+AL_CloudsRandom(0)
            if tRandom>50 then tRandom=tRandom-50
            tCloudScale=Shader_GetParameterElement(AL_CloudsD3DEfx,AL_CloudsCloudScaleParam,s)
            Shader_SetVectorVal AL_CloudsD3DEfx,tCloudScale,((s-1)+(AL_CloudsShift/(AL_CloudsSize/50)))*((AL_CloudsSize/50)/100)*2,AL_CloudsRandom(tRandom)/20,0,0
         next s
         AL_CloudsSpeed.z=AL_CloudsSpeed.z+(AL_CloudsSpeed.x*AL_Timer)
         AL_CloudsSpeed.w=AL_CloudsSpeed.w+(AL_CloudsSpeed.y*AL_Timer)
         if AL_CloudsSpeed.z>32 then AL_CloudsSpeed.z=0
         if AL_CloudsSpeed.w>32 then AL_CloudsSpeed.w=0
         if AL_CloudsSpeed.z<0 then AL_CloudsSpeed.z=32
         if AL_CloudsSpeed.w<0 then AL_CloudsSpeed.w=32
         set vector4 Vector4(1),AL_CloudsSpeed.z*AL_CloudsSize,AL_CloudsSpeed.w*AL_CloudsSize,0,0
         set effect constant vector AL_CloudsEffect,"CloudSpeed",Vector4(1)
         if AL_Sky=1
            set vector4 Vector4(1),AL_CloudsSpeed.z,AL_CloudsSpeed.w,0,0
            set effect constant vector AL_SkyEffect(1),"CloudSpeed",Vector4(1)
            set effect constant vector AL_SkyEffect(2),"CloudSpeed",Vector4(1)
         endif
         if AL_SkyDynamic=1
            if AL_SkySunDirection.y<AL_SkyScatterPhase/2
               Vector4Float(1).x=AL_SkySunDirection.x:Vector4Float(1).y=AL_SkySunDirection.y:Vector4Float(1).z=AL_SkySunDirection.z
            else
               Vector4Float(1).x=AL_SkyMoonDirection.x:Vector4Float(1).y=AL_SkyMoonDirection.y:Vector4Float(1).z=AL_SkyMoonDirection.z
            endif
         else
            Vector4Float(1).x=AL_DirLightDirection.x:Vector4Float(1).y=AL_DirLightDirection.y:Vector4Float(1).z=AL_DirLightDirection.z
         endif
         set vector4 Vector4(1),Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z,0
         set effect constant vector AL_CloudsEffect,"LightDirection",Vector4(1)
         set vector4 Vector4(1),Vector4Float(1).x*0.75,(Vector4Float(1).y*0.5)-0.5,Vector4Float(1).z*0.75,0
         set effect constant vector AL_CloudsEffect,"LightOffset",Vector4(1)
      endif
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type AL_EmitterGroupData
   InUse as boolean
   EmitterCount as integer
   CollisionPosition as Vec3Float
   CollisionNormal as Vec3Float
   pEmitter as dword
endtype

type AL_EmitterTextureData
   File as string
   Image as integer
endtype

type AL_EmitterData
   InUse as boolean
   EmitterGroup as integer
   Object as integer
   Bounds as integer
   ForceUpdate as integer
   Particles as integer
   Visible as integer
   BoundsSize as float
   DrawDistance as float
   Priority as float
   Update as integer
   Play as integer
   ParticleEmit as integer
   ParticleTimer as float
   Distort as integer
   Life as float
   LifeEnd as float
   Attach as integer
   AttachNum as integer
   AutoDelete as boolean
   Position as Vec3Float
   PositionStart as Vec3Float
   PositionOffset as Vec3Float
   Angle as Vec3Float
   AngleStart as Vec3Float
   Scale as float
   EmissionEvent as integer
   NextEmissionEvent as integer
   CollisionEvent as integer
   NextCollisionEvent as integer
   Pixel as integer
   PixelRemove as integer
   pParticle as dword
   pEmissionEvent as dword
   pCollisionEvent as dword
endtype

type AL_ParticleData
   InUse as boolean
   Update as integer
   Life as float
   LifeRnd as float
   LifeStart as float
   Position as Vec3Float
   CPosition as Vec3Float
   PositionRnd as Vec3Float
   Angle as Vec3Float
   Gravity as float
   GravityCurrent as float
   Wind as float
   WindCurrent as float
   Velocity as float
   VelocityStart as float
   VelocityEnd as float
   VelocityCStart as float
   VelocityCEnd as float
   VelocityTransition as float
   CosSin as integer
   Sinpos as Vec4Float
   Cospos as Vec4Float
   CosSinRate as float
   RndVal as float
   Direction as Vec3Float
   CollisionMode as integer
   CollisionPosition as Vec3Float
   CollisionNormal as Vec3Float
   CollisionMass as float
   Pixel as integer
   pEffect as dword
   pParticle as dword
endtype

type AL_ParticleShaderData
   Effect as integer
   pEffect as dword
   pParticle as dword
endtype

`----------------------------------------------------
` Emitter Load
`----------------------------------------------------
function Emitter_Load(iFile as string)
   local tStr as string
   local tTextureFile as string
   local tFloat as float
   if fileexist(iFile)=1
      tFile=FreeUpFile()
      tMesh=FreeUpMesh()
      tMemBlock=FreeUpMemblock()
      open to read tFile,iFile
         tEmitterGroup=-1
         for e=AL_EmitterGroupFreeUp to AL_EmitterGroupCount
            if AL_EmitterGroup(e).InUse=0 then tEmitterGroup=e:exit
         next e
         if tEmitterGroup=-1
            array insert at bottom AL_EmitterGroup()
            inc AL_EmitterGroupCount
            tEmitterGroup=AL_EmitterGroupCount
         endif
         AL_EmitterGroupFreeUp=tEmitterGroup
         AL_EmitterGroup(tEmitterGroup).InUse=1
         read long tFile,tInt
         AL_EmitterGroup(tEmitterGroup).EmitterCount=tInt
         AL_EmitterGroup(tEmitterGroup).pEmitter=make memory(4+(AL_EmitterGroup(tEmitterGroup).EmitterCount*4))
         local dim tEmitters(tInt) as integer
         for t=0 to AL_EmitterGroup(tEmitterGroup).EmitterCount-1
            tEmitter=-1
            for e=AL_EmitterFreeUp to AL_EmitterCount
               if AL_Emitter(e).InUse=0 then tEmitter=e:exit
            next e
            if tEmitter=-1
               array insert at bottom AL_Emitter()
               array insert at bottom AL_EmitterUpdate()
               inc AL_EmitterCount
               tEmitter=AL_EmitterCount
            endif
            AL_EmitterFreeUp=tEmitter
            PokeInteger(AL_EmitterGroup(tEmitterGroup).pEmitter+(t*4),tEmitter)
            AL_Emitter(tEmitter).InUse=1
            AL_Emitter(tEmitter).EmitterGroup=tEmitterGroup
            AL_Emitter(tEmitter).Pixel=0
            AL_Emitter(tEmitter).Visible=0
            AL_Emitter(tEmitter).Play=0
            AL_Emitter(tEmitter).Life=0
            AL_Emitter(tEmitter).AttachNum=0
            AL_Emitter(tEmitter).AutoDelete=0
            AL_Emitter(tEmitter).ParticleEmit=0
            AL_Emitter(tEmitter).EmissionEvent=-1
            AL_Emitter(tEmitter).CollisionEvent=-1
            AL_Emitter(tEmitter).Position.x=0
            AL_Emitter(tEmitter).Position.y=0
            AL_Emitter(tEmitter).Position.z=0
            AL_Emitter(tEmitter).Angle.x=0
            AL_Emitter(tEmitter).Angle.y=0
            AL_Emitter(tEmitter).Angle.z=0
            AL_Emitter(tEmitter).Scale=100
            tEmitters(t)=tEmitter
            read string tFile,tStr
            tTexture=-1
            for i=0 to AL_EmitterTextureCount
               if AL_EmitterTexture(i).File=tStr then tTexture=i:exit
            next i
            if tTexture=-1
               if fileexist(tStr)=1
                  tTextureFile=tStr
               else
                  for t=0 to len(iFile)
                     if mid$(iFile,len(iFile)-t)="\" or mid$(iFile,len(iFile)-t)="/" then exit
                  next t
                  tTextureFile=left$(iFile,len(iFile)-t)
                  for t=0 to len(tStr)
                     if mid$(tStr,len(tStr)-t)="\" or mid$(tStr,len(tStr)-t)="/" then exit
                  next t
                  tTextureFile=tTextureFile+right$(tStr,t)
               endif
               if fileexist(tTextureFile)=1
                  array insert at bottom AL_EmitterTexture()
                  inc AL_EmitterTextureCount
                  tTexture=AL_EmitterTextureCount
                  AL_EmitterTexture(tTexture).File=tStr
                  AL_EmitterTexture(tTexture).Image=FreeUpImage(32500+rnd(16250))
                  load image tTextureFile,AL_EmitterTexture(tTexture).Image
               endif
            endif
            read long tFile,tInt:AL_Emitter(tEmitter).ForceUpdate=tInt
            read long tFile,tInt:AL_Emitter(tEmitter).Particles=tInt
            read float tFile,tFloat:AL_Emitter(tEmitter).ParticleTimer=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).BoundsSize=tFloat
            read long tFile,tInt:AL_Emitter(tEmitter).Distort=tInt
            read float tFile,tFloat:AL_Emitter(tEmitter).Priority=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).LifeEnd=tFloat
            read long tFile,tInt:AL_Emitter(tEmitter).Attach=tInt
            read float tFile,tFloat:AL_Emitter(tEmitter).PositionStart.x=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).PositionStart.y=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).PositionStart.z=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).AngleStart.x=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).AngleStart.y=tFloat
            read float tFile,tFloat:AL_Emitter(tEmitter).AngleStart.z=tFloat
            AL_Emitter(tEmitter).PositionOffset.x=AL_Emitter(tEmitter).PositionStart.x
            AL_Emitter(tEmitter).PositionOffset.y=AL_Emitter(tEmitter).PositionStart.y
            AL_Emitter(tEmitter).PositionOffset.z=AL_Emitter(tEmitter).PositionStart.z
            AL_Emitter(tEmitter).pParticle=make memory(4+(AL_Emitter(tEmitter).Particles*4))
            AL_Emitter(tEmitter).pEmissionEvent=make memory(4+(AL_Emitter(tEmitter).Particles*4))
            AL_Emitter(tEmitter).pCollisionEvent=make memory(4+(AL_Emitter(tEmitter).Particles*4))
            if AL_Emitter(tEmitter).ForceUpdate=1
               array insert at bottom AL_EmitterForceUpdate()
               inc AL_EmitterForceUpdateCount
               AL_EmitterForceUpdate(AL_EmitterForceUpdateCount)=tEmitter+1
            endif
            read memblock tFile,tMemBlock
            make mesh from memblock tMesh,tMemBlock
            AL_Emitter(tEmitter).Object=FreeUpObject(32500+rnd(16250))
            make object AL_Emitter(tEmitter).Object,tMesh,0
            delete mesh tMesh
            set object effect AL_Emitter(tEmitter).Object,AL_ParticleEffect(AL_Emitter(tEmitter).Distort+1)
            disable object zwrite AL_Emitter(tEmitter).Object
            set object transparency AL_Emitter(tEmitter).Object,2
            set object radius AL_Emitter(tEmitter).Object,9999^9999
            if tTexture>-1 then texture object AL_Emitter(tEmitter).Object,0,AL_EmitterTexture(tTexture).Image else texture object AL_Emitter(tEmitter).Object,0,AL_Image(20)
            texture object AL_Emitter(tEmitter).Object,1,AL_ImageMRT(8)
            texture object AL_Emitter(tEmitter).Object,2,AL_ImageMRT(9)
            texture object AL_Emitter(tEmitter).Object,3,AL_ImageMRT(1)
            set object mask AL_Emitter(tEmitter).Object,(2^AL_Camera(0))+(2^AL_Camera(3))
            if AL_Emitter(tEmitter).Distort=1 then set object mask AL_Emitter(tEmitter).Object,2^AL_Camera(3)
            pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_Emitter(tEmitter).Object)
            pMesh=PeekDword(pObject+8)
            pMeshLimb=PeekDword(pMesh)
            if pMeshLimb>0
               tFVFSize=PeekInteger(pMeshLimb+8)
               pVertex=PeekDword(pMeshLimb+20)
               tVertex=0
               for p=0 to AL_Emitter(tEmitter).Particles-1
                  for v=0 to 5
                     PokeFloat(pVertex+(tVertex*tFVFSize)+12,memblock float(tMemBlock,12+(tVertex*92)+12))
                     PokeFloat(pVertex+(tVertex*tFVFSize)+16,memblock float(tMemBlock,12+(tVertex*92)+16))
                     PokeFloat(pVertex+(tVertex*tFVFSize)+20,memblock float(tMemBlock,12+(tVertex*92)+20))
                     inc tVertex
                  next v
               next p
            endif
            delete memblock tMemBlock
            AL_Emitter(tEmitter).Bounds=FrustumCulling_AddBounds(AL_Emitter(tEmitter).Object,6)
            VFC_Bounds(AL_Emitter(tEmitter).Bounds).Emitter=tEmitter+1
            FrustumCulling_SetDrawDistance(AL_Emitter(tEmitter).Bounds,32)
            FrustumCulling_SetBounds(AL_Emitter(tEmitter).Bounds,AL_Emitter(tEmitter).PositionOffset.x,AL_Emitter(tEmitter).PositionOffset.y,AL_Emitter(tEmitter).PositionOffset.z,AL_Emitter(tEmitter).BoundsSize,AL_Emitter(tEmitter).BoundsSize,AL_Emitter(tEmitter).BoundsSize)
            FrustumCulling_SetBoundsVisible(AL_Emitter(tEmitter).Bounds,0)
            for p=0 to AL_Emitter(tEmitter).Particles-1
               tParticle=-1
               for x=AL_ParticleFreeUp to AL_ParticleCount
                  if AL_Particle(x).InUse=0 then tParticle=x:exit
               next x
               if tParticle=-1
                  tParticle=AL_ParticleCount+1
                  AL_ParticleCount=AL_ParticleCount+1000
                  dim AL_Particle(AL_ParticleCount)
               endif
               AL_ParticleFreeUp=tParticle
               AL_Particle(tParticle).InUse=1
               AL_Particle(tParticle).Pixel=0
               AL_Particle(tParticle).CollisionPosition.x=0
               AL_Particle(tParticle).CollisionPosition.y=0
               AL_Particle(tParticle).CollisionPosition.z=0
               AL_Particle(tParticle).CollisionNormal.x=0
               AL_Particle(tParticle).CollisionNormal.y=1
               AL_Particle(tParticle).CollisionNormal.z=0
               AL_Particle(tParticle).RndVal=rnd(AL_Emitter(tEmitter).Particles*100)
               PokeInteger(AL_Emitter(tEmitter).pParticle+(p*4),tParticle)
               read float tFile,tFloat:AL_Particle(tParticle).LifeStart=tFloat:AL_Particle(tParticle).Life=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).LifeRnd=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).PositionRnd.x=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).PositionRnd.y=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).PositionRnd.z=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Angle.x=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Angle.y=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Angle.z=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Gravity=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Wind=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Velocity=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).VelocityStart=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).VelocityEnd=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).VelocityTransition=tFloat
               read long tFile,tInt:AL_Particle(tParticle).CosSin=tInt
               read float tFile,tFloat:AL_Particle(tParticle).Sinpos.x=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Sinpos.y=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Sinpos.z=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Cospos.x=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Cospos.y=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).Cospos.z=tFloat
               read float tFile,tFloat:AL_Particle(tParticle).CosSinRate=tFloat
               read long tFile,tInt:AL_Particle(tParticle).CollisionMode=tInt
               read float tFile,tFloat:AL_Particle(tParticle).CollisionMass=tFloat
            next p
         next t
         for t=0 to AL_EmitterGroup(tEmitterGroup).EmitterCount-1
            tEmitter=tEmitters(t)
            if AL_Emitter(tEmitter).Attach>0 then AL_Emitter(tEmitter).Attach=tEmitters(AL_Emitter(tEmitter).Attach-1) else AL_Emitter(tEmitter).Attach=-1
         next t
         undim tEmitters()
      close file tFile
   endif
endfunction tEmitterGroup

`----------------------------------------------------
` Particles Delete
`----------------------------------------------------
function Emitter_Delete(iEmitterGroup as integer)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      Emitter_SetVisible(iEmitterGroup,0)
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         AL_Emitter(tEmitter).InUse=0
         FrustumCulling_RemoveBounds(AL_Emitter(tEmitter).Bounds)
         delete object AL_Emitter(tEmitter).Object
         if AL_EmitterFreeUp>tEmitter then AL_EmitterFreeUp=tEmitter
         for p=0 to AL_Emitter(tEmitter).Particles-1
            tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(p*4))
            AL_Particle(tParticle).InUse=0
            AL_Particle(tParticle).Update=0
            if AL_ParticleFreeUp>tParticle then AL_ParticleFreeUp=tParticle
            tPixel=AL_Particle(tParticle).Pixel-1
            if tPixel>-1
               AL_ParticlePixel(tPixel)=0
               if AL_ParticlePixelFreeUp>tPixel then AL_ParticlePixelFreeUp=tPixel
               AL_Particle(tParticle).Pixel=0
            endif
         next p
         if AL_Emitter(tEmitter).ForceUpdate=1 then AL_Emitter(tEmitter).ForceUpdate=2:AL_EmitterForceUpdateRemove=1
         for e=0 to AL_EmitterCount
            if AL_Emitter(e).Attach=tEmitter then AL_Emitter(e).Attach=-1
         next e
         delete memory AL_Emitter(tEmitter).pParticle
         delete memory AL_Emitter(tEmitter).pEmissionEvent
         delete memory AL_Emitter(tEmitter).pCollisionEvent
      next t
      AL_EmitterGroup(iEmitterGroup).InUse=0
      delete memory AL_EmitterGroup(iEmitterGroup).pEmitter
      if AL_EmitterGroupFreeUp>iEmitterGroup then AL_EmitterGroupFreeUp=iEmitterGroup
   endif
endfunction

`----------------------------------------------------
` Set Particles Visible (loop)
`----------------------------------------------------
function Emitter_SetVisible(iEmitterGroup as integer,iVisible as boolean)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         if iVisible=1 and AL_Emitter(tEmitter).Visible<>1
            AL_Emitter(tEmitter).Visible=1
            AL_Emitter(tEmitter).Play=1
            FrustumCulling_SetBoundsVisible(AL_Emitter(tEmitter).Bounds,1)
         endif
         if iVisible=0 and AL_Emitter(tEmitter).Visible=1
            AL_Emitter(tEmitter).Play=0
            if AL_Emitter(tEmitter).Pixel=1 then AL_Emitter(tEmitter).Pixel=2:AL_EmitterPixelRemove=1
            FrustumCulling_SetBoundsVisible(AL_Emitter(tEmitter).Bounds,0)
         endif
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Play
`----------------------------------------------------
function Emitter_Play(iEmitterGroup as integer)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      Emitter_SetVisible(iEmitterGroup,1)
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         if AL_Emitter(tEmitter).Attach=-1 then AL_Emitter(tEmitter).Play=2
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Stop
`----------------------------------------------------
function Emitter_Stop(iEmitterGroup as integer)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         if AL_Emitter(tEmitter).Visible=1
            if AL_Emitter(tEmitter).Attach=-1 then AL_Emitter(tEmitter).Play=3
         endif
      next t
   endif
endfunction

`----------------------------------------------------
` Emit Particle
`----------------------------------------------------
function Emitter_EmitParticle(iEmitterGroup as integer,iIndex as integer)
   if AL_EmitterGroup(iEmitterGroup).InUse=1 and iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount+1
      if iIndex=0
         Emitter_SetVisible(iEmitterGroup,1)
         for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
            tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
            AL_Emitter(tEmitter).Play=4
            tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(AL_Emitter(tEmitter).ParticleEmit*4))
            AL_Particle(tParticle).Life=AL_Emitter(tEmitter).LifeEnd
            AL_Particle(tParticle).Update=4
            inc AL_Emitter(tEmitter).ParticleEmit
            if AL_Emitter(tEmitter).ParticleEmit>AL_Emitter(tEmitter).Particles-1 then AL_Emitter(tEmitter).ParticleEmit=0
         next t
      else
         if iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount
            tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+((iIndex-1)*4))
            if AL_Emitter(tEmitter).Visible<>1
               AL_Emitter(tEmitter).Visible=1
               FrustumCulling_SetBoundsVisible(AL_Emitter(tEmitter).Bounds,1)
            endif
            AL_Emitter(tEmitter).Play=4
            tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(AL_Emitter(tEmitter).ParticleEmit*4))
            AL_Particle(tParticle).Life=AL_Emitter(tEmitter).LifeEnd
            AL_Particle(tParticle).Update=4
            inc AL_Emitter(tEmitter).ParticleEmit
            if AL_Emitter(tEmitter).ParticleEmit>AL_Emitter(tEmitter).Particles-1 then AL_Emitter(tEmitter).ParticleEmit=0
         endif
      endif
   endif
endfunction tParticle

`----------------------------------------------------
` Particles Set Auto Delete
`----------------------------------------------------
function Emitter_SetAutoDelete(iEmitterGroup as integer,iAutoDelete as boolean)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         AL_Emitter(tEmitter).AutoDelete=iAutoDelete
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Set Draw Distance
`----------------------------------------------------
function Emitter_SetDrawDistance(iEmitterGroup as integer,iDrawDistance as float)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         FrustumCulling_SetDrawDistance(AL_Emitter(tEmitter).Bounds,iDrawDistance)
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Set Position
`----------------------------------------------------
function Emitter_SetPosition(iEmitterGroup as integer,iPositionX as float,iPositionY as float,iPositionZ as float)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         AL_Emitter(tEmitter).Position.x=iPositionX
         AL_Emitter(tEmitter).Position.y=iPositionY
         AL_Emitter(tEmitter).Position.z=iPositionZ
         rotate x matrix4 Matrix(1),wrapvalue(AL_Emitter(tEmitter).Angle.x)/57.3
         rotate y matrix4 Matrix(2),wrapvalue(AL_Emitter(tEmitter).Angle.y)/57.3
         rotate z matrix4 Matrix(3),wrapvalue(AL_Emitter(tEmitter).Angle.z)/57.3
         multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
         multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
         set vector3 Vector3(1),AL_Emitter(tEmitter).PositionStart.x,AL_Emitter(tEmitter).PositionStart.y,AL_Emitter(tEmitter).PositionStart.z
         transform coords vector3 Vector3(1),Vector3(1),Matrix(4)
         AL_Emitter(tEmitter).PositionOffset.x=AL_Emitter(tEmitter).Position.x+x vector3(Vector3(1))
         AL_Emitter(tEmitter).PositionOffset.y=AL_Emitter(tEmitter).Position.y+y vector3(Vector3(1))
         AL_Emitter(tEmitter).PositionOffset.z=AL_Emitter(tEmitter).Position.z+z vector3(Vector3(1))
         FrustumCulling_SetBounds(AL_Emitter(tEmitter).Bounds,AL_Emitter(tEmitter).PositionOffset.x,AL_Emitter(tEmitter).PositionOffset.y,AL_Emitter(tEmitter).PositionOffset.z,AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100))
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Set Angle
`----------------------------------------------------
function Emitter_SetAngle(iEmitterGroup as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         AL_Emitter(tEmitter).Angle.x=iAngleX
         AL_Emitter(tEmitter).Angle.y=iAngleY
         AL_Emitter(tEmitter).Angle.z=iAngleZ
         rotate x matrix4 Matrix(1),wrapvalue(AL_Emitter(tEmitter).Angle.x)/57.3
         rotate y matrix4 Matrix(2),wrapvalue(AL_Emitter(tEmitter).Angle.y)/57.3
         rotate z matrix4 Matrix(3),wrapvalue(AL_Emitter(tEmitter).Angle.z)/57.3
         multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
         multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
         set vector3 Vector3(1),AL_Emitter(tEmitter).PositionStart.x,AL_Emitter(tEmitter).PositionStart.y,AL_Emitter(tEmitter).PositionStart.z
         transform coords vector3 Vector3(1),Vector3(1),Matrix(4)
         AL_Emitter(tEmitter).PositionOffset.x=AL_Emitter(tEmitter).Position.x+x vector3(Vector3(1))
         AL_Emitter(tEmitter).PositionOffset.y=AL_Emitter(tEmitter).Position.y+y vector3(Vector3(1))
         AL_Emitter(tEmitter).PositionOffset.z=AL_Emitter(tEmitter).Position.z+z vector3(Vector3(1))
         FrustumCulling_SetBounds(AL_Emitter(tEmitter).Bounds,AL_Emitter(tEmitter).PositionOffset.x,AL_Emitter(tEmitter).PositionOffset.y,AL_Emitter(tEmitter).PositionOffset.z,AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100))
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Set Scale
`----------------------------------------------------
function Emitter_SetScale(iEmitterGroup as integer,iScale as float)
   if AL_EmitterGroup(iEmitterGroup).InUse=1
      for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
         tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
         AL_Emitter(tEmitter).Scale=iScale
         FrustumCulling_SetBounds(AL_Emitter(tEmitter).Bounds,AL_Emitter(tEmitter).PositionOffset.x,AL_Emitter(tEmitter).PositionOffset.y,AL_Emitter(tEmitter).PositionOffset.z,AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100),AL_Emitter(tEmitter).BoundsSize*(AL_Emitter(tEmitter).Scale/100))
      next t
   endif
endfunction

`----------------------------------------------------
` Particles Set Collision Plane
`----------------------------------------------------
function Emitter_SetCollisionPlane(iEmitterGroup as integer,iIndex as integer,iPosX as float,iPosY as float,iPosZ as float,iNorX as float,iNorY as float,iNorZ as float)
   if AL_EmitterGroup(iEmitterGroup).InUse=1 and iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount+1
      AL_EmitterGroup(iEmitterGroup).CollisionPosition.x=iPosX
      AL_EmitterGroup(iEmitterGroup).CollisionPosition.y=iPosY
      AL_EmitterGroup(iEmitterGroup).CollisionPosition.z=iPosZ
      AL_EmitterGroup(iEmitterGroup).CollisionNormal.x=iNorX
      AL_EmitterGroup(iEmitterGroup).CollisionNormal.y=iNorY
      AL_EmitterGroup(iEmitterGroup).CollisionNormal.z=iNorZ
      if iIndex=0
         for t=0 to AL_EmitterGroup(iEmitterGroup).EmitterCount-1
            tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+(t*4))
            for p=0 to AL_Emitter(tEmitter).Particles-1
               tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(p*4))
               AL_Particle(tParticle).CollisionPosition.x=iPosX
               AL_Particle(tParticle).CollisionPosition.y=iPosY
               AL_Particle(tParticle).CollisionPosition.z=iPosZ
               AL_Particle(tParticle).CollisionNormal.x=iNorX
               AL_Particle(tParticle).CollisionNormal.y=iNorY
               AL_Particle(tParticle).CollisionNormal.z=iNorZ
            next p
         next t
      else
         if iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount
            tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+((iIndex-1)*4))
            for p=0 to AL_Emitter(tEmitter).Particles-1
               tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(p*4))
               AL_Particle(tParticle).CollisionPosition.x=iPosX
               AL_Particle(tParticle).CollisionPosition.y=iPosY
               AL_Particle(tParticle).CollisionPosition.z=iPosZ
               AL_Particle(tParticle).CollisionNormal.x=iNorX
               AL_Particle(tParticle).CollisionNormal.y=iNorY
               AL_Particle(tParticle).CollisionNormal.z=iNorZ
            next p
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Particles Get Emission Event
`----------------------------------------------------
function Emitter_GetEmissionEvent(iEmitterGroup as integer,iIndex as integer)
   tParticle=-1
   if iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount
      tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+((iIndex-1)*4))
      if AL_Emitter(tEmitter).NextEmissionEvent<AL_Emitter(tEmitter).EmissionEvent
         tParticle=PeekInteger(AL_Emitter(tEmitter).pEmissionEvent+(AL_Emitter(tEmitter).NextEmissionEvent*4))
         inc AL_Emitter(tEmitter).NextEmissionEvent
      endif
   endif
endfunction tParticle

`----------------------------------------------------
` Particles Get Collision Event
`----------------------------------------------------
function Emitter_GetCollisionEvent(iEmitterGroup as integer,iIndex as integer)
   tParticle=-1
   if iIndex<AL_EmitterGroup(iEmitterGroup).EmitterCount
      tEmitter=PeekInteger(AL_EmitterGroup(iEmitterGroup).pEmitter+((iIndex-1)*4))
      if AL_Emitter(tEmitter).NextCollisionEvent<AL_Emitter(tEmitter).CollisionEvent
         tParticle=PeekInteger(AL_Emitter(tEmitter).pCollisionEvent+(AL_Emitter(tEmitter).NextCollisionEvent*4))
         inc AL_Emitter(tEmitter).NextCollisionEvent
      endif
   endif
endfunction tParticle

`----------------------------------------------------
` Particles Update
`----------------------------------------------------
function Emitter_Update()
   local tTimer1 as float
   local tTimer2 as float
   for e=0 to AL_EmitterPixelCount
      tEmitter=AL_EmitterPixel(e)-1
      inc AL_Emitter(tEmitter).PixelRemove
      if AL_Emitter(tEmitter).PixelRemove>100 then AL_Emitter(tEmitter).Pixel=2:AL_EmitterPixelRemove=1
   next e
   AL_EmitterUpdate=-1
   for e=0 to VFC_VisibleCount(6)
      tEmitter=VFC_Bounds(VFC_Visible(e,6)).Emitter-1
      if tEmitter>-1
         if AL_Emitter(tEmitter).Update=0
            AL_Emitter(tEmitter).Update=1
            inc AL_EmitterUpdate
            AL_EmitterUpdate(AL_EmitterUpdate)=tEmitter
         endif
      endif
   next e
   for e=0 to AL_EmitterForceUpdateCount
      tEmitter=AL_EmitterForceUpdate(e)-1
      if AL_Emitter(tEmitter).Visible=1 and AL_Emitter(tEmitter).Update=0 and AL_Emitter(tEmitter).ForceUpdate=1
         AL_Emitter(tEmitter).Update=2
         inc AL_EmitterUpdate
         AL_EmitterUpdate(AL_EmitterUpdate)=tEmitter
      endif
   next e
   for e=0 to AL_EmitterUpdate
      tEmitter=AL_EmitterUpdate(e)
      AL_Emitter(tEmitter).EmissionEvent=0
      AL_Emitter(tEmitter).CollisionEvent=0
      AL_Emitter(tEmitter).NextEmissionEvent=0
      AL_Emitter(tEmitter).NextCollisionEvent=0
      tEmitterGroup=AL_Emitter(tEmitter).EmitterGroup
      if AL_Emitter(tEmitter).Pixel=0 and AL_Emitter(tEmitter).Update=1
         AL_Emitter(tEmitter).Pixel=1
         array insert at bottom AL_EmitterPixel()
         inc AL_EmitterPixelCount
         AL_EmitterPixel(AL_EmitterPixelCount)=tEmitter+1
         for p=0 to AL_Emitter(tEmitter).Particles-1
            tParticle=PeekInteger(AL_Emitter(tEmitter).pParticle+(p*4))
            if AL_Particle(tParticle).Pixel=0
               tPixel=-1
               for x=AL_ParticlePixelFreeUp to AL_ParticlePixelCount
                  if AL_ParticlePixel(x)=0 then tPixel=x:exit
               next x
               if tPixel=-1
                  tPixel=AL_ParticlePixelCount+1
                  AL_ParticlePixelCount=AL_ParticlePixelCount+1000
                  dim AL_ParticlePixel(AL_ParticlePixelCount)
               endif
               AL_ParticlePixelFreeUp=tPixel
               AL_ParticlePixel(tPixel)=1
               tShader=floor(tPixel/254)
               if tShader>AL_ParticleEffects then AL_ParticleEffects=tShader
               if AL_ParticleShader(tShader).Effect=0
                  tMesh=FreeUpMesh()
                  tMemBlock=FreeUpMemblock()
                  AL_ParticleShader(tShader).Effect=FreeUpEffect(32500+rnd(16250))
                  load effect AL_Directory+"Post Processing\Particle.fx",AL_ParticleShader(tShader).Effect,0,1
                  make memblock tMemBlock,3072
                  write memblock dword tMemBlock,0,0x002
                  write memblock dword tMemBlock,4,12
                  write memblock dword tMemBlock,8,255
                  for v=0 to 254
                     Vector4Float(0).x=v
                     Vector4Float(0).y=-tShader
                     write memblock float tMemBlock,12+(v*12),(Vector4Float(0).x/128)-1
                     write memblock float tMemBlock,16+(v*12),(Vector4Float(0).y/128)+1
                     write memblock float tMemBlock,20+(v*12),v+0.5
                  next v
                  write memblock float tMemBlock,3064,10
                  make mesh from memblock tMesh,tMemBlock
                  delete memblock tMemBlock
                  if AL_ParticleObject(1)=0
                     AL_ParticleObject(1)=FreeUpObject(32500+rnd(16250))
                     make object AL_ParticleObject(1),tMesh,0
                     set object radius AL_ParticleObject(1),9999^9999
                     set object mask AL_ParticleObject(1),2^AL_Camera(7)
                     disable object zwrite AL_ParticleObject(1)
                     disable object zdepth AL_ParticleObject(1)
                  else
                     add limb AL_ParticleObject(1),tShader,tMesh
                  endif
                  set limb effect AL_ParticleObject(1),tShader,AL_ParticleShader(tShader).Effect
                  delete mesh tMesh
                  AL_ParticleShader(tShader).pEffect=Object_GetShaderPtr(AL_ParticleObject(1),tShader)
                  AL_ParticleShader(tShader).pParticle=Shader_GetParameterByName(AL_ParticleShader(tShader).pEffect,0,"PixelColor")
               endif
               AL_Particle(tParticle).Pixel=tPixel+1
               AL_Particle(tParticle).pEffect=AL_ParticleShader(tShader).pEffect
               AL_Particle(tParticle).pParticle=Shader_GetParameterElement(AL_ParticleShader(tShader).pEffect,AL_ParticleShader(tShader).pParticle,tPixel-(tShader*254))
               Shader_SetVectorVal AL_Particle(tParticle).pEffect,AL_Particle(tParticle).pParticle,0,-99999999999,0,0
            endif
         next p
         pObject=call dll(AL_Basic3DDll,"?GetObjectA@@YAPAUsObject@@H@Z",AL_Emitter(tEmitter).Object)
         pMesh=PeekDword(pObject+8)
         pMeshLimb=PeekDword(pMesh)
         if pMeshLimb>0
            tFVFSize=PeekInteger(pMeshLimb+8)
            pVertex=PeekDword(pMeshLimb+20)
            tVertex=0
            for p=0 to AL_Emitter(tEmitter).Particles-1
               tParticle=AL_Emitter(tEmitter).pParticle+(p*4)
               tParticle= *tParticle
               for v=0 to 5
                  PokeFloat(pVertex+(tVertex*tFVFSize)+8,(AL_Particle(tParticle).Pixel-1)+0.5)
                  inc tVertex
               next v
            next p
            PokeByte2(pMeshLimb+1000,1)
         endif
      endif
      if AL_Emitter(tEmitter).Pixel=1 then AL_Emitter(tEmitter).PixelRemove=0
      set vector3 Vector3(2),AL_Emitter(tEmitter).PositionOffset.x-AL_CameraPos.x,AL_Emitter(tEmitter).PositionOffset.y-AL_CameraPos.y,AL_Emitter(tEmitter).PositionOffset.z-AL_CameraPos.z
      normalize vector3 Vector3(2),Vector3(2)
      position object AL_Emitter(tEmitter).Object,AL_Emitter(tEmitter).PositionOffset.x+(x vector3(Vector3(2))*AL_Emitter(tEmitter).Priority),AL_Emitter(tEmitter).PositionOffset.y+(y vector3(Vector3(2))*AL_Emitter(tEmitter).Priority),AL_Emitter(tEmitter).PositionOffset.z+(z vector3(Vector3(2))*AL_Emitter(tEmitter).Priority)
      scale object AL_Emitter(tEmitter).Object,AL_Emitter(tEmitter).Scale,AL_Emitter(tEmitter).Scale,AL_Emitter(tEmitter).Scale
      rotate x matrix4 Matrix(1),wrapvalue(AL_Emitter(tEmitter).Angle.x+AL_Emitter(tEmitter).AngleStart.x)/57.3
      rotate y matrix4 Matrix(2),wrapvalue(AL_Emitter(tEmitter).Angle.y+AL_Emitter(tEmitter).AngleStart.y)/57.3
      rotate z matrix4 Matrix(3),wrapvalue(AL_Emitter(tEmitter).Angle.z+AL_Emitter(tEmitter).AngleStart.z)/57.3
      multiply matrix4 Matrix(4),Matrix(1),Matrix(2)
      multiply matrix4 Matrix(4),Matrix(4),Matrix(3)
      tTimer1=AL_Timer*AL_Emitter(tEmitter).ParticleTimer
      tTimer2=AL_Timer*AL_Emitter(tEmitter).ParticleTimer*(AL_Emitter(tEmitter).Scale/100)
      tEmitterAttach=AL_Emitter(tEmitter).Attach
      if tEmitterAttach>-1
         if AL_Emitter(tEmitterAttach).Visible<>1 then AL_Emitter(tEmitter).Play=3
      endif
      for p=0 to AL_Emitter(tEmitter).Particles-1
         tParticle=AL_Emitter(tEmitter).pParticle+(p*4)
         tParticle= *tParticle
         inc AL_Particle(tParticle).Life,tTimer1
         if AL_Particle(tParticle).Life=>AL_Emitter(tEmitter).LifeEnd
            tUpdate=0
            if AL_Emitter(tEmitter).Play=1 then tUpdate=1
            if AL_Emitter(tEmitter).Play=2 and AL_Particle(tParticle).Update=0 then tUpdate=1
            if AL_Emitter(tEmitter).Play=4 and AL_Particle(tParticle).Update=4 then tUpdate=1
            if tEmitterAttach>-1
               if AL_Emitter(tEmitterAttach).Visible=1 then tUpdate=1
            endif
            if tUpdate=1
               AL_Particle(tParticle).Update=1
               AL_Particle(tParticle).Life=AL_Particle(tParticle).Life-AL_Emitter(tEmitter).LifeEnd
               AL_Emitter(tEmitter).Life=AL_Particle(tParticle).Life
               set vector3 Vector3(1),AL_Particle(tParticle).PositionRnd.x,AL_Particle(tParticle).PositionRnd.y,AL_Particle(tParticle).PositionRnd.z
               transform coords vector3 Vector3(1),Vector3(1),Matrix(4)
               if AL_Emitter(tEmitter).Attach=-1
                  AL_Particle(tParticle).Position.x=AL_Emitter(tEmitter).PositionOffset.x+x vector3(Vector3(1))
                  AL_Particle(tParticle).Position.y=AL_Emitter(tEmitter).PositionOffset.y+y vector3(Vector3(1))
                  AL_Particle(tParticle).Position.z=AL_Emitter(tEmitter).PositionOffset.z+z vector3(Vector3(1))
               else
                  tParticleAttach=AL_Emitter(tEmitterAttach).pParticle+(AL_Emitter(tEmitter).AttachNum*4)
                  tParticleAttach= *tParticleAttach
                  if AL_Particle(tParticleAttach).Update=1
                     AL_Particle(tParticle).Position.x=AL_Particle(tParticleAttach).cPosition.x+x vector3(Vector3(1))
                     AL_Particle(tParticle).Position.y=AL_Particle(tParticleAttach).cPosition.y+y vector3(Vector3(1))
                     AL_Particle(tParticle).Position.z=AL_Particle(tParticleAttach).cPosition.z+z vector3(Vector3(1))
                  else
                     AL_Particle(tParticle).Update=2
                     AL_Particle(tParticle).Position.x=0
                     AL_Particle(tParticle).Position.y=-99999999999
                     AL_Particle(tParticle).Position.z=0
                  endif
                  inc AL_Emitter(tEmitter).AttachNum
                  if AL_Emitter(tEmitter).AttachNum>AL_Emitter(tEmitterAttach).Particles-1 then AL_Emitter(tEmitter).AttachNum=0
               endif
               AL_Particle(tParticle).VelocityCStart=AL_Particle(tParticle).VelocityStart
               AL_Particle(tParticle).VelocityCEnd=AL_Particle(tParticle).VelocityEnd
               set vector3 Vector3(1),AL_Particle(tParticle).Angle.x,AL_Particle(tParticle).Angle.y,AL_Particle(tParticle).Angle.z
               transform coords vector3 Vector3(1),Vector3(1),Matrix(4)
               AL_Particle(tParticle).Direction.x=x vector3(Vector3(1))
               AL_Particle(tParticle).Direction.y=y vector3(Vector3(1))
               AL_Particle(tParticle).Direction.z=z vector3(Vector3(1))
               AL_Particle(tParticle).GravityCurrent=0
               AL_Particle(tParticle).WindCurrent=0
               if AL_Particle(tParticle).CollisionMode>2 then AL_Particle(tParticle).CollisionMode=1
               inc AL_Emitter(tEmitter).EmissionEvent
               PokeInteger(AL_Emitter(tEmitter).pEmissionEvent+(AL_Emitter(tEmitter).EmissionEvent*4),tParticle)
               if AL_Emitter(tEmitter).Pixel=1 then Shader_SetVectorVal AL_Particle(tParticle).pEffect,AL_Particle(tParticle).pParticle,AL_Particle(tParticle).Position.x,AL_Particle(tParticle).Position.y,AL_Particle(tParticle).Position.z,0
            else
               AL_Particle(tParticle).Update=2
               AL_Particle(tParticle).Life=AL_Particle(tParticle).Life-AL_Emitter(tEmitter).LifeEnd
               if AL_Emitter(tEmitter).Pixel=1 then Shader_SetVectorVal AL_Particle(tParticle).pEffect,AL_Particle(tParticle).pParticle,0,-999999999,0,0
            endif
         else
            if AL_Particle(tParticle).Update=1
               AL_ParticleLife=AL_Particle(tParticle).Life/AL_Emitter(tEmitter).LifeEnd
               inc AL_Particle(tParticle).GravityCurrent,(AL_Particle(tParticle).Gravity*AL_Emitter(tEmitter).ParticleTimer)*AL_Timer
               inc AL_Particle(tParticle).WindCurrent,(AL_Particle(tParticle).Wind*AL_Emitter(tEmitter).ParticleTimer)*AL_Timer
               AL_Particle(tParticle).Velocity=(AL_Particle(tParticle).VelocityCStart)*(1.0-(AL_ParticleLife^AL_Particle(tParticle).VelocityTransition))+(AL_Particle(tParticle).VelocityCEnd*(AL_ParticleLife^AL_Particle(tParticle).VelocityTransition))
               inc AL_Particle(tParticle).Position.x,((AL_Particle(tParticle).Direction.x*AL_Particle(tParticle).Velocity)+(AL_Particle(tParticle).WindCurrent*AL_EmitterWindDir.x))*tTimer2
               inc AL_Particle(tParticle).Position.y,((AL_Particle(tParticle).Direction.y*AL_Particle(tParticle).Velocity)-(AL_Particle(tParticle).GravityCurrent))*tTimer2
               inc AL_Particle(tParticle).Position.z,((AL_Particle(tParticle).Direction.z*AL_Particle(tParticle).Velocity)+(AL_Particle(tParticle).WindCurrent*AL_EmitterWindDir.y))*tTimer2
               if AL_Particle(tParticle).CollisionMode=3
                  if AL_Particle(tParticle).CollisionNormal.x*(AL_Particle(tParticle).Position.x-AL_Particle(tParticle).CollisionPosition.x)+AL_Particle(tParticle).CollisionNormal.y*(AL_Particle(tParticle).Position.y-AL_Particle(tParticle).CollisionPosition.y)+AL_Particle(tParticle).CollisionNormal.z*(AL_Particle(tParticle).Position.z-AL_Particle(tParticle).CollisionPosition.z)>0 then AL_Particle(tParticle).CollisionMode=1
               else
                  if AL_Particle(tParticle).CosSin=1
                     Vector4Float(0).x=sin((AL_ParticleLife*AL_Particle(tParticle).CosSinRate)+AL_Particle(tParticle).RndVal)
                     Vector4Float(0).y=Cos((AL_ParticleLife*AL_Particle(tParticle).CosSinRate)+AL_Particle(tParticle).RndVal)
                     inc AL_Particle(tParticle).Position.x,(Vector4Float(0).x*AL_Particle(tParticle).Sinpos.x)+(Vector4Float(0).y*AL_Particle(tParticle).Cospos.x)
                     inc AL_Particle(tParticle).Position.y,(Vector4Float(0).x*AL_Particle(tParticle).Sinpos.y)+(Vector4Float(0).y*AL_Particle(tParticle).Cospos.y)
                     inc AL_Particle(tParticle).Position.z,(Vector4Float(0).x*AL_Particle(tParticle).Sinpos.z)+(Vector4Float(0).y*AL_Particle(tParticle).Cospos.z)
                  endif
                  AL_Particle(tParticle).CPosition.x=AL_Particle(tParticle).Position.x
                  AL_Particle(tParticle).CPosition.y=AL_Particle(tParticle).Position.y
                  AL_Particle(tParticle).CPosition.z=AL_Particle(tParticle).Position.z
               endif
               if AL_Emitter(tEmitter).Pixel=1 then Shader_SetVectorVal AL_Particle(tParticle).pEffect,AL_Particle(tParticle).pParticle,AL_Particle(tParticle).cPosition.x,AL_Particle(tParticle).cPosition.y,AL_Particle(tParticle).cPosition.z,AL_ParticleLife*AL_Particle(tParticle).LifeRnd
               if AL_Particle(tParticle).CollisionMode=1
                  if AL_Particle(tParticle).CollisionNormal.x*(AL_Particle(tParticle).Position.x-AL_Particle(tParticle).CollisionPosition.x)+AL_Particle(tParticle).CollisionNormal.y*(AL_Particle(tParticle).Position.y-AL_Particle(tParticle).CollisionPosition.y)+AL_Particle(tParticle).CollisionNormal.z*(AL_Particle(tParticle).Position.z-AL_Particle(tParticle).CollisionPosition.z)<0
                     AL_Particle(tParticle).GravityCurrent=-AL_Particle(tParticle).GravityCurrent*AL_Particle(tParticle).CollisionMass
                     AL_Particle(tParticle).WindCurrent=AL_Particle(tParticle).WindCurrent*AL_Particle(tParticle).CollisionMass
                     AL_Particle(tParticle).VelocityCStart=AL_Particle(tParticle).VelocityCStart*AL_Particle(tParticle).CollisionMass
                     AL_Particle(tParticle).VelocityCEnd=AL_Particle(tParticle).VelocityCEnd*AL_Particle(tParticle).CollisionMass
                     AL_Particle(tParticle).Direction.x=(-AL_Particle(tParticle).Direction.x*AL_Particle(tParticle).CollisionNormal.x)+(-AL_Particle(tParticle).Direction.x*(-AL_Particle(tParticle).CollisionNormal.y))+(-AL_Particle(tParticle).Direction.x*(-AL_Particle(tParticle).CollisionNormal.z))
                     AL_Particle(tParticle).Direction.y=(-AL_Particle(tParticle).Direction.y*(-AL_Particle(tParticle).CollisionNormal.x))+(-AL_Particle(tParticle).Direction.y*AL_Particle(tParticle).CollisionNormal.y)+(-AL_Particle(tParticle).Direction.y*(-AL_Particle(tParticle).CollisionNormal.z))
                     AL_Particle(tParticle).Direction.z=(-AL_Particle(tParticle).Direction.z*(-AL_Particle(tParticle).CollisionNormal.x))+(-AL_Particle(tParticle).Direction.z*(-AL_Particle(tParticle).CollisionNormal.y))+(-AL_Particle(tParticle).Direction.z*AL_Particle(tParticle).CollisionNormal.z)
                     AL_Particle(tParticle).CollisionMode=3
                     inc AL_Emitter(tEmitter).CollisionEvent
                     PokeInteger(AL_Emitter(tEmitter).pCollisionEvent+(AL_Emitter(tEmitter).CollisionEvent*4),tParticle)
                  endif
               endif
               if AL_Particle(tParticle).CollisionMode=2
                  if AL_Particle(tParticle).CollisionNormal.x*(AL_Particle(tParticle).Position.x-AL_Particle(tParticle).CollisionPosition.x)+AL_Particle(tParticle).CollisionNormal.y*(AL_Particle(tParticle).Position.y-AL_Particle(tParticle).CollisionPosition.y)+AL_Particle(tParticle).CollisionNormal.z*(AL_Particle(tParticle).Position.z-AL_Particle(tParticle).CollisionPosition.z)<0
                     if AL_Emitter(tEmitter).Pixel=1 then Shader_SetVectorVal AL_Particle(tParticle).pEffect,AL_Particle(tParticle).pParticle,0,-999999999,0,0
                     AL_Particle(tParticle).Update=2
                     inc AL_Emitter(tEmitter).CollisionEvent
                     PokeInteger(AL_Emitter(tEmitter).pCollisionEvent+(AL_Emitter(tEmitter).CollisionEvent*4),tParticle)
                  endif
               endif
            endif
         endif
      next p
      if AL_Emitter(tEmitter).Life=>AL_Emitter(tEmitter).LifeEnd and AL_Emitter(tEmitter).Play>1
         AL_Emitter(tEmitter).Play=0
         if AL_Emitter(tEmitter).Pixel=1 then AL_Emitter(tEmitter).Pixel=2:AL_EmitterPixelRemove=1
         FrustumCulling_SetBoundsVisible(AL_Emitter(tEmitter).Bounds,0)
         if AL_Emitter(tEmitter).AutoDelete=1
            tEmitterGroup=AL_Emitter(tEmitter).EmitterGroup
            tVis=0
            for t=0 to AL_EmitterGroup(tEmitterGroup).EmitterCount-1
               tEmitterV=PeekInteger(AL_EmitterGroup(tEmitterGroup).pEmitter+(t*4))
               if AL_Emitter(tEmitterV).Visible=1 then tVis=1:exit
            next t
            if tVis=0 then Emitter_Delete(tEmitterGroup)
         endif
      endif
      inc AL_Emitter(tEmitter).Life,tTimer1
      AL_Emitter(tEmitter).Update=0
   next e
endfunction

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type Terrain_DecalObjectData
   InUse as integer
   Object as integer
   MapScape as integer
endtype

`----------------------------------------------------
` Terrain SetUp
`----------------------------------------------------
function Terrain_SetUp()
   if Terrain_Enabled=0
      global Terrain_Enabled as integer
      global Terrain_Size as float
      global Terrain_BaseSize as float
      global Terrain_CamUpdate as Vec4Float
      global Terrain_TextureRefresh as boolean
      global Terrain_TileSize as float
      global Terrain_Height as float
      global Terrain_Shadow as integer
      global Terrain_Range as float
      global Terrain_RangeMultiplier as float
      global Terrain_pHeight as dword
      global Terrain_pLayerA as dword
      global Terrain_pLayerB as dword
      global Terrain_MeshCount as integer
      global Terrain_MeshFreeup as integer
      global Terrain_MeshSegmentCount as integer
      global Terrain_MeshSegmentFreeup as integer
      global Terrain_MeshBatchCount as integer
      global Terrain_MeshBatchFreeup as integer
      global dim Terrain_Camera(2) as integer
      global dim Terrain_Image(4) as integer
      global dim Terrain_Object(17) as integer
      global dim Terrain_Effect(9) as integer
      global dim Terrain_EffectAL(4) as integer
      global dim Terrain_Memblock(3) as integer
      global dim Terrain_Bounds(4,12) as integer
      global dim Terrain_Texture(3,16) as integer
      global dim Terrain_TextureWidth(8) as float
      global dim Terrain_TextureUV(8) as Vec2Float
      global dim Terrain_TextureSlope(8) as Vec3Float
      global dim Terrain_TextureHeight(8) as Vec3Float
      global dim Terrain_TextureBlendTransition(8) as float
      global dim Terrain_TextureMode(8) as integer
      global dim Terrain_Segment(3,3) as integer
      global dim Terrain_CamPosition(6) as Vec3Float
      global dim Terrain_CubeMap(11) as integer
      global dim Terrain_CubeMapSize(3) as float
      global dim Terrain_CubeMapPosition(2,6) as Vec3Float
      global dim Terrain_CubeMapUpdate(6) as integer
      global dim Terrain_CubeMapRange(2,6) as float
      global dim Terrain_Index(1,4) as integer
      global dim Terrain_pEffect(4) as dword
      global dim Terrain_pSizeTile(4,4) as dword
      global dim Terrain_pIndex1(4,30) as dword
      global dim Terrain_pIndex2(4,60) as dword
      global dim Terrain_pIndex3(4,18) as dword
      global dim Terrain_pIndex4(4,18) as dword
      global dim Terrain_Mesh() as Terrain_MeshData
      global dim Terrain_MeshSegment() as Terrain_MeshSegmentData
      global dim Terrain_MeshBatch() as Terrain_MeshBatchData
      global dim Terrain_MeshUpdate() as integer
      global dim Terrain_MeshUpdateSegment() as integer
      global dim Terrain_MeshOffset(9) as Vec2Integer
      Terrain_Enabled=3
      Terrain_Range=500
      Terrain_RangeMultiplier=2.5
      Terrain_MeshCount=-1
      Terrain_MeshSegmentCount=-1
      Terrain_MeshBatchCount=-1
      for x=0 to 6:Terrain_CamPosition(x).x=-9999999999:next x
      Terrain_MeshOffset(1).x=0:Terrain_MeshOffset(1).y=0
      Terrain_MeshOffset(2).x=-1:Terrain_MeshOffset(2).y=0
      Terrain_MeshOffset(3).x=1:Terrain_MeshOffset(3).y=0
      Terrain_MeshOffset(4).x=0:Terrain_MeshOffset(4).y=-1
      Terrain_MeshOffset(5).x=0:Terrain_MeshOffset(5).y=1
      Terrain_MeshOffset(6).x=-1:Terrain_MeshOffset(6).y=-1
      Terrain_MeshOffset(7).x=1:Terrain_MeshOffset(7).y=-1
      Terrain_MeshOffset(8).x=-1:Terrain_MeshOffset(8).y=1
      Terrain_MeshOffset(9).x=1:Terrain_MeshOffset(9).y=1
      Terrain_CubeMapSize(1)=AL_ViewVec.y
      Terrain_CubeMapSize(2)=AL_ViewVec.y
      Terrain_Camera(1)=FreeUpCamera()
      Terrain_Image(1)=FreeUpImage(32500)
      Camera_Create(Terrain_Camera(1),Terrain_Image(1),1000,1000,113)
      backdrop on Terrain_Camera(1)
      color backdrop Terrain_Camera(1),0
      Terrain_Camera(2)=FreeUpCamera()
      Terrain_Image(2)=FreeUpImage(32500)
      Camera_Create(Terrain_Camera(2),Terrain_Image(2),256,256,113)
      Terrain_CubeMap(1)=CubeTex_MakeNew(Terrain_CubeMapSize(1),0,20)
      CubeTex_SetRange Terrain_CubeMap(1),1,10
      Terrain_CubeMap(2)=CubeTex_MakeNew(Terrain_CubeMapSize(2),0,20)
      CubeTex_SetRange Terrain_CubeMap(2),1,10
      for t=1 to 4
         Terrain_Effect(t)=FreeUpEffect(32500)
         if t=1 or t=3 then load effect AL_Directory+"Terrain\Terrain z.fx",Terrain_Effect(t),0,1 else load effect AL_Directory+"Terrain\Terrain x.fx",Terrain_Effect(t),0,1
         Terrain_EffectAL(t)=Effect_Add(Terrain_Effect(t))
         Terrain_Object(t)=FreeUpObject(32500)
         load object AL_Directory+"Resources\Terrain"+str$(t)+".dbo",Terrain_Object(t)
         set object effect Terrain_Object(t),Terrain_Effect(t)
         Terrain_pEffect(t)=Object_GetShaderPtr(Terrain_Object(t),0)
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainSize")
         Terrain_pSizeTile(t,0)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),0)
         Terrain_pSizeTile(t,1)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),1)
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainTileSize")
         Terrain_pSizeTile(t,2)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),0)
         Terrain_pSizeTile(t,3)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),1)
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainIndex1")
         for i=0 to 30:Terrain_pIndex1(t,i)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),i):next i
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainIndex2")
         for i=0 to 60:Terrain_pIndex2(t,i)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),i):next i
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainIndex3")
         for i=0 to 18:Terrain_pIndex3(t,i)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),i):next i
         Terrain_pEffect(0)=Shader_GetParameterByName(Terrain_pEffect(t),0,"TerrainIndex4")
         for i=0 to 18:Terrain_pIndex4(t,i)=Shader_GetParameterElement(Terrain_pEffect(t),Terrain_pEffect(0),i):next i
         set object mask Terrain_Object(t),1+(2^AL_Camera(1))+(2^AL_Camera(5))+(2^AL_DirLightCamera(2))
         set object radius Terrain_Object(t),9999^9999
         exclude object on Terrain_Object(t)
         texture object Terrain_Object(t),2,Terrain_Image(1)
         CubeTex_ApplyObject Terrain_CubeMap(1),Terrain_Object(t),3
         CubeTex_ApplyObject Terrain_CubeMap(2),Terrain_Object(t),4
         texture object Terrain_Object(t),5,AL_DirLightImage(3)
         for l=1 to 12
            Terrain_Bounds(t,l)=FrustumCulling_AddBounds(l,t+7)
            exclude limb on Terrain_Object(t),l-1
            VFC_Bounds(Terrain_Bounds(t,l)).DirectionalShadow=-1
         next l
      next t
      Terrain_Object(5)=FreeUpObject(32500)
      Terrain_Effect(5)=FreeUpEffect(32500)
      load effect AL_Directory+"Terrain\Texture Update.fx",Terrain_Effect(5),0,1
      load object AL_Directory+"Resources\Terrain Update.dbo",Terrain_Object(5)
      set object effect Terrain_Object(5),Terrain_Effect(5)
      set object radius Terrain_Object(5),9999^9999
      set object mask Terrain_Object(5),(2^Terrain_Camera(1))+(2^Terrain_Camera(2))
      exclude object on Terrain_Object(5)
      for o=6 to 7
         Terrain_Object(o)=FreeUpObject(32500)
         load object AL_Directory+"Resources\Terrain Update.dbo",Terrain_Object(o)
         set object radius Terrain_Object(o),9999^9999
         set object mask Terrain_Object(o),2^AL_Camera(8)
         exclude object on Terrain_Object(o)
         Terrain_Object(o+3)=FreeUpObject(Terrain_Object(o))
         load object AL_Directory+"Resources\Terrain Update.dbo",Terrain_Object(o+3)
         set object radius Terrain_Object(o+3),9999^9999
         set object mask Terrain_Object(o+3),2^AL_Camera(8)
         exclude object on Terrain_Object(o+3)
      next o
      Terrain_Object(12)=FreeUpObject(32500)
      Terrain_Effect(8)=FreeUpEffect(32500)
      load effect AL_Directory+"Terrain\Edge.fx",Terrain_Effect(8),0,1
      load object AL_Directory+"Resources\Terrain Edge.dbo",Terrain_Object(12)
      set object effect Terrain_Object(12),Terrain_Effect(8)
      set object radius Terrain_Object(12),9999^9999
      set object mask Terrain_Object(12),2^AL_Camera(8)
      disable object zdepth Terrain_Object(12)
      exclude object on Terrain_Object(12)
      Terrain_Effect(9)=FreeUpEffect(32500)
      load effect AL_Directory+"Terrain\Decal.fx",Terrain_Effect(9),0,1
      PokeInteger(HZB_pTerrain+4,1)
      Terrain_SetVisible(0)
   endif
endfunction

`----------------------------------------------------
` Load Terrain
`----------------------------------------------------
function Terrain_Load(iFile as string)
   if Terrain_Enabled=3 and fileexist(iFile)=1
      tFile=FreeUpFile()
      open to read tFile,iFile
         read long tFile,tVal
         Terrain_BaseSize=tVal
         Terrain_Size=Terrain_BaseSize*4
         Terrain_pHeight=make memory((Terrain_Size+2)*(Terrain_Size+2)*4)
         Terrain_pLayerA=make memory((Terrain_Size+2)*(Terrain_Size+2)*4)
         Terrain_pLayerB=make memory((Terrain_Size+2)*(Terrain_Size+2)*4)
         tSegment=1
         for a=0 to 3
            for b=0 to 3
               Terrain_Segment(b,a)=tSegment
               tx=b*Terrain_BaseSize
               tz=a*Terrain_BaseSize
               for m=1 to 3
                  Terrain_Memblock(m)=FreeUpMemblock()
                  read memblock tFile,Terrain_Memblock(m)
                  Terrain_Texture(m,tSegment)=FreeUpImage(32500)
                  make image from memblock Terrain_Texture(m,tSegment),Terrain_Memblock(m)
               next m
               for x=0 to Terrain_BaseSize-1
                  for z=0 to Terrain_BaseSize-1
                     tPos1=12+(z*((Terrain_BaseSize+2)*4))+(x*4)
                     tPos2=((tz+z)*(Terrain_Size+2))+(tx+x)
                     PokeByte1(Terrain_pHeight+tPos2*4,memblock byte(Terrain_Memblock(1),tPos1+2))
                     PokeByte2(Terrain_pHeight+tPos2*4,memblock byte(Terrain_Memblock(1),tPos1+1))
                     PokeByte3(Terrain_pHeight+tPos2*4,memblock byte(Terrain_Memblock(1),tPos1))
                     PokeByte4(Terrain_pHeight+tPos2*4,memblock byte(Terrain_Memblock(1),tPos1+3))
                     PokeByte1(Terrain_pLayerA+tPos2*4,memblock byte(Terrain_Memblock(2),tPos1+2))
                     PokeByte2(Terrain_pLayerA+tPos2*4,memblock byte(Terrain_Memblock(2),tPos1+1))
                     PokeByte3(Terrain_pLayerA+tPos2*4,memblock byte(Terrain_Memblock(2),tPos1))
                     PokeByte4(Terrain_pLayerA+tPos2*4,memblock byte(Terrain_Memblock(2),tPos1+3))
                     PokeByte1(Terrain_pLayerB+tPos2*4,memblock byte(Terrain_Memblock(3),tPos1+2))
                     PokeByte2(Terrain_pLayerB+tPos2*4,memblock byte(Terrain_Memblock(3),tPos1+1))
                     PokeByte3(Terrain_pLayerB+tPos2*4,memblock byte(Terrain_Memblock(3),tPos1))
                     PokeByte4(Terrain_pLayerB+tPos2*4,memblock byte(Terrain_Memblock(3),tPos1+3))
                  next z
               next x
               inc tSegment
               delete memblock Terrain_Memblock(1)
               delete memblock Terrain_Memblock(2)
               delete memblock Terrain_Memblock(3)
            next b
         next a
      close file tFile
      Camera_Create(Terrain_Camera(2),Terrain_Image(2),Terrain_BaseSize,Terrain_BaseSize,113)
      gosub _Terrain_Defaults
      PokeInteger(HZB_pTerrainHeight,Terrain_Size)
      for x=0 to Terrain_Size-1
         for z=0 to Terrain_Size-1
            tPos1=(z*Terrain_Size)+x
            tPos2=(z*(Terrain_Size+2))+x
            Vector4Float(1).w=PeekByte4(Terrain_pHeight+tPos2*4)
            Vector4Float(1).w=PeekByte3(Terrain_pHeight+tPos2*4)+(Vector4Float(1).w/255)
            PokeInteger(HZB_pTerrainHeight+4+(tPos1*4),Vector4Float(1).w*255)
         next z
      next x
      PokeInteger(HZB_pTerrain+12,1)
      PokeInteger(HZB_pTerrain+16,0)
   endif
endfunction

`----------------------------------------------------
` Delete Terrain
`----------------------------------------------------
function Terrain_Delete()
   if Terrain_Enabled=1 or Terrain_Enabled=2
      for l=0 to 15
         texture limb Terrain_Object(5),l,0,0
         texture limb Terrain_Object(5),l,1,0
         for o=6 to 7
            texture limb Terrain_Object(o),l,0,0
            texture limb Terrain_Object(o),l,1,0
            texture limb Terrain_Object(o+3),l,0,0
            texture limb Terrain_Object(o+3),l,1,0
         next o
      next l
      for i=1 to 16
         delete image Terrain_Texture(1,i)
         delete image Terrain_Texture(2,i)
         delete image Terrain_Texture(3,i)
      next i
      delete memory Terrain_pHeight
      delete memory Terrain_pLayerA
      delete memory Terrain_pLayerB
      Terrain_SetVisible(0)
      Terrain_Enabled=3
      PokeInteger(HZB_pTerrain+8,1)
   endif
endfunction

`----------------------------------------------------
` Terrain Decal Add
`----------------------------------------------------
function Terrain_DecalAdd(iObject as integer)
   if object exist(iObject)=1
      tDecal=-1
      for x=Terrain_DecalObjectFreeup to Terrain_DecalObjectCount
         if Terrain_DecalObject(x).InUse=0 then tDecal=x:exit
      next x
      if tDecal=-1
         tDecal=Terrain_DecalObjectCount+1
         inc Terrain_DecalObjectCount,10
         dim Terrain_DecalObject(Terrain_DecalObjectCount)
      endif
      if tDecal>-1
         Terrain_DecalObjectFreeup=tDecal
         Terrain_DecalObject(tDecal).InUse=1
         Terrain_DecalObject(tDecal).Object=iObject
         set object effect Terrain_DecalObject(tDecal).Object,Terrain_Effect(9)
         set object radius Terrain_DecalObject(tDecal).Object,9999^9999
         set object mask Terrain_DecalObject(tDecal).Object,2^AL_Camera(8)
         disable object zwrite Terrain_DecalObject(tDecal).Object
         disable object zdepth Terrain_DecalObject(tDecal).Object
         texture object Terrain_DecalObject(tDecal).Object,3,Terrain_Image(1)
         texture object Terrain_DecalObject(tDecal).Object,4,Terrain_Image(2)
         set object transparency Terrain_DecalObject(tDecal).Object,1
         exclude object on Terrain_DecalObject(tDecal).Object
      endif
   endif
endfunction tDecal

`----------------------------------------------------
` Terrain Decal Remove
`----------------------------------------------------
function Terrain_DecalRemove(iDecal as integer)
   if Terrain_DecalObject(iDecal).InUse=1
      Terrain_DecalObject(iDecal).InUse=0
      if Terrain_DecalObjectFreeup>iDecal then Terrain_DecalObjectFreeup=iDecal
   endif
endfunction

`----------------------------------------------------
` Terrain Set Visible
`----------------------------------------------------
function Terrain_SetVisible(iVisible as boolean)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      tTerrainEnabled=Terrain_Enabled
      if iVisible=1 and Terrain_Enabled=2 then Terrain_Enabled=1
      if iVisible=0 and Terrain_Enabled=1 then Terrain_Enabled=2
      if Terrain_Enabled<>tTerrainEnabled
         for t=1 to 4
            for l=1 to 12:FrustumCulling_SetBoundsVisible(Terrain_Bounds(t,l),iVisible):next l
         next t
         PokeInteger(HZB_pTerrain+20,iVisible)
         if iVisible=1 then texture object AL_DirLightObject(1),6,AL_DirLightImage(3) else texture object AL_DirLightObject(1),6,AL_Image(16)
      endif
   endif
endfunction

`----------------------------------------------------
` Terrain Set Scale
`----------------------------------------------------
function Terrain_SetScale(iTileSize as float,iHeight as float)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      Terrain_TileSize=iTileSize
      Terrain_Height=iHeight
      PokeFloat(HZB_pTerrain+24,Terrain_TileSize)
      PokeFloat(HZB_pTerrain+28,Terrain_Height)
      for e=0 to AL_EffectActiveCount
         set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"TerrainHeight",Terrain_Height/255
         set effect constant float AL_Effect(AL_EffectActive(e)).Effect,"TerrainTileSize",Terrain_TileSize*1000
      next e
      for e=1 to 4
         Shader_SetVectorVal Terrain_pEffect(e),Terrain_pSizeTile(e,0),Terrain_Size,Terrain_Size,Terrain_TileSize/100,Terrain_TileSize
         Shader_SetVectorVal Terrain_pEffect(e),Terrain_pSizeTile(e,1),1000,1000,Terrain_TileSize/100,Terrain_TileSize
         Shader_SetVectorVal Terrain_pEffect(e),Terrain_pSizeTile(e,2),Terrain_TileSize*Terrain_Size,Terrain_TileSize*Terrain_Size,(0.5/(Terrain_Size/4))+0.5,(0.5/(Terrain_Size/4))+0.5
         Shader_SetVectorVal Terrain_pEffect(e),Terrain_pSizeTile(e,3),Terrain_TileSize*1000,Terrain_TileSize*1000,(0.5/1000)+0.5,(0.5/1000)+0.5
         set effect constant float Terrain_Effect(e),"TerrainHeight",Terrain_Height/255
      next e
      set effect constant float Terrain_Effect(6),"TerrainHeight",Terrain_Height
      set effect constant float Terrain_Effect(7),"TerrainHeight",Terrain_Height
      for o=6 to 7
         scale object Terrain_Object(o),Terrain_Size*Terrain_TileSize,100,Terrain_Size*Terrain_TileSize
         scale object Terrain_Object(o+3),Terrain_Size*Terrain_TileSize,100,Terrain_Size*Terrain_TileSize
      next o
      scale object Terrain_Object(12),Terrain_Size*Terrain_TileSize,100,Terrain_Size*Terrain_TileSize
      if AL_Ocean=1
         set effect constant float AL_OceanEffect,"TerrainHeight",Terrain_Height/255
         set vector4 Vector4(1),Terrain_Size*Terrain_TileSize,0.5+(0.5/Terrain_BaseSize),0,0
         set effect constant vector AL_OceanEffect,"TerrainScale",Vector4(1)
      endif
      set vector4 Vector4(1),Terrain_TileSize*Terrain_Size,Terrain_TileSize*Terrain_Size,0.5+(0.5/Terrain_BaseSize),0.5+(0.5/Terrain_BaseSize)
      set effect constant vector Terrain_Effect(9),"UVSize",Vector4(1)
      set effect constant float Terrain_Effect(9),"TerrainTileSize",Terrain_TileSize*1000
   endif
endfunction

`----------------------------------------------------
` Set Terrain Detail Texture
`----------------------------------------------------
function Terrain_SetDetailTexture(iTexture1 as integer,iTexture2 as integer)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      for t=1 to 4
         texture object Terrain_Object(t),0,iTexture1
         texture object Terrain_Object(t),1,iTexture2
      next t
   endif
endfunction

`----------------------------------------------------
` Set Terrain Texture
`----------------------------------------------------
function Terrain_SetTexture(iStage as integer,iTexture as integer,iNormal as integer)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      if image exist(iTexture)=1
         Terrain_TextureWidth(iStage)=image width(iTexture)
         tObj=6:tStage=2+iStage
         if iStage>3 then tObj=9:tStage=2+(iStage-4)
         texture object Terrain_Object(tObj),tStage,iTexture
         texture object Terrain_Object(tObj+1),tStage,iNormal
         if iStage=0
            texture object Terrain_Object(12),0,iTexture
            texture object Terrain_Object(12),1,iNormal
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Set Texture Size
`----------------------------------------------------
function Terrain_SetTextureSize(iStage as integer,iUvSize as float,iUvSplit as float)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      Terrain_TextureUV(iStage).x=iUvSize
      Terrain_TextureUV(iStage).y=iUvSplit
   endif
endfunction

`----------------------------------------------------
` Set Texture Slope
`----------------------------------------------------
function Terrain_SetTextureSlope(iStage as integer,iMin as float,iMax as float,iTransition as float)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      Terrain_TextureSlope(iStage).x=iMin
      Terrain_TextureSlope(iStage).y=iMax
      Terrain_TextureSlope(iStage).z=iTransition
      if iStage<4
         set vector4 Vector4(1),1-(Terrain_TextureSlope(1).x/100),1-(Terrain_TextureSlope(2).x/100),1-(Terrain_TextureSlope(3).x/100),0
         set vector4 Vector4(2),Terrain_TextureSlope(1).y/100,Terrain_TextureSlope(2).y/100,Terrain_TextureSlope(3).y/100,0
         set vector4 Vector4(3),Terrain_TextureSlope(1).z,Terrain_TextureSlope(2).z,Terrain_TextureSlope(3).z,0
         set effect constant vector Terrain_Effect(6),"SlopeMin",Vector4(1)
         set effect constant vector Terrain_Effect(6),"SlopeMax",Vector4(2)
         set effect constant vector Terrain_Effect(6),"SlopeTransition",Vector4(3)
      else
         set vector4 Vector4(1),1-(Terrain_TextureSlope(4).x/100),1-(Terrain_TextureSlope(5).x/100),1-(Terrain_TextureSlope(6).x/100),1-(Terrain_TextureSlope(7).x/100)
         set vector4 Vector4(2),Terrain_TextureSlope(4).y/100,Terrain_TextureSlope(5).y/100,Terrain_TextureSlope(6).y/100,Terrain_TextureSlope(7).y/100
         set vector4 Vector4(3),Terrain_TextureSlope(4).z,Terrain_TextureSlope(5).z,Terrain_TextureSlope(6).z,Terrain_TextureSlope(7).z
         set effect constant vector Terrain_Effect(7),"SlopeMin",Vector4(1)
         set effect constant vector Terrain_Effect(7),"SlopeMax",Vector4(2)
         set effect constant vector Terrain_Effect(7),"SlopeTransition",Vector4(3)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Texture Height
`----------------------------------------------------
function Terrain_SetTextureHeight(iStage as integer,iMin as float,iMax as float,iTransition as float)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      Terrain_TextureHeight(iStage).x=iMin
      Terrain_TextureHeight(iStage).y=iMax
      Terrain_TextureHeight(iStage).z=iTransition
      if iStage<4
         set vector4 Vector4(1),1-(Terrain_TextureHeight(1).x/100),1-(Terrain_TextureHeight(2).x/100),1-(Terrain_TextureHeight(3).x/100),0
         set vector4 Vector4(2),Terrain_TextureHeight(1).y/100,Terrain_TextureHeight(2).y/100,Terrain_TextureHeight(3).y/100,0
         set vector4 Vector4(3),Terrain_TextureHeight(1).z,Terrain_TextureHeight(2).z,Terrain_TextureHeight(3).z,0
         set effect constant vector Terrain_Effect(6),"HeightMin",Vector4(1)
         set effect constant vector Terrain_Effect(6),"HeightMax",Vector4(2)
         set effect constant vector Terrain_Effect(6),"HeightTransition",Vector4(3)
      else
         set vector4 Vector4(1),1-(Terrain_TextureHeight(4).x/100),1-(Terrain_TextureHeight(5).x/100),1-(Terrain_TextureHeight(6).x/100),1-(Terrain_TextureHeight(7).x/100)
         set vector4 Vector4(2),Terrain_TextureHeight(4).y/100,Terrain_TextureHeight(5).y/100,Terrain_TextureHeight(6).y/100,Terrain_TextureHeight(7).y/100
         set vector4 Vector4(3),Terrain_TextureHeight(4).z,Terrain_TextureHeight(5).z,Terrain_TextureHeight(6).z,Terrain_TextureHeight(7).z
         set effect constant vector Terrain_Effect(7),"HeightMin",Vector4(1)
         set effect constant vector Terrain_Effect(7),"HeightMax",Vector4(2)
         set effect constant vector Terrain_Effect(7),"HeightTransition",Vector4(3)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Texture Blend Transition
`----------------------------------------------------
function Terrain_SetTextureBlendTransition(iStage as integer,iBlendTransition as float)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      Terrain_TextureBlendTransition(iStage)=iBlendTransition
      if iStage<4
         set vector4 Vector4(1),Terrain_TextureBlendTransition(1),Terrain_TextureBlendTransition(2),Terrain_TextureBlendTransition(3),0
         set effect constant vector Terrain_Effect(6),"BlendTransition",Vector4(1)
      else
         set vector4 Vector4(1),Terrain_TextureBlendTransition(4),Terrain_TextureBlendTransition(5),Terrain_TextureBlendTransition(6),Terrain_TextureBlendTransition(7)
         set effect constant vector Terrain_Effect(7),"BlendTransition",Vector4(1)
      endif
   endif
endfunction

`----------------------------------------------------
` Set Texture Size
`----------------------------------------------------
function Terrain_SetTextureMode(iStage as integer,iMode as integer)
   if Terrain_Enabled=1 or Terrain_Enabled=2
      if Terrain_TextureMode(iStage)<>iMode
         Terrain_TextureMode(iStage)=iMode
         for o=6 to 7
            set object effect Terrain_Object(o),0
            set object effect Terrain_Object(o+3),0
         next o
         set vector4 Vector4(1),(Terrain_BaseSize/(Terrain_BaseSize+2)),(Terrain_BaseSize/(Terrain_BaseSize+2)),0.5/(Terrain_BaseSize+2),0.5/(Terrain_BaseSize+2)
         if iStage<4
            if fileexist(AL_MydocDirectory+"LayersA"+str$(Terrain_TextureMode(0))+str$(Terrain_TextureMode(1))+str$(Terrain_TextureMode(2))+str$(Terrain_TextureMode(3))+".fx")=0
               Effect_LockFile(AL_Directory+"Terrain\LayersA.fx")
               if Terrain_TextureMode(0)=1 then Effect_SetDefine("UvMix1",1) else Effect_SetDefine("UvMix1",0)
               if Terrain_TextureMode(1)=1 then Effect_SetDefine("UvMix2",1) else Effect_SetDefine("UvMix2",0)
               if Terrain_TextureMode(2)=1 then Effect_SetDefine("UvMix3",1) else Effect_SetDefine("UvMix3",0)
               if Terrain_TextureMode(3)=1 then Effect_SetDefine("UvMix4",1) else Effect_SetDefine("UvMix4",0)
               if Terrain_TextureMode(0)=2 then Effect_SetDefine("VerticalMap1",1) else Effect_SetDefine("VerticalMap1",0)
               if Terrain_TextureMode(1)=2 then Effect_SetDefine("VerticalMap2",1) else Effect_SetDefine("VerticalMap2",0)
               if Terrain_TextureMode(2)=2 then Effect_SetDefine("VerticalMap3",1) else Effect_SetDefine("VerticalMap3",0)
               if Terrain_TextureMode(3)=2 then Effect_SetDefine("VerticalMap4",1) else Effect_SetDefine("VerticalMap4",0)
               Effect_UnLockFile(AL_MydocDirectory+"LayersA"+str$(Terrain_TextureMode(0))+str$(Terrain_TextureMode(1))+str$(Terrain_TextureMode(2))+str$(Terrain_TextureMode(3))+".fx")
            endif
            delete effect Terrain_Effect(6)
            load effect AL_MydocDirectory+"LayersA"+str$(Terrain_TextureMode(0))+str$(Terrain_TextureMode(1))+str$(Terrain_TextureMode(2))+str$(Terrain_TextureMode(3))+".fx",Terrain_Effect(6),0,1
            set effect constant vector Terrain_Effect(6),"UVSize",Vector4(1)
            set effect constant float Terrain_Effect(6),"TerrainHeight",Terrain_Height
         else
            if fileexist(AL_MydocDirectory+"LayersB"+str$(Terrain_TextureMode(4))+str$(Terrain_TextureMode(5))+str$(Terrain_TextureMode(6))+str$(Terrain_TextureMode(7))+".fx")=0
               Effect_LockFile(AL_Directory+"Terrain\LayersB.fx")
               if Terrain_TextureMode(4)=1 then Effect_SetDefine("UvMix1",1) else Effect_SetDefine("UvMix1",0)
               if Terrain_TextureMode(5)=1 then Effect_SetDefine("UvMix2",1) else Effect_SetDefine("UvMix2",0)
               if Terrain_TextureMode(6)=1 then Effect_SetDefine("UvMix3",1) else Effect_SetDefine("UvMix3",0)
               if Terrain_TextureMode(7)=1 then Effect_SetDefine("UvMix4",1) else Effect_SetDefine("UvMix4",0)
               if Terrain_TextureMode(4)=2 then Effect_SetDefine("VerticalMap1",1) else Effect_SetDefine("VerticalMap1",0)
               if Terrain_TextureMode(5)=2 then Effect_SetDefine("VerticalMap2",1) else Effect_SetDefine("VerticalMap2",0)
               if Terrain_TextureMode(6)=2 then Effect_SetDefine("VerticalMap3",1) else Effect_SetDefine("VerticalMap3",0)
               if Terrain_TextureMode(7)=2 then Effect_SetDefine("VerticalMap4",1) else Effect_SetDefine("VerticalMap4",0)
               Effect_UnLockFile(AL_MydocDirectory+"LayersB"+str$(Terrain_TextureMode(4))+str$(Terrain_TextureMode(5))+str$(Terrain_TextureMode(6))+str$(Terrain_TextureMode(7))+".fx")
            endif
            delete effect Terrain_Effect(7)
            load effect AL_MydocDirectory+"LayersB"+str$(Terrain_TextureMode(4))+str$(Terrain_TextureMode(5))+str$(Terrain_TextureMode(6))+str$(Terrain_TextureMode(7))+".fx",Terrain_Effect(7),0,1
            set effect constant vector Terrain_Effect(7),"UVSize",Vector4(1)
            set effect constant float Terrain_Effect(7),"TerrainHeight",Terrain_Height
         endif
         for o=6 to 7
            set object effect Terrain_Object(o),Terrain_Effect(6)
            set object effect Terrain_Object(o+3),Terrain_Effect(7)
         next o
         for x=0 to 7
            Terrain_SetTextureSlope(x,Terrain_TextureSlope(x).x,Terrain_TextureSlope(x).y,Terrain_TextureSlope(x).z)
            Terrain_SetTextureHeight(x,Terrain_TextureHeight(x).x,Terrain_TextureHeight(x).y,Terrain_TextureHeight(x).z)
            Terrain_SetTextureBlendTransition(x,Terrain_TextureBlendTransition(x))
         next x
      endif
   endif
endfunction

`----------------------------------------------------
` Get Terrain Height
`----------------------------------------------------
function Terrain_GetHeight(ix as float,iz as float)
   local rHeight as float
   if Terrain_Enabled=1 or Terrain_Enabled=2
      rHeight=0
      ix=ix+(Terrain_TileSize*(Terrain_Size/2))
      iz=iz+(Terrain_TileSize*(Terrain_Size/2))
      tx=int(ix/Terrain_TileSize)
      tz=int(iz/Terrain_TileSize)
      if tx>-1 and tz>-1 and tx<Terrain_Size and tz<Terrain_Size
         tPos=(tz*(Terrain_Size+2))+tx
         Vector4Float(30).x=PeekByte4(Terrain_pHeight+tPos*4)
         Vector4Float(30).x=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(30).x/255)
         tPos=(tz*(Terrain_Size+2))+(tx+1)
         Vector4Float(30).y=PeekByte4(Terrain_pHeight+tPos*4)
         Vector4Float(30).y=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(30).y/255)
         tPos=((tz+1)*(Terrain_Size+2))+tx
         Vector4Float(30).z=PeekByte4(Terrain_pHeight+tPos*4)
         Vector4Float(30).z=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(30).z/255)
         tPos=((tz+1)*(Terrain_Size+2))+(tx+1)
         Vector4Float(30).w=PeekByte4(Terrain_pHeight+tPos*4)
         Vector4Float(30).w=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(30).w/255)
         Vector4Float(31).x=(ix-(tx*Terrain_TileSize))/Terrain_TileSize
         Vector4Float(31).z=(iz-(tz*Terrain_TileSize))/Terrain_TileSize
         tx2=(int(ix/(Terrain_TileSize*2))*2)-tx
         tz2=(int(iz/(Terrain_TileSize*2))*2)-tz
         if tx2=0
            if tz2=0
               if ((1-Vector4Float(31).z)+Vector4Float(31).x)-(Vector4Float(31).z+(1-Vector4Float(31).x))>0 then rHeight=Vector4Float(30).y+((Vector4Float(30).x-Vector4Float(30).y)*(1-Vector4Float(31).x))+((Vector4Float(30).w-Vector4Float(30).y)*Vector4Float(31).z) else rHeight=Vector4Float(30).z+((Vector4Float(30).w-Vector4Float(30).z)*Vector4Float(31).x)+((Vector4Float(30).x-Vector4Float(30).z)*(1-Vector4Float(31).z))
            else
               if ((1-Vector4Float(31).x)-Vector4Float(31).z)-(Vector4Float(31).z-(1-Vector4Float(31).x))>0 then rHeight=Vector4Float(30).x+((Vector4Float(30).y-Vector4Float(30).x)*Vector4Float(31).x)+((Vector4Float(30).z-Vector4Float(30).x)*Vector4Float(31).z) else rHeight=Vector4Float(30).w+((Vector4Float(30).y-Vector4Float(30).w)*(1-Vector4Float(31).z))+((Vector4Float(30).z-Vector4Float(30).w)*(1-Vector4Float(31).x))
            endif
         else
            if tz2=0
               if ((1-Vector4Float(31).x)-Vector4Float(31).z)-(Vector4Float(31).z-(1-Vector4Float(31).x))>0 then rHeight=Vector4Float(30).x+((Vector4Float(30).y-Vector4Float(30).x)*Vector4Float(31).x)+((Vector4Float(30).z-Vector4Float(30).x)*Vector4Float(31).z) else rHeight=Vector4Float(30).w+((Vector4Float(30).y-Vector4Float(30).w)*(1-Vector4Float(31).z))+((Vector4Float(30).z-Vector4Float(30).w)*(1-Vector4Float(31).x))
            else
               if ((1-Vector4Float(31).z)+Vector4Float(31).x)-(Vector4Float(31).z+(1-Vector4Float(31).x))>0 then rHeight=Vector4Float(30).y+((Vector4Float(30).x-Vector4Float(30).y)*(1-Vector4Float(31).x))+((Vector4Float(30).w-Vector4Float(30).y)*Vector4Float(31).z) else rHeight=Vector4Float(30).z+((Vector4Float(30).w-Vector4Float(30).z)*Vector4Float(31).x)+((Vector4Float(30).x-Vector4Float(30).z)*(1-Vector4Float(31).z))
            endif
         endif
      endif
      rHeight=rHeight*(Terrain_Height/255)
   endif
endfunction rHeight

`----------------------------------------------------
` Update Terrain
`----------------------------------------------------
function Terrain_Update()
   if Terrain_Enabled=1
      local tWrapMod as Vec2Integer
      Vector4Float(1).w=Terrain_TileSize
      Terrain_Index(1,1)=0:Terrain_Index(1,2)=0
      Terrain_Index(1,3)=0:Terrain_Index(1,4)=0
      Terrain_CamPosition(0).z=0
      Vector4Float(1).x=floor((AL_CameraPos.x+(Vector4Float(1).w*0.5))/(Vector4Float(1).w))*(Vector4Float(1).w)
      Vector4Float(1).y=floor((AL_CameraPos.z+(Vector4Float(1).w*0.5))/(Vector4Float(1).w))*(Vector4Float(1).w)
      if Terrain_CamPosition(0).x<>Vector4Float(1).x or Terrain_CamPosition(0).y<>Vector4Float(1).y
         Terrain_CamPosition(0).x=Vector4Float(1).x
         Terrain_CamPosition(0).y=Vector4Float(1).y
         tLimb=1
         for t=1 to 6
            Vector4Float(1).w=Vector4Float(1).w*2
            Vector4Float(1).x=floor((AL_CameraPos.x+(Vector4Float(1).w*0.5))/(Vector4Float(1).w))*(Vector4Float(1).w)
            Vector4Float(1).y=floor((AL_CameraPos.z+(Vector4Float(1).w*0.5))/(Vector4Float(1).w))*(Vector4Float(1).w)
            Terrain_CamPosition(0).z=Terrain_CamPosition(0).z+(Vector4Float(1).w*32)
            if Terrain_CamPosition(t).x<>Vector4Float(1).x or Terrain_CamPosition(t).y<>Vector4Float(1).y
               Terrain_CamPosition(t).x=Vector4Float(1).x
               Terrain_CamPosition(t).y=Vector4Float(1).y
               Terrain_SetBounds(Terrain_Bounds(1,tLimb),Terrain_CamPosition(t).x-(Terrain_CamPosition(0).z/2),(Terrain_CamPosition(t).y+Terrain_CamPosition(0).z)-(Vector4Float(1).w*16),Terrain_CamPosition(0).z,Vector4Float(1).w*32)
               Terrain_SetBounds(Terrain_Bounds(1,tLimb+1),Terrain_CamPosition(t).x+(Terrain_CamPosition(0).z/2),(Terrain_CamPosition(t).y+Terrain_CamPosition(0).z)-(Vector4Float(1).w*16),Terrain_CamPosition(0).z,Vector4Float(1).w*32)
               Terrain_SetBounds(Terrain_Bounds(2,tLimb),(Terrain_CamPosition(t).x+Terrain_CamPosition(0).z)-(Vector4Float(1).w*16),Terrain_CamPosition(t).y+(Terrain_CamPosition(0).z/2),Vector4Float(1).w*32,Terrain_CamPosition(0).z)
               Terrain_SetBounds(Terrain_Bounds(2,tLimb+1),(Terrain_CamPosition(t).x+Terrain_CamPosition(0).z)-(Vector4Float(1).w*16),Terrain_CamPosition(t).y-(Terrain_CamPosition(0).z/2),Vector4Float(1).w*32,Terrain_CamPosition(0).z)
               Terrain_SetBounds(Terrain_Bounds(3,tLimb),Terrain_CamPosition(t).x+(Terrain_CamPosition(0).z/2),(Terrain_CamPosition(t).y-Terrain_CamPosition(0).z)+(Vector4Float(1).w*16),Terrain_CamPosition(0).z,Vector4Float(1).w*32)
               Terrain_SetBounds(Terrain_Bounds(3,tLimb+1),Terrain_CamPosition(t).x-(Terrain_CamPosition(0).z/2),(Terrain_CamPosition(t).y-Terrain_CamPosition(0).z)+(Vector4Float(1).w*16),Terrain_CamPosition(0).z,Vector4Float(1).w*32)
               Terrain_SetBounds(Terrain_Bounds(4,tLimb),(Terrain_CamPosition(t).x-Terrain_CamPosition(0).z)+(Vector4Float(1).w*16),Terrain_CamPosition(t).y-(Terrain_CamPosition(0).z/2),Vector4Float(1).w*32,Terrain_CamPosition(0).z)
               Terrain_SetBounds(Terrain_Bounds(4,tLimb+1),(Terrain_CamPosition(t).x-Terrain_CamPosition(0).z)+(Vector4Float(1).w*16),Terrain_CamPosition(t).y+(Terrain_CamPosition(0).z/2),Vector4Float(1).w*32,Terrain_CamPosition(0).z)
            endif
            inc tLimb,2
            Vector4Float(2).x=(wrapvalue(((AL_CameraPos.x+Vector4Float(1).w)/(Vector4Float(1).w*2))*360)/360)*(Vector4Float(1).w*2)
            Vector4Float(2).y=(wrapvalue(((AL_CameraPos.z+Vector4Float(1).w)/(Vector4Float(1).w*2))*360)/360)*(Vector4Float(1).w*2)
            tWrapMod.x=int(Vector4Float(2).x/(Vector4Float(1).w/2))
            tWrapMod.y=int(Vector4Float(2).y/(Vector4Float(1).w/2))
            Vector4Float(2).x=1-(Vector4Float(2).x/(Vector4Float(1).w*2))
            Vector4Float(2).y=1-(Vector4Float(2).y/(Vector4Float(1).w*2))
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)),Vector4Float(1).x,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y-(Vector4Float(1).w/2),0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y-Vector4Float(1).w,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=1 or tWrapMod.y=2 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y-(Vector4Float(1).w/2),0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y-((Vector4Float(1).w*2)-(Vector4Float(1).w/2)),0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=1 or tWrapMod.y=2 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y-Vector4Float(1).w,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex1(1,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y-(Vector4Float(1).w*2),0
            Terrain_Index(0,0)=0
            if tWrapMod.x=0 or tWrapMod.x=3 then Terrain_Index(0,0)=1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)),0,0,0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+1),0,0,0,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+1),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+2),0,0,0,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+2),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+3),0,0,0,0
            if tWrapMod.y>0 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+3),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+4),Terrain_Index(0,0),0,0,0
            if tWrapMod.y>0 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+4),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+4),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+5),0,1,0,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+5),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+6),Terrain_Index(0,0),1,0,0
            if tWrapMod.y>0 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+6),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.y=3 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+6),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+7),0,1,0,0
            if tWrapMod.y>0 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+7),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+8),Terrain_Index(0,0),1,0,0
            if tWrapMod.y>0 then Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+8),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex2(1,Terrain_Index(1,2)+9),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex3(1,Terrain_Index(1,3)),Vector4Float(2).y,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex3(1,Terrain_Index(1,3)+1),1-Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex3(1,Terrain_Index(1,3)+2),Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex4(1,Terrain_Index(1,3)),0,0,0,0
            Terrain_Index(0,1)=0:Terrain_Index(0,2)=0:Terrain_Index(0,3)=0:Terrain_Index(0,4)=0
            if tWrapMod.y=0
               if tWrapMod.x=0 then Terrain_Index(0,1)=1
               if tWrapMod.x=3 then Terrain_Index(0,2)=1
            endif
            if tWrapMod.y=1 or tWrapMod.y=2
               if tWrapMod.x=0 then Terrain_Index(0,1)=1:Terrain_Index(0,3)=1
               if tWrapMod.x=3 then Terrain_Index(0,2)=1:Terrain_Index(0,4)=1
            endif
            if tWrapMod.y=3
               if tWrapMod.x=0 then Terrain_Index(0,2)=-2
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,1)=-2
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,2)=-2
               if tWrapMod.x=3 then Terrain_Index(0,1)=-2
            endif
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex4(1,Terrain_Index(1,3)+1),Terrain_Index(0,1),Terrain_Index(0,2),Terrain_Index(0,3),Terrain_Index(0,4)
            Terrain_Index(0,1)=0:Terrain_Index(0,2)=0:Terrain_Index(0,3)=0:Terrain_Index(0,4)=0
            if tWrapMod.y=0
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,1)=1
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,2)=1
               if tWrapMod.x=3 then Terrain_Index(0,2)=1
            endif
            if tWrapMod.y=1 or tWrapMod.y=2
               if tWrapMod.x=0 then Terrain_Index(0,1)=1:Terrain_Index(0,3)=1
               if tWrapMod.x=0 then Terrain_Index(0,2)=-2
               if tWrapMod.x=3 then Terrain_Index(0,1)=-2
            endif
            if tWrapMod.y=3
               if tWrapMod.x=0 then Terrain_Index(0,2)=-2
               if tWrapMod.x=3 then Terrain_Index(0,1)=-2
            endif
            Shader_SetVectorVal Terrain_pEffect(1),Terrain_pIndex4(1,Terrain_Index(1,3)+2),Terrain_Index(0,1),Terrain_Index(0,2),Terrain_Index(0,3),Terrain_Index(0,4)
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)),Vector4Float(1).x,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+1),Vector4Float(1).x-(Vector4Float(1).w/2),0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+2),Vector4Float(1).x-Vector4Float(1).w,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=1 or tWrapMod.x=2 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+3),Vector4Float(1).x-(Vector4Float(1).w/2),0,Vector4Float(1).y,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+3),Vector4Float(1).x-((Vector4Float(1).w*2)-(Vector4Float(1).w/2)),0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=1 or tWrapMod.x=2 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+4),Vector4Float(1).x-Vector4Float(1).w,0,Vector4Float(1).y,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex1(2,Terrain_Index(1,1)+4),Vector4Float(1).x-(Vector4Float(1).w*2),0,Vector4Float(1).y,0
            Terrain_Index(0,0)=1
            if tWrapMod.y=0 or tWrapMod.y=3 then Terrain_Index(0,0)=0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)),0,0,0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+1),0,0,0,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+1),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+2),0,0,0,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+2),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+3),0,0,0,0
            if tWrapMod.x>0 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+3),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+4),0,0,0,0
            if tWrapMod.x>0 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+4),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+4),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+5),0,1,0,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+5),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+6),Terrain_Index(0,0),1,0,0
            if tWrapMod.x>0 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+6),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.x=3 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+6),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+7),0,1,0,0
            if tWrapMod.x>0 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+7),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+8),Terrain_Index(0,0),1,0,0
            if tWrapMod.x>0 then Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+8),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex2(2,Terrain_Index(1,2)+9),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex3(2,Terrain_Index(1,3)),Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex3(2,Terrain_Index(1,3)+1),Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(2),Terrain_pIndex3(2,Terrain_Index(1,3)+2),Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)),Vector4Float(1).x,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y+(Vector4Float(1).w/2),0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y+Vector4Float(1).w,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=1 or tWrapMod.y=2 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y+(Vector4Float(1).w/2),0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y+((Vector4Float(1).w*2)-(Vector4Float(1).w/2)),0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.y=1 or tWrapMod.y=2 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y+Vector4Float(1).w,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex1(3,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y+(Vector4Float(1).w*2),0
            Terrain_Index(0,0)=0
            if tWrapMod.x=0 or tWrapMod.x=3 then Terrain_Index(0,0)=1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)),0,0,0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+1),0,0,0,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+1),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+2),Terrain_Index(0,0),0,0,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+2),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+3),0,0,0,0
            if tWrapMod.y<3 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+3),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+4),Terrain_Index(0,0),0,0,0
            if tWrapMod.y<3 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+4),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+4),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+5),0,1,0,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+5),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+6),Terrain_Index(0,0),1,0,0
            if tWrapMod.y<3 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+6),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.y=0 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+6),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+7),0,1,0,0
            if tWrapMod.y<3 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+7),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+8),Terrain_Index(0,0),1,0,0
            if tWrapMod.y<3 then Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+8),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex2(3,Terrain_Index(1,2)+9),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex3(3,Terrain_Index(1,3)),1-Vector4Float(2).y,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex3(3,Terrain_Index(1,3)+1),Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex3(3,Terrain_Index(1,3)+2),1-Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex4(3,Terrain_Index(1,3)),0,0,0,0
            Terrain_Index(0,1)=0:Terrain_Index(0,2)=0:Terrain_Index(0,3)=0:Terrain_Index(0,4)=0
            if tWrapMod.y=0
               if tWrapMod.x=0 then Terrain_Index(0,1)=-2
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,1)=-2
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,2)=-2
               if tWrapMod.x=3 then Terrain_Index(0,2)=-2
            endif
            if tWrapMod.y=1 or tWrapMod.y=2
               if tWrapMod.x=0 then Terrain_Index(0,2)=1:Terrain_Index(0,4)=1
               if tWrapMod.x=3 then Terrain_Index(0,1)=1:Terrain_Index(0,3)=1
            endif
            if tWrapMod.y=3
               if tWrapMod.x=0 then Terrain_Index(0,2)=1
               if tWrapMod.x=3 then Terrain_Index(0,1)=1
            endif
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex4(3,Terrain_Index(1,3)+1),Terrain_Index(0,1),Terrain_Index(0,2),Terrain_Index(0,3),Terrain_Index(0,4)
            Terrain_Index(0,1)=0:Terrain_Index(0,2)=0:Terrain_Index(0,3)=0:Terrain_Index(0,4)=0
            if tWrapMod.y=0
               if tWrapMod.x=0 then Terrain_Index(0,1)=-2
               if tWrapMod.x=3 then Terrain_Index(0,2)=-2
            endif
            if tWrapMod.y=1 or tWrapMod.y=2
               if tWrapMod.x=0 then Terrain_Index(0,1)=-2
               if tWrapMod.x=3 then Terrain_Index(0,2)=-2
            endif
            if tWrapMod.y=3
               if tWrapMod.x=0 then Terrain_Index(0,2)=1
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,1)=1
               if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_Index(0,2)=1
               if tWrapMod.x=3 then Terrain_Index(0,1)=1
            endif
            Shader_SetVectorVal Terrain_pEffect(3),Terrain_pIndex4(3,Terrain_Index(1,3)+2),Terrain_Index(0,1),Terrain_Index(0,2),Terrain_Index(0,3),Terrain_Index(0,4)
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)),Vector4Float(1).x,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+1),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+1),Vector4Float(1).x+(Vector4Float(1).w/2),0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+2),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+2),Vector4Float(1).x+Vector4Float(1).w,0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+3),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=1 or tWrapMod.x=2 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+3),Vector4Float(1).x+(Vector4Float(1).w/2),0,Vector4Float(1).y,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+3),Vector4Float(1).x+((Vector4Float(1).w*2)-(Vector4Float(1).w/2)),0,Vector4Float(1).y,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+4),Vector4Float(1).x,0,Vector4Float(1).y,0
            if tWrapMod.x=1 or tWrapMod.x=2 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+4),Vector4Float(1).x+Vector4Float(1).w,0,Vector4Float(1).y,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex1(4,Terrain_Index(1,1)+4),Vector4Float(1).x+(Vector4Float(1).w*2),0,Vector4Float(1).y,0
            Terrain_Index(0,0)=1
            if tWrapMod.y=0 or tWrapMod.y=3 then Terrain_Index(0,0)=0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)),0,0,0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+1),0,0,0,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+1),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+2),Terrain_Index(0,0),0,0,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+2),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+3),0,0,0,0
            if tWrapMod.x<3 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+3),0,1,0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+4),Terrain_Index(0,0),0,0,0
            if tWrapMod.x<3 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+4),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+4),Terrain_Index(0,0),1,0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+5),0,1,0,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+5),0,1,0,1
            shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+6),Terrain_Index(0,0),1,0,0
            if tWrapMod.x<3 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+6),1-Terrain_Index(0,0),1,0,0
            if tWrapMod.x=0 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+6),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+7),0,1,0,0
            if tWrapMod.x<3 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+7),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+8),Terrain_Index(0,0),1,0,0
            if tWrapMod.x<3 then Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+8),Terrain_Index(0,0),0,1,1
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex2(4,Terrain_Index(1,2)+9),0,1,0,1
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex3(4,Terrain_Index(1,3)),1-Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex3(4,Terrain_Index(1,3)+1),1-Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            Shader_SetVectorVal Terrain_pEffect(4),Terrain_pIndex3(4,Terrain_Index(1,3)+2),1-Vector4Float(2).x,Vector4Float(1).w/(Terrain_TileSize*2),0,0
            inc Terrain_Index(1,1),5
            inc Terrain_Index(1,2),10
            inc Terrain_Index(1,3),3
         next t
      endif
      Terrain_TextureRefresh=0
      Terrain_CamUpdate.x=(int(AL_CameraPos.x/(Terrain_TileSize*16))*(Terrain_TileSize*16))/(Terrain_TileSize*1000)
      Terrain_CamUpdate.y=(int(AL_CameraPos.z/(Terrain_TileSize*16))*(Terrain_TileSize*16))/(Terrain_TileSize*1000)
      if Terrain_CamUpdate.z<>Terrain_CamUpdate.x or Terrain_CamUpdate.w<>Terrain_CamUpdate.y
         exclude object off Terrain_Object(5)
         if Terrain_CamUpdate.z=-999999
            set effect technique Terrain_Effect(5),"Texture2"
            sync mask 2^Terrain_Camera(2)
            fastsync
         endif
         Terrain_CamUpdate.z=Terrain_CamUpdate.x
         Terrain_CamUpdate.w=Terrain_CamUpdate.y
         set vector4 Vector4(1),(-Terrain_CamUpdate.z)+0.5,(-Terrain_CamUpdate.w)+0.5,0,0
         set effect constant vector Terrain_Effect(9),"TerrainOffset",Vector4(1)
         for e=0 to AL_EffectActiveCount:set effect constant vector AL_Effect(AL_EffectActive(e)).Effect,"TerrainOffset",Vector4(1):next e
         set vector4 Vector4(1),-Terrain_CamUpdate.z,-Terrain_CamUpdate.w,0,0
         for e=1 to 5:set effect constant vector Terrain_Effect(e),"TerrainOffset",Vector4(1):next e
         set effect technique Terrain_Effect(5),"Texture1"
         sync mask 2^Terrain_Camera(1)
         fastsync
         exclude object on Terrain_Object(5)
         Terrain_TextureRefresh=1
      endif
      if Terrain_TextureRefresh=0
         set vector3 Vector3(2),AL_CameraPos.x-Terrain_CubeMapPosition(0,0).x,AL_CameraPos.y-Terrain_CubeMapPosition(0,0).y,AL_CameraPos.z-Terrain_CubeMapPosition(0,0).z
         Terrain_CubeMapPosition(0,0).x=AL_CameraPos.x
         Terrain_CubeMapPosition(0,0).y=AL_CameraPos.y
         Terrain_CubeMapPosition(0,0).z=AL_CameraPos.z
         Vector4Float(1).w=length vector3(Vector3(2))
         normalize vector3 Vector3(2),Vector3(2)
         if Vector4Float(1).w<0 then Vector4Float(1).w=0
         Terrain_CubeMapRange(0,1)=Terrain_Range
         Terrain_CubeMapRange(0,2)=Terrain_Range*Terrain_RangeMultiplier*1.1
         Terrain_CubeMapRange(0,3)=Terrain_Range*(Terrain_RangeMultiplier^2)*1.2
         Terrain_CubeMapRange(0,4)=Terrain_Range*(Terrain_RangeMultiplier^3)*1.3
         Terrain_CubeMapRange(0,5)=Terrain_Range*(Terrain_RangeMultiplier^4)*1.4
         Terrain_CubeMapRange(0,6)=Terrain_Range*(Terrain_RangeMultiplier^5)*1.5
         tUpDate=0
         for z=1 to 6
            inc Terrain_CubeMapUpdate(0)
            if Terrain_CubeMapUpdate(0)>6 then Terrain_CubeMapUpdate(0)=1
            Vector4Float(0).w=Terrain_CubeMapUpdate(0)
            Vector4Float(0).w=Vector4Float(0).w*0.1
            Vector4Float(1).x=AL_CameraPos.x+(AL_CameraDir.x*(Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*(0.25+Vector4Float(0).w)))
            Vector4Float(1).y=AL_CameraPos.y+(AL_CameraDir.y*(Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*(0.25+Vector4Float(0).w)))
            Vector4Float(1).z=AL_CameraPos.z+(AL_CameraDir.z*(Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*(0.25+Vector4Float(0).w)))
            Vector4Float(0).x=Vector4Float(1).x-Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).x
            Vector4Float(0).z=Vector4Float(1).z-Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).z
            if Terrain_CubeMapUpdate(Terrain_CubeMapUpdate(0))=0
               if Vector4Float(0).x>Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*0.25 or Vector4Float(0).x<-Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*0.25 then Terrain_CubeMapUpdate(Terrain_CubeMapUpdate(0))=100
               if Vector4Float(0).z>Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*0.25 or Vector4Float(0).z<-Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*0.25 then Terrain_CubeMapUpdate(Terrain_CubeMapUpdate(0))=100
            endif
            if Terrain_CubeMapUpdate(Terrain_CubeMapUpdate(0))=100
               Terrain_CubeMapUpdate(Terrain_CubeMapUpdate(0))=99
               Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).x=Vector4Float(1).x+((x vector3(Vector3(2))*Vector4Float(1).w)*12)
               Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).y=Vector4Float(1).y+((y vector3(Vector3(2))*Vector4Float(1).w)*12)
               Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).z=Vector4Float(1).z+((z vector3(Vector3(2))*Vector4Float(1).w)*12)
               for t=0 to 7
                  if Terrain_CubeMapUpdate(0)=1 then Vector4Float(10).x=Terrain_Range
                  if Terrain_CubeMapUpdate(0)=2 then Vector4Float(10).x=Terrain_Range
                  if Terrain_CubeMapUpdate(0)=3 then Vector4Float(10).x=Terrain_Range
                  if Terrain_CubeMapUpdate(0)=4 then Vector4Float(10).x=Terrain_Range
                  if Terrain_CubeMapUpdate(0)=5 then Vector4Float(10).x=Terrain_Range*(1+(Terrain_TextureUV(t).y*(Terrain_RangeMultiplier)))
                  if Terrain_CubeMapUpdate(0)=6 then Vector4Float(10).x=Terrain_Range*(1+(Terrain_TextureUV(t).y*(Terrain_RangeMultiplier*2)))
                  Vector4Float(10).x=(Terrain_Range*(Terrain_TextureUV(t).x/256))*(Terrain_TextureWidth(t)/Terrain_CubeMapSize(1))*(Vector4Float(10).x/Terrain_Range)
                  if t<4 then set effect constant float Terrain_Effect(6),"UV"+str$(t+1),Vector4Float(10).x else set effect constant float Terrain_Effect(7),"UV"+str$(t-3),Vector4Float(10).x
                  if t=0 then set effect constant float Terrain_Effect(8),"UV",Vector4Float(10).x
               next t
               set vector4 Vector4(1),-AL_CameraPos.x,AL_CameraPos.z,0,0
               set effect constant vector Terrain_Effect(6),"CamPos",Vector4(1)
               set effect constant vector Terrain_Effect(7),"CamPos",Vector4(1)
               set effect constant vector Terrain_Effect(8),"CamPos",Vector4(1)
               set effect constant vector Terrain_Effect(9),"CamPos",Vector4(1)
               rotate x matrix4 Matrix(1),-90*0.01745329251
               build ortho lhmatrix4 Matrix(2),Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*2,Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*2,Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*4*0.005,Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0))*4
               translate matrix4 Matrix(3),-Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).x,-Terrain_CubeMapRange(0,Terrain_CubeMapUpdate(0)),-Terrain_CubeMapPosition(1,Terrain_CubeMapUpdate(0)).z
               multiply matrix4 Matrix(3),Matrix(3),Matrix(1)
               multiply matrix4 Matrix(3),Matrix(3),Matrix(2)
               set effect constant matrix Terrain_Effect(6),"OrthoProj",Matrix(3)
               set effect constant matrix Terrain_Effect(7),"OrthoProj",Matrix(3)
               set effect constant matrix Terrain_Effect(8),"OrthoProj",Matrix(3)
               set effect constant matrix Terrain_Effect(9),"OrthoProj",Matrix(3)
               for x=0 to Terrain_DecalObjectCount
                  if Terrain_DecalObject(x).InUse=1 then exclude object off Terrain_DecalObject(x).Object 
               next x
               set global object creation 5
               exclude object off Terrain_Object(12)
               set effect technique Terrain_Effect(6),"Layers1":set effect technique Terrain_Effect(7),"Layers1":set effect technique Terrain_Effect(8),"Layers1":set effect technique Terrain_Effect(9),"Layers1"
               exclude object off Terrain_Object(6):exclude object off Terrain_Object(9)
               set camera view AL_Camera(8),0,0,Terrain_CubeMapSize(1),Terrain_CubeMapSize(1)
               CubeTex_SyncFaces Terrain_CubeMap(1),AL_Camera(8),2^(Terrain_CubeMapUpdate(0)-1)
               exclude object on Terrain_Object(6):exclude object on Terrain_Object(9)
               set effect technique Terrain_Effect(6),"Layers2":set effect technique Terrain_Effect(7),"Layers2":set effect technique Terrain_Effect(8),"Layers2":set effect technique Terrain_Effect(9),"Layers2"
               exclude object off Terrain_Object(7):exclude object off Terrain_Object(10)
               set camera view AL_Camera(8),0,0,Terrain_CubeMapSize(2),Terrain_CubeMapSize(2)
               CubeTex_SyncFaces Terrain_CubeMap(2),AL_Camera(8),2^(Terrain_CubeMapUpdate(0)-1)
               exclude object on Terrain_Object(7):exclude object on Terrain_Object(10)
               exclude object on Terrain_Object(12)
               set global object creation 0
               for x=0 to Terrain_DecalObjectCount
                  if Terrain_DecalObject(x).InUse=1 then exclude object on Terrain_DecalObject(x).Object
               next x
               set vector4 Vector4(1),Terrain_CubeMapPosition(1,1).x,Terrain_CubeMapPosition(1,1).z,Terrain_CubeMapPosition(1,2).x,Terrain_CubeMapPosition(1,2).z
               set vector4 Vector4(2),Terrain_CubeMapPosition(1,3).x,Terrain_CubeMapPosition(1,3).z,Terrain_CubeMapPosition(1,4).x,Terrain_CubeMapPosition(1,4).z
               set vector4 Vector4(3),Terrain_CubeMapPosition(1,5).x,Terrain_CubeMapPosition(1,5).z,Terrain_CubeMapPosition(1,6).x,Terrain_CubeMapPosition(1,6).z
               set vector4 Vector4(4),Terrain_CubeMapRange(0,1),Terrain_CubeMapRange(0,1),Terrain_CubeMapRange(0,2),Terrain_CubeMapRange(0,2)
               set vector4 Vector4(5),Terrain_CubeMapRange(0,3),Terrain_CubeMapRange(0,3),Terrain_CubeMapRange(0,4),Terrain_CubeMapRange(0,4)
               set vector4 Vector4(6),Terrain_CubeMapRange(0,5),Terrain_CubeMapRange(0,5),Terrain_CubeMapRange(0,6),Terrain_CubeMapRange(0,6)
               set vector4 Vector4(7),Terrain_CubeMapRange(0,1)*0.75,Terrain_CubeMapRange(0,2)*0.75,Terrain_CubeMapRange(0,3)*0.75,Terrain_CubeMapRange(0,4)*0.75
               set vector4 Vector4(8),10/Terrain_CubeMapRange(0,1),10/Terrain_CubeMapRange(0,2),0,0
               for t=1 to 4
                  set effect constant vector Terrain_Effect(t),"TexPos1",Vector4(1)
                  set effect constant vector Terrain_Effect(t),"TexPos2",Vector4(2)
                  set effect constant vector Terrain_Effect(t),"TexPos3",Vector4(3)
                  set effect constant vector Terrain_Effect(t),"TexRange1",Vector4(4)
                  set effect constant vector Terrain_Effect(t),"TexRange2",Vector4(5)
                  set effect constant vector Terrain_Effect(t),"TexRange3",Vector4(6)
                  set effect constant vector Terrain_Effect(t),"Range1",Vector4(7)
                  set effect constant float Terrain_Effect(t),"Range2",Terrain_CubeMapRange(0,5)*0.75
                  set effect constant vector Terrain_Effect(t),"Heightvec",Vector4(8)
               next t
               exit
            endif
         next z
         for x=1 to 6
            Vector4Float(0).w=x
            Vector4Float(0).w=Vector4Float(0).w*0.1
            Vector4Float(1).x=AL_CameraPos.x+(AL_CameraDir.x*(Terrain_CubeMapRange(0,x)*(0.1+Vector4Float(0).w)))
            Vector4Float(1).y=AL_CameraPos.y+(AL_CameraDir.y*(Terrain_CubeMapRange(0,x)*(0.1+Vector4Float(0).w)))
            Vector4Float(1).z=AL_CameraPos.z+(AL_CameraDir.z*(Terrain_CubeMapRange(0,x)*(0.1+Vector4Float(0).w)))
            if Vector4Float(1).x>Terrain_CubeMapPosition(1,x).x+(Terrain_CubeMapRange(0,x)*0.25) then Vector4Float(1).x=Terrain_CubeMapPosition(1,x).x+(Terrain_CubeMapRange(0,x)*0.25)
            if Vector4Float(1).x<Terrain_CubeMapPosition(1,x).x-(Terrain_CubeMapRange(0,x)*0.25) then Vector4Float(1).x=Terrain_CubeMapPosition(1,x).x-(Terrain_CubeMapRange(0,x)*0.25)
            if Vector4Float(1).z>Terrain_CubeMapPosition(1,x).z+(Terrain_CubeMapRange(0,x)*0.25) then Vector4Float(1).z=Terrain_CubeMapPosition(1,x).z+(Terrain_CubeMapRange(0,x)*0.25)
            if Vector4Float(1).z<Terrain_CubeMapPosition(1,x).z-(Terrain_CubeMapRange(0,x)*0.25) then Vector4Float(1).z=Terrain_CubeMapPosition(1,x).z-(Terrain_CubeMapRange(0,x)*0.25)
            set vector4 Vector4(1),Vector4Float(1).x,Vector4Float(1).y,Vector4Float(1).z,0
            for t=1 to 4:set effect constant vector Terrain_Effect(t),"CamPos"+str$(x),Vector4(1):next t
            if Terrain_CubeMapUpdate(x)>0 and Terrain_CubeMapUpdate(x)<100 then dec Terrain_CubeMapUpdate(x),32.0*AL_Timer
            if Terrain_CubeMapUpdate(x)<1 then Terrain_CubeMapUpdate(x)=0
         next x
      endif
   endif
endfunction

`----------------------------------------------------
` Set Terrain Bounds
`----------------------------------------------------
function Terrain_SetBounds(iBounds as integer,iPosX as float,iPosZ as float,iSizeX as float,iSizeZ as float)
   MinVec.y=999999:MaxVec.y=-999999
   Vector4Float(32).x=iPosX-(iSizeX/2)
   Vector4Float(32).z=iPosZ-(iSizeZ/2)
   for x=0 to 8
      for z=0 to 8
         Vector4Float(31).x=Vector4Float(32).x+(x*(iSizeX/8))
         Vector4Float(31).z=Vector4Float(32).z+(z*(iSizeZ/8))
         tx=Vector4Float(31).x+(Terrain_TileSize*(Terrain_Size/2))
         tz=Vector4Float(31).z+(Terrain_TileSize*(Terrain_Size/2))
         tx=int(tx/Terrain_TileSize)
         tz=int(tz/Terrain_TileSize)
         Vector4Float(32).w=0
         if tx>-1 and tz>-1 and tx<Terrain_Size and tz<Terrain_Size
            tPos=(tz*(Terrain_Size+2))+tx
            Vector4Float(32).w=PeekByte4(Terrain_pHeight+tPos*4)
            Vector4Float(32).w=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(32).w/255)
         endif
         if Vector4Float(32).w<MinVec.y then MinVec.y=Vector4Float(32).w
         if Vector4Float(32).w>MaxVec.y then MaxVec.y=Vector4Float(32).w
      next z
   next x
   MinVec.y=MinVec.y*(Terrain_Height/255)
   MaxVec.y=MaxVec.y*(Terrain_Height/255)
   FrustumCulling_SetBounds(iBounds,iPosX,MinVec.y+((MaxVec.y-MinVec.y)*0.5),iPosZ,iSizeX,(MaxVec.y-MinVec.y)+1,iSizeZ)
endfunction

`----------------------------------------------------
`Terrain Show
    _Terrain_Show:
      if Terrain_Enabled=1
         for t=1 to 4
            exclude object off Terrain_Object(t)
            if VFC_OccludeIndex=0
               for l=1 to 12
                  if FrustumCulling_BoundsInFrustum(Terrain_Bounds(t,l))=1 then exclude limb off Terrain_Object(t),l-1
               next l
            endif
            if VFC_OccludeIndex=1
               for l=1 to 12
                  if VFC_Bounds(Terrain_Bounds(t,l)).Occlude.x=0 and FrustumCulling_BoundsInFrustum(Terrain_Bounds(t,l))=1 then exclude limb off Terrain_Object(t),l-1
               next l
            endif
            if VFC_OccludeIndex=6
               for l=1 to 12
                  if VFC_Bounds(Terrain_Bounds(t,l)).Occlude.z=0 and FrustumCulling_BoundsInFrustum(Terrain_Bounds(t,l))=1 then exclude limb off Terrain_Object(t),l-1
               next l
            endif
         next t
      endif
   return

`----------------------------------------------------
`Terrain Hide
    _Terrain_Hide:
      if Terrain_Enabled=1
         for t=1 to 4
            exclude object on Terrain_Object(t)
            for x=0 to 11:exclude limb on Terrain_Object(t),x:next x
         next t
      endif
   return

`----------------------------------------------------
`Set Defaults
   _Terrain_Defaults:
      Terrain_Enabled=2
      Terrain_SetVisible(1)
      Terrain_CamUpdate.z=-999999
      if Terrain_Effect(6)=0 then Terrain_Effect(6)=FreeUpEffect(32500) else delete effect Terrain_Effect(6)
      load effect AL_Directory+"Terrain\LayersA.fx",Terrain_Effect(6),0,1
      if Terrain_Effect(7)=0 then Terrain_Effect(7)=FreeUpEffect(32500) else delete effect Terrain_Effect(7)
      load effect AL_Directory+"Terrain\LayersB.fx",Terrain_Effect(7),0,1
      for o=6 to 7
         set object effect Terrain_Object(o),Terrain_Effect(6)
         set object effect Terrain_Object(o+3),Terrain_Effect(7)
      next o
      Terrain_SetScale(50,12000)
      for l=0 to 7
         Terrain_TextureWidth(l)=512
         Terrain_SetTextureSize(l,128,0.4)
         Terrain_SetTextureSlope(l,0,100,16)
         Terrain_SetTextureHeight(l,0,100,16)
         Terrain_SetTextureBlendTransition(l,64)
         Terrain_TextureMode(l)=1
      next l
      set effect constant float Terrain_Effect(5),"TerrainSize",Terrain_Size/1000.0
      set vector4 Vector4(1),(Terrain_BaseSize/(Terrain_BaseSize+2)),(Terrain_BaseSize/(Terrain_BaseSize+2)),0.5/(Terrain_BaseSize+2),0.5/(Terrain_BaseSize+2)
      set effect constant vector Terrain_Effect(5),"UVSize",Vector4(1)
      set effect constant vector Terrain_Effect(6),"UVSize",Vector4(1)
      set effect constant vector Terrain_Effect(7),"UVSize",Vector4(1)
      for t=1 to 4
         for l=6 to 11:texture limb Terrain_Object(t),l,2,Terrain_Image(2):next l
      next t
      for l=0 to 15
         texture limb Terrain_Object(5),l,0,Terrain_Texture(1,l+1)
         texture limb Terrain_Object(5),l,1,Terrain_Texture(2,l+1)
         for o=6 to 7
            texture limb Terrain_Object(o),l,0,Terrain_Texture(1,l+1)
            texture limb Terrain_Object(o),l,1,Terrain_Texture(2,l+1)
            texture limb Terrain_Object(o+3),l,0,Terrain_Texture(1,l+1)
            texture limb Terrain_Object(o+3),l,1,Terrain_Texture(3,l+1)
         next o
      next l
      for t=1 to 6
         Terrain_CamPosition(t).x=-9999999999
         Terrain_CamPosition(t).y=-9999999999
      next t
      if AL_Ocean=1 then texture object AL_OceanObject,0,Terrain_Image(2)
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

type Terrain_MeshData
   InUse as integer
   Layer as integer
   Visible as boolean
   Batches as integer
   Segments as integer
   SegmentCount as integer
   SegmentVisibleCount as integer
   Batch1 as integer
   Batch2 as integer
   Batch3 as integer
   RndImage as integer
   SlopeMin as float
   SlopeMax as float
   HeightMin as float
   HeightMax as float
   Range as float
   Bounds as float
   Position as Vec3Float
   PositionTemp as Vec2Float
   pSegment as dword
   pSegmentVisible as dword
endtype

type Terrain_MeshSegmentData
   InUse as integer
   Visible as boolean
   Position as Vec2Float
   Bounds as integer
   BoundsPosition as Vec3Float
   BoundsScale as Vec3Float
   BatchCount as integer
   pBatch as dword
endtype

type Terrain_MeshBatchData
   InUse as integer
   Visible as boolean
   VisibleTemp as boolean
   Position as Vec2Float
   PositionWorld as Vec4Float
   PositionHeight as float
   Batch as integer
   LodStage as float
   Visible as boolean
endtype

`----------------------------------------------------
` Terrain Mesh Make Object
`----------------------------------------------------
function TerrainMesh_MakeObject(iObject as integer,iSourceObject as integer,iCount as integer,iLOD as integer,iScale as float,iLODScale as float,iRndAngleX as float,iRndAngleZ as float)
   if object exist(iSourceObject)=1
      randomize 0
      tCount=iCount^2
      dim tPos(tCount) as Vec2Float
      dim tLod(tCount) as Vec3Integer
      tCount=iCount
      x=0:y=0:dx=0:dy=-1
      MinMaxVecReSet()
      for o=0 to (iCount^2)-1
         tPos(o).x=x
         tPos(o).y=y
         MinMaxVec(x,y,0)
         if x=y or x<0 and x=-y or x>0 and x=1-y then tCount=dx:dx=-dy:dy=tCount
         inc x,dx:inc y,dy
      next o
      MinMaxPositionSize()
      tLodLevel=0
      for o=0 to (iCount^2)-1
         tPos(o).x=(tPos(o).x-MinMaxPos.x)*(100/MinMaxSize.x)
         tPos(o).y=(tPos(o).y-MinMaxPos.y)*(100/MinMaxSize.y)
         inc tLodLevel
         if tLodLevel>5 then tLodLevel=0
         if tLodLevel=0 or tLodLevel=2 or tLodLevel=4 then tLod(o).x=3
         if tLodLevel=1 or tLodLevel=5 then tLod(o).x=2
         if tLodLevel=3 then tLod(o).x=1
         tLod(o).y=1
         tLod(o).z=tLod(o).x
         if tLod(o).x=3 and abs(iLOD)=1 then tLod(o).y=-1
         if tLod(o).x=2 and abs(iLOD)=2 then tLod(o).y=-1
         if abs(iLOD)=3 then tLod(o).y=-1
         if tLod(o).x=3 and abs(iLOD)<2 then tLod(o).z=1
         if tLod(o).x=2 and abs(iLOD)<3 then tLod(o).z=1
         if iLOD=0 then tLod(o).y=1:tLod(o).z=1
         if iLOD=4 or iLOD<0 then tLod(o).y=-1
         if iLOD=4 then tLod(o).z=1
      next o
      Vector4Float(1).w=iCount
      Vector4Float(1).w=1-(0.75/Vector4Float(1).w)
      tStaticBatch=StaticBatch_Create()
      for o=0 to (iCount^2)-1
         Vector4Float(1).x=(tPos(((iCount^2)-1)-o).x/100)*Vector4Float(1).w
         Vector4Float(1).y=(tPos(((iCount^2)-1)-o).y/100)*Vector4Float(1).w
         Vector4Float(2).x=rnd(iRndAngleX)
         Vector4Float(2).z=rnd(iRndAngleZ)
         Vector4Float(2).w=3-tLod(o).x
         Vector4Float(2).w=iScale*(1+(Vector4Float(2).w*(iLODScale/100)))
         if tLod(o).z=1
            tBatchObj=StaticBatch_Add(tStaticBatch)
            StaticBatch_SetPosition(tBatchObj,Vector4Float(1).x,0,(Vector4Float(1).y+100)*tLod(o).y)
            StaticBatch_SetAngle(tBatchObj,Vector4Float(2).x,0,Vector4Float(2).z)
            StaticBatch_SetScale(tBatchObj,Vector4Float(2).w,Vector4Float(2).w,Vector4Float(2).w)
         endif
      next o
      undim tPos()
      undim tLod()
      StaticBatch_MakeObject(tStaticBatch,iObject,iSourceObject,-1)
      StaticBatch_Delete(tStaticBatch)
   endif
endfunction

`----------------------------------------------------
` Terrain Mesh Create
`----------------------------------------------------
function TerrainMesh_Create(iBatch1 as integer,iBatch2 as integer,iBatch3 as integer,iSegments as integer,iBatches as integer,iLayer as integer)
   if Terrain_Enabled>0
      tTerrainMesh=-1
      for x=Terrain_MeshFreeup to Terrain_MeshCount
         if Terrain_Mesh(x).InUse=0 then tTerrainMesh=x:exit
      next x
      if tTerrainMesh=-1
         tTerrainMesh=Terrain_MeshCount+1
         inc Terrain_MeshCount,10
         dim Terrain_Mesh(Terrain_MeshCount)
         dim Terrain_MeshUpdate(Terrain_MeshCount)
         dim Terrain_MeshUpdateSegment(Terrain_MeshCount)
      endif
      if tTerrainMesh>-1
         Terrain_MeshFreeup=tTerrainMesh
         Terrain_MeshUpdate(tTerrainMesh)=1
         Terrain_Mesh(tTerrainMesh).InUse=1
         Terrain_Mesh(tTerrainMesh).Layer=iLayer
         Terrain_Mesh(tTerrainMesh).Visible=1
         Terrain_Mesh(tTerrainMesh).Batches=iBatches
         Terrain_Mesh(tTerrainMesh).Segments=iSegments
         Terrain_Mesh(tTerrainMesh).SegmentCount=0
         Terrain_Mesh(tTerrainMesh).SegmentVisibleCount=-1
         Terrain_Mesh(tTerrainMesh).pSegment=make memory(iSegments*iSegments*4)
         Terrain_Mesh(tTerrainMesh).pSegmentVisible=make memory(iSegments*iSegments*4)
         Terrain_Mesh(tTerrainMesh).Bounds=0
         if iBatch2=-1 then iBatch2=iBatch1
         if iBatch3=-1 then iBatch3=iBatch2
         for x=1 to 3
            if x=1 then tBatch=iBatch1
            if x=2 then tBatch=iBatch2
            if x=3 then tBatch=iBatch3
            if tBatch>-1
               Batch_SetTexture(tBatch,-1,5,Terrain_Image(1))
               tObject=AL_BatchGroup(tBatch).Object
               if Terrain_Mesh(tTerrainMesh).Bounds<object size x(tObject,1) then Terrain_Mesh(tTerrainMesh).Bounds=object size x(tObject,1)
               if Terrain_Mesh(tTerrainMesh).Bounds<object size y(tObject,1) then Terrain_Mesh(tTerrainMesh).Bounds=object size y(tObject,1)
               if Terrain_Mesh(tTerrainMesh).Bounds<object size z(tObject,1) then Terrain_Mesh(tTerrainMesh).Bounds=object size z(tObject,1)
            endif
         next x
         Terrain_Mesh(tTerrainMesh).Batch1=iBatch1
         Terrain_Mesh(tTerrainMesh).Batch2=iBatch2
         Terrain_Mesh(tTerrainMesh).Batch3=iBatch3
         Terrain_Memblock(1)=FreeUpMemblock()
         make memblock Terrain_Memblock(1),12+128*128*4
         write memblock dword Terrain_Memblock(1),0,128
         write memblock dword Terrain_Memblock(1),4,128
         write memblock dword Terrain_Memblock(1),8,32
         Terrain_Mesh(tTerrainMesh).RndImage=FreeUpImage(32500)
         make image from memblock Terrain_Mesh(tTerrainMesh).RndImage,Terrain_Memblock(1)
         delete memblock Terrain_Memblock(1)
         tCount=(iSegments*iBatches)^2
         dim tPos(tCount) as Vec2Float
         tCount=iSegments*iBatches
         x=0:y=0:dx=0:dy=-1
         MinMaxVecReSet()
         for o=0 to ((iSegments*iBatches)^2)-1
            tPos(o).x=x
            tPos(o).y=y
            MinMaxVec(x,y,0)
            if x=y or x<0 and x=-y or x>0 and x=1-y then tCount=dx:dx=-dy:dy=tCount
            inc x,dx:inc y,dy
         next o
         MinMaxPositionSize()
         tCount=(1+iBatches)^2
         dim tBatch(iSegments,iSegments,tCount) as integer
         dim tBatchCount(iSegments,iSegments) as integer
         for o=0 to ((iSegments*iBatches)^2)-1
            tPos(o).x=(tPos(o).x-MinMaxPos.x)*(100/MinMaxSize.x)
            tPos(o).y=(tPos(o).y-MinMaxPos.y)*(100/MinMaxSize.y)
            set vector3 Vector3(1),tPos(o).x,tPos(o).y,0
            if length vector3(Vector3(1))<50
               tSegX#=(tPos(o).x+50)/100.1
               tSegX=floor(tSegX#*iSegments)
               tSegY#=(tPos(o).y+50)/100.1
               tSegY=floor(tSegY#*iSegments)
               tBatch(tSegX,tSegY,tBatchCount(tSegX,tSegY))=o
               inc tBatchCount(tSegX,tSegY)
            endif
         next o
         for x=0 to iSegments-1
            for y=0 to iSegments-1
               if tBatchCount(x,y)>0
                  Vector4Float(0).x=iSegments
                  set vector3 Vector3(1),x-(Vector4Float(0).x/2),y-(Vector4Float(0).x/2),0
                  QuickSortVal(Terrain_Mesh(tTerrainMesh).SegmentCount)=100*length vector3(Vector3(1))
                  QuickSortID(Terrain_Mesh(tTerrainMesh).SegmentCount)=(y*iSegments)+x
                  inc Terrain_Mesh(tTerrainMesh).SegmentCount
               endif
            next y
         next x
         QuickSortArray(0,Terrain_Mesh(tTerrainMesh).SegmentCount-1)
         for s=0 to Terrain_Mesh(tTerrainMesh).SegmentCount-1
            tY=floor(QuickSortID(s)/iSegments)
            tX=QuickSortID(s)-(tY*iSegments)
            tTerrainMeshSegment=-1
            for x=Terrain_MeshSegmentFreeup to Terrain_MeshSegmentCount
               if Terrain_MeshSegment(x).InUse=0 then tTerrainMeshSegment=x:exit
            next x
            if tTerrainMeshSegment=-1
               tTerrainMeshSegment=Terrain_MeshSegmentCount+1
               inc Terrain_MeshSegmentCount,100
               dim Terrain_MeshSegment(Terrain_MeshSegmentCount)
            endif
            Terrain_MeshSegmentFreeup=tTerrainMeshSegment
            Terrain_MeshSegment(tTerrainMeshSegment).InUse=1
            Terrain_MeshSegment(tTerrainMeshSegment).Position.x=tX
            Terrain_MeshSegment(tTerrainMeshSegment).Position.y=tY
            Terrain_MeshSegment(tTerrainMeshSegment).BatchCount=tBatchCount(tX,tY)-1
            Terrain_MeshSegment(tTerrainMeshSegment).pBatch=make memory(tBatchCount(tX,tY)*4)
            Terrain_MeshSegment(tTerrainMeshSegment).Bounds=FrustumCulling_AddBounds(tTerrainMeshSegment,7)
            FrustumCulling_SetDrawDistance(Terrain_MeshSegment(tTerrainMeshSegment).Bounds,iSegments)
            PokeInteger(Terrain_Mesh(tTerrainMesh).pSegment+s*4,tTerrainMeshSegment)
            for c=0 to tBatchCount(tX,tY)-1
               tTerrainMeshBatch=-1
               for x=Terrain_MeshBatchFreeup to Terrain_MeshBatchCount
                  if Terrain_MeshBatch(x).InUse=0 then tTerrainMeshBatch=x:exit
               next x
               if tTerrainMeshBatch=-1
                  tTerrainMeshBatch=Terrain_MeshBatchCount+1
                  inc Terrain_MeshBatchCount,100
                  dim Terrain_MeshBatch(Terrain_MeshBatchCount)
               endif
               Terrain_MeshBatchFreeup=tTerrainMeshBatch
               Terrain_MeshBatch(tTerrainMeshBatch).InUse=1
               Terrain_MeshBatch(tTerrainMeshBatch).Batch=Terrain_Mesh(tTerrainMesh).Batch3
               Terrain_MeshBatch(tTerrainMeshBatch).Position.x=tPos(tBatch(tX,tY,c)).x/100
               Terrain_MeshBatch(tTerrainMeshBatch).Position.y=tPos(tBatch(tX,tY,c)).y/100
               PokeInteger(Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4,tTerrainMeshBatch)
            next c
         next s
         undim tPos()
         undim tBatch()
         undim tBatchCount()
      endif
      TerrainMesh_SetRange(tTerrainMesh,14000)
      TerrainMesh_SetSlope(tTerrainMesh,0,100)
      TerrainMesh_SetHeight(tTerrainMesh,0,100)
   endif
endfunction tTerrainMesh

`----------------------------------------------------
` Terrain Mesh Delete
`----------------------------------------------------
function TerrainMesh_Delete(iTerrainMesh as integer)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      for s=0 to Terrain_Mesh(iTerrainMesh).SegmentCount-1
         tTerrainMeshSegment=Terrain_Mesh(iTerrainMesh).pSegment+s*4
         tTerrainMeshSegment= *tTerrainMeshSegment
         for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
            tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4
            tTerrainMeshBatch= *tTerrainMeshBatch
            Terrain_MeshBatch(tTerrainMeshBatch).InUse=0
            if Terrain_MeshBatchFreeup>tTerrainMeshBatch then Terrain_MeshBatchFreeup=tTerrainMeshBatch
         next c
         Terrain_MeshSegment(tTerrainMeshSegment).InUse=0
         if Terrain_MeshSegmentFreeup>tTerrainMeshSegment then Terrain_MeshSegmentFreeup=tTerrainMeshSegment
         delete memory Terrain_MeshSegment(tTerrainMeshSegment).pBatch
      next s
      Terrain_Mesh(iTerrainMesh).InUse=0
      Terrain_MeshUpdate(iTerrainMesh)=0
      Terrain_MeshUpdateSegment(iTerrainMesh)=0
      if Terrain_MeshFreeup>tTerrainMesh then Terrain_MeshFreeup=tTerrainMesh
      delete memory Terrain_Mesh(iTerrainMesh).pSegment
      delete memory Terrain_Mesh(iTerrainMesh).pSegmentVisible
   endif
endfunction

`----------------------------------------------------
` Terrain Mesh Set Visible
`----------------------------------------------------
function TerrainMesh_SetVisible(iTerrainMesh as integer,iVisible as boolean)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      Terrain_Mesh(iTerrainMesh).Visible=iVisible
   endif
endfunction

`----------------------------------------------------
` Terrain Set Range
`----------------------------------------------------
function TerrainMesh_SetRange(iTerrainMesh as integer,iRange as float)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      Terrain_Mesh(iTerrainMesh).Range=iRange
      Terrain_MeshUpdate(iTerrainMesh)=1
      Terrain_MeshUpdateSegment(iTerrainMesh)=0
   endif
endfunction

`----------------------------------------------------
` Terrain Set Slope
`----------------------------------------------------
function TerrainMesh_SetSlope(iTerrainMesh as integer,iMin as float,iMax as float)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      Terrain_Mesh(iTerrainMesh).SlopeMin=iMin/100
      Terrain_Mesh(iTerrainMesh).SlopeMax=iMax/100
      Terrain_MeshUpdate(iTerrainMesh)=1
      Terrain_MeshUpdateSegment(iTerrainMesh)=0
   endif
endfunction

`----------------------------------------------------
` Terrain Set Height
`----------------------------------------------------
function TerrainMesh_SetHeight(iTerrainMesh as integer,iMin as float,iMax as float)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      Terrain_Mesh(iTerrainMesh).HeightMin=iMin*2.55
      Terrain_Mesh(iTerrainMesh).HeightMax=iMax*2.55
      Terrain_MeshUpdate(iTerrainMesh)=1
      Terrain_MeshUpdateSegment(iTerrainMesh)=0
   endif
endfunction

`----------------------------------------------------
` Terrain Set Randomization
`----------------------------------------------------
function TerrainMesh_SetRandomization(iTerrainMesh as integer,iRndPosition as float,iRndScale as float,iRndAngle as float)
   if Terrain_Mesh(iTerrainMesh).InUse=1
      randomize 0
      tRndPos=(iRndPosition/100)*254
      if tRndPos>254 then tRndPos=254
      if tRndPos<0 then tRndPos=0
      tRndSize=(iRndScale/1000)*255
      if tRndSize>255 then tRndSize=255
      if tRndSize<0 then tRndSize=0
      tRndAngle=(iRndAngle/360)*255
      if tRndAngle>255 then tRndAngle=255
      if tRndAngle<0 then tRndAngle=0
      Terrain_Memblock(1)=FreeUpMemblock()
      make memblock Terrain_Memblock(1),12+128*128*4
      write memblock dword Terrain_Memblock(1),0,128
      write memblock dword Terrain_Memblock(1),4,128
      write memblock dword Terrain_Memblock(1),8,32
      for x=0 to 127
         for z=0 to 127
            Pos=12+(z*512)+(x*4)
            write memblock byte Terrain_Memblock(1),Pos+2,127+(rnd(tRndPos)-tRndPos*0.5)
            write memblock byte Terrain_Memblock(1),Pos+1,127+(rnd(tRndPos)-tRndPos*0.5)
            write memblock byte Terrain_Memblock(1),Pos+0,rnd(tRndAngle)
            write memblock byte Terrain_Memblock(1),Pos+3,rnd(tRndSize)
         next z
      next x
      delete image Terrain_Mesh(iTerrainMesh).RndImage
      make image from memblock Terrain_Mesh(iTerrainMesh).RndImage,Terrain_Memblock(1)
      delete memblock Terrain_Memblock(1)
      Batch_SetTexture(Terrain_Mesh(iTerrainMesh).Batch1,-1,7,Terrain_Mesh(iTerrainMesh).RndImage)
      Batch_SetTexture(Terrain_Mesh(iTerrainMesh).Batch2,-1,7,Terrain_Mesh(iTerrainMesh).RndImage)
      Batch_SetTexture(Terrain_Mesh(iTerrainMesh).Batch3,-1,7,Terrain_Mesh(iTerrainMesh).RndImage)
   endif
endfunction

`----------------------------------------------------
` Update Terrain Mesh
`----------------------------------------------------
function TerrainMesh_Update()
   if Terrain_Enabled=1
      for m=0 to Terrain_MeshCount
         if Terrain_Mesh(m).InUse=1 and Terrain_Mesh(m).Visible=1
            if Terrain_MeshUpdate(m)=0
               Vector4Float(1).w=Terrain_Mesh(m).Range/((Terrain_Mesh(m).Batches*Terrain_Mesh(m).Segments)-1)
               Vector4Float(1).x=floor((AL_CameraPos.x+(Vector4Float(1).w/2))/Vector4Float(1).w)*Vector4Float(1).w
               Vector4Float(1).y=floor((AL_CameraPos.z+(Vector4Float(1).w/2))/Vector4Float(1).w)*Vector4Float(1).w
               Vector4Float(1).z=floor((AL_CameraPos.y+(Vector4Float(1).w/2))/Vector4Float(1).w)*Vector4Float(1).w
               if Terrain_Mesh(m).Position.x<>Vector4Float(1).x or Terrain_Mesh(m).Position.y<>Vector4Float(1).y or Terrain_Mesh(m).Position.z<>Vector4Float(1).z
                  Terrain_Mesh(m).PositionTemp.x=Vector4Float(1).x
                  Terrain_Mesh(m).PositionTemp.y=Vector4Float(1).y
                  Terrain_Mesh(m).Position.z=Vector4Float(1).z
                  Terrain_MeshUpdate(m)=1
                  Terrain_MeshUpdateSegment(m)=0
                  exit
               endif
            else
               Vector4Float(1).z=Terrain_Mesh(m).Range/(Terrain_Mesh(m).Segments-1)
               Vector4Float(1).w=(Terrain_Mesh(m).Range/((Terrain_Mesh(m).Batches*Terrain_Mesh(m).Segments)-1))*0.333
               tBatchUpDate=0
               for s=0 to 16
                  tTerrainMeshSegment=Terrain_Mesh(m).pSegment+Terrain_MeshUpdateSegment(m)*4
                  tTerrainMeshSegment= *tTerrainMeshSegment
                  MinVec.y=999999:MaxVec.y=-999999
                  Terrain_MeshSegment(tTerrainMeshSegment).Visible=0
                  for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                     tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4
                     tTerrainMeshBatch= *tTerrainMeshBatch
                     Vector4Float(2).x=(Terrain_MeshBatch(tTerrainMeshBatch).Position.x*Terrain_Mesh(m).Range)+Terrain_Mesh(m).PositionTemp.x
                     Vector4Float(2).y=(Terrain_MeshBatch(tTerrainMeshBatch).Position.y*Terrain_Mesh(m).Range)+Terrain_Mesh(m).PositionTemp.y
                     tBatchVisible=0
                     for o=1 to 9
                        Vector4Float(3).x=Vector4Float(2).x+(Vector4Float(1).w*Terrain_MeshOffset(o).x)
                        Vector4Float(3).y=Vector4Float(2).y+(Vector4Float(1).w*Terrain_MeshOffset(o).y)
                        tx=int((Vector4Float(3).x+(Terrain_TileSize*(Terrain_Size/2))+(Terrain_TileSize/2))/Terrain_TileSize)
                        tz=int((Vector4Float(3).y+(Terrain_TileSize*(Terrain_Size/2))+(Terrain_TileSize/2))/Terrain_TileSize)
                        if tx>-1 and tz>-1 and tx<Terrain_Size and tz<Terrain_Size
                           tPos=(tz*(Terrain_Size+2))+tx
                           if PeekByte4(Terrain_pLayerA+tPos*4)=Terrain_Mesh(m).Layer
                              Vector4Float(0).w=PeekByte3(Terrain_pHeight+tPos*4)
                              if Vector4Float(0).w=>Terrain_Mesh(m).HeightMin and Vector4Float(0).w=<Terrain_Mesh(m).HeightMax
                                 Vector4Float(0).x=PeekByte1(Terrain_pHeight+tPos*4)
                                 Vector4Float(0).z=PeekByte2(Terrain_pHeight+tPos*4)
                                 Vector4Float(0).x=(Vector4Float(0).x/255)*2-1
                                 Vector4Float(0).z=(Vector4Float(0).z/255)*2-1
                                 Vector4Float(0).y=sqrt(1-(Vector4Float(0).x*Vector4Float(0).x)-(Vector4Float(0).z*Vector4Float(0).z))
                                 if Vector4Float(0).y>Terrain_Mesh(m).SlopeMin and Vector4Float(0).y<Terrain_Mesh(m).SlopeMax
                                    Vector4Float(2).w=PeekByte3(Terrain_pHeight+tPos*4)+(Vector4Float(2).w/255)
                                    if Vector4Float(2).w<MinVec.y then MinVec.y=Vector4Float(2).w
                                    if Vector4Float(2).w>MaxVec.y then MaxVec.y=Vector4Float(2).w
                                    tBatchVisible=1
                                    exit
                                 endif
                              endif
                           endif
                        endif
                     next o
                     Terrain_MeshBatch(tTerrainMeshBatch).PositionHeight=Vector4Float(2).w*(Terrain_Height/255)
                     if tBatchVisible=1 then Terrain_MeshBatch(tTerrainMeshBatch).VisibleTemp=1 else Terrain_MeshBatch(tTerrainMeshBatch).VisibleTemp=0
                     if Terrain_MeshBatch(tTerrainMeshBatch).VisibleTemp=1 then Terrain_MeshSegment(tTerrainMeshSegment).Visible=1
                  next c
                  MinVec.y=MinVec.y*(Terrain_Height/255)
                  MaxVec.y=MaxVec.y*(Terrain_Height/255)
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.x=Terrain_Mesh(m).PositionTemp.x+((Terrain_MeshSegment(tTerrainMeshSegment).Position.x*Vector4Float(1).z))-(Terrain_Mesh(m).Range/2)
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.y=MinVec.y+((MaxVec.y-MinVec.y)*0.5)
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.z=Terrain_Mesh(m).PositionTemp.y+((Terrain_MeshSegment(tTerrainMeshSegment).Position.y*Vector4Float(1).z))-(Terrain_Mesh(m).Range/2)
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.x=Vector4Float(1).z
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.y=MaxVec.y-MinVec.y
                  Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.z=Vector4Float(1).z
                  inc Terrain_MeshUpdateSegment(m)
                  if Terrain_MeshUpdateSegment(m)>Terrain_Mesh(m).SegmentCount-1
                     Terrain_Mesh(m).Position.x=Terrain_Mesh(m).PositionTemp.x
                     Terrain_Mesh(m).Position.y=Terrain_Mesh(m).PositionTemp.y
                     Terrain_Mesh(m).SegmentVisibleCount=-1
                     for x=0 to Terrain_Mesh(m).SegmentCount-1
                        tTerrainMeshSegment=Terrain_Mesh(m).pSegment+x*4
                        tTerrainMeshSegment= *tTerrainMeshSegment
                        tVisible=0
                        if Terrain_MeshSegment(tTerrainMeshSegment).Visible=1
                           FrustumCulling_SetBounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds,Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.x,Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.y,Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.z,Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.x*2,Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.y,Terrain_MeshSegment(tTerrainMeshSegment).BoundsScale.z*2)
                           set vector3 Vector3(1),AL_CameraPos.x-Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.x,AL_CameraPos.y-Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.y,AL_CameraPos.z-Terrain_MeshSegment(tTerrainMeshSegment).BoundsPosition.z
                           if length vector3(Vector3(1))/VFC_Bounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds).Radious<VFC_Bounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds).DrawDistance*0.5
                              for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                                 tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4
                                 tTerrainMeshBatch= *tTerrainMeshBatch
                                 Terrain_MeshBatch(tTerrainMeshBatch).Visible=0
                                 if Terrain_MeshBatch(tTerrainMeshBatch).VisibleTemp=1
                                    Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x=(Terrain_MeshBatch(tTerrainMeshBatch).Position.x*Terrain_Mesh(m).Range)+Terrain_Mesh(m).Position.x
                                    Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.y=Terrain_MeshBatch(tTerrainMeshBatch).PositionHeight
                                    Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z=(Terrain_MeshBatch(tTerrainMeshBatch).Position.y*Terrain_Mesh(m).Range)+Terrain_Mesh(m).Position.y
                                    Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w=Terrain_Mesh(m).Range/(Terrain_Mesh(m).Batches*Terrain_Mesh(m).Segments)
                                    set vector3 Vector3(1),AL_CameraPos.x-Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,AL_CameraPos.y-Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.y,AL_CameraPos.z-Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z
                                    if length vector3(Vector3(1))<Terrain_Mesh(m).Range*0.5
                                       Terrain_MeshBatch(tTerrainMeshBatch).Visible=1
                                       Terrain_MeshBatch(tTerrainMeshBatch).Batch=Terrain_Mesh(m).Batch3:Terrain_MeshBatch(tTerrainMeshBatch).LodStage=Terrain_Mesh(m).Range*0.5
                                       if length vector3(Vector3(1))<(Terrain_Mesh(m).Range*0.5)*0.666 then Terrain_MeshBatch(tTerrainMeshBatch).Batch=Terrain_Mesh(m).Batch2:Terrain_MeshBatch(tTerrainMeshBatch).LodStage=((Terrain_Mesh(m).Range*0.5)*0.666)-Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w
                                       if length vector3(Vector3(1))<(Terrain_Mesh(m).Range*0.5)*0.333 then Terrain_MeshBatch(tTerrainMeshBatch).Batch=Terrain_Mesh(m).Batch1:Terrain_MeshBatch(tTerrainMeshBatch).LodStage=((Terrain_Mesh(m).Range*0.5)*0.333)-Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w
                                       tVisible=1
                                    endif
                                 endif
                              next c
                           endif
                        endif
                        if tVisible=1
                           inc Terrain_Mesh(m).SegmentVisibleCount
                           PokeInteger(Terrain_Mesh(m).pSegmentVisible+Terrain_Mesh(m).SegmentVisibleCount*4,tTerrainMeshSegment)
                        endif
                        FrustumCulling_SetBoundsVisible(Terrain_MeshSegment(tTerrainMeshSegment).Bounds,tVisible)
                     next x
                     Terrain_MeshUpdate(m)=0
                     exit
                  endif
                  inc tBatchUpDate,Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                  if tBatchUpDate>250 then exit
               next s
            endif
         endif
      next m
   endif
endfunction


`----------------------------------------------------
`Show Terrain Mesh
   _TerrainMesh_Show:
      if Terrain_Enabled=1
         if VFC_OccludeIndex>0
            for m=0 to Terrain_MeshCount
               if Terrain_Mesh(m).InUse=1 and Terrain_Mesh(m).Visible=1
                  if VFC_OccludeIndex=1
                     for s=0 to Terrain_Mesh(m).SegmentVisibleCount
                        tTerrainMeshSegment=Terrain_Mesh(m).pSegmentVisible+s*4
                        tTerrainMeshSegment= *tTerrainMeshSegment
                        if VFC_Bounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds).Occlude.x=0
                           tCull=FrustumCulling_BoundsInFrustumPartially(Terrain_MeshSegment(tTerrainMeshSegment).Bounds)
                           if tCull=8
                              for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                                 tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4
                                 tTerrainMeshBatch= *tTerrainMeshBatch
                                 if Terrain_MeshBatch(tTerrainMeshBatch).Visible=1
                                    tBatchGroup=Terrain_MeshBatch(tTerrainMeshBatch).Batch
                                    Batch_Draw(tBatchGroup)
                                    pEffect=PeekDword(AL_BatchGroup(tBatchGroup).pEffect+(AL_BatchGroup(tBatchGroup).DrawCount*4))
                                    Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat1+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w,Terrain_MeshBatch(tTerrainMeshBatch).LodStage,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z
                                    Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat2+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_Mesh(m).SlopeMin,Terrain_Mesh(m).SlopeMax,Terrain_Mesh(m).Layer,Terrain_Mesh(m).Range/16
                                 endif
                              next c
                           else
                              if tCull>0
                                 for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                                    tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+c*4
                                    tTerrainMeshBatch= *tTerrainMeshBatch
                                    if Terrain_MeshBatch(tTerrainMeshBatch).Visible=1
                                       if GetSphereInFrustum(VFC_FrustumIndex,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.y,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w*1.5)=1
                                          tBatchGroup=Terrain_MeshBatch(tTerrainMeshBatch).Batch
                                          Batch_Draw(tBatchGroup)
                                          pEffect=PeekDword(AL_BatchGroup(tBatchGroup).pEffect+(AL_BatchGroup(tBatchGroup).DrawCount*4))
                                          Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat1+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w,Terrain_MeshBatch(tTerrainMeshBatch).LodStage,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z
                                          Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat2+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_Mesh(m).SlopeMin,Terrain_Mesh(m).SlopeMax,Terrain_Mesh(m).Layer,Terrain_Mesh(m).Range/16
                                       endif
                                    endif
                                 next c
                              endif
                           endif
                        endif
                     next s
                  else
                     if Terrain_Mesh(m).SegmentVisibleCount>-1
                        tTerrainMeshSegment=Terrain_Mesh(m).pSegmentVisible
                        tTerrainMeshSegment= *tTerrainMeshSegment
                        tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch
                        tTerrainMeshBatch= *tTerrainMeshBatch
                        tBatchGroup=Terrain_MeshBatch(tTerrainMeshBatch).Batch
                        if VFC_OccludeIndex<AL_BatchGroup(tBatchGroup).MaskDirectionalShadow+2 and Terrain_Mesh(m).Bounds>VFC_DirectionalRange
                           for s=0 to Terrain_Mesh(m).SegmentVisibleCount
                              tTerrainMeshSegment=Terrain_Mesh(m).pSegmentVisible+(Terrain_Mesh(m).SegmentVisibleCount-s)*4
                              tTerrainMeshSegment= *tTerrainMeshSegment
                              if VFC_OccludeIndex<4 then tOcc=VFC_Bounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds).Occlude.y else tOcc=VFC_Bounds(Terrain_MeshSegment(tTerrainMeshSegment).Bounds).Occlude.z
                              if tOcc=0
                                 tCull=FrustumCulling_BoundsInFrustumPartially(Terrain_MeshSegment(tTerrainMeshSegment).Bounds)
                                 if tCull=8
                                    for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                                       tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+(Terrain_MeshSegment(tTerrainMeshSegment).BatchCount-c)*4
                                       tTerrainMeshBatch= *tTerrainMeshBatch
                                       tBatchGroup=Terrain_MeshBatch(tTerrainMeshBatch).Batch
                                       if Terrain_MeshBatch(tTerrainMeshBatch).Visible=1
                                          Batch_Draw(tBatchGroup)
                                          pEffect=PeekDword(AL_BatchGroup(tBatchGroup).pEffect+(AL_BatchGroup(tBatchGroup).DrawCount*4))
                                          Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat1+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w,Terrain_MeshBatch(tTerrainMeshBatch).LodStage,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z
                                          Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat2+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_Mesh(m).SlopeMin,Terrain_Mesh(m).SlopeMax,Terrain_Mesh(m).Layer,Terrain_Mesh(m).Range/16
                                       endif
                                    next c
                                 else
                                    if tCull>0
                                       for c=0 to Terrain_MeshSegment(tTerrainMeshSegment).BatchCount
                                          tTerrainMeshBatch=Terrain_MeshSegment(tTerrainMeshSegment).pBatch+(Terrain_MeshSegment(tTerrainMeshSegment).BatchCount-c)*4
                                          tTerrainMeshBatch= *tTerrainMeshBatch
                                          tBatchGroup=Terrain_MeshBatch(tTerrainMeshBatch).Batch
                                          if Terrain_MeshBatch(tTerrainMeshBatch).Visible=1
                                             if GetSphereInFrustum(VFC_FrustumIndex,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.y,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w*1.5)=1
                                                Batch_Draw(tBatchGroup)
                                                pEffect=PeekDword(AL_BatchGroup(tBatchGroup).pEffect+(AL_BatchGroup(tBatchGroup).DrawCount*4))
                                                Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat1+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.w,Terrain_MeshBatch(tTerrainMeshBatch).LodStage,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.x,Terrain_MeshBatch(tTerrainMeshBatch).PositionWorld.z
                                                Shader_SetVectorVal pEffect,PeekDword(AL_BatchGroup(tBatchGroup).pWMat2+(AL_BatchGroup(tBatchGroup).DrawCount*4)),Terrain_Mesh(m).SlopeMin,Terrain_Mesh(m).SlopeMax,Terrain_Mesh(m).Layer,Terrain_Mesh(m).Range/16
                                             endif
                                          endif
                                       next c
                                    endif
                                 endif
                              endif
                           next s
                        endif
                     endif
                  endif
               endif
            next m
         endif
      endif
   return

`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================

`----------------------------------------------------
` Ocean Create
`----------------------------------------------------
function Ocean_Create(iQuality as integer,iAnisotropy as integer)
   if AL_Ocean=0 and Terrain_Enabled>0
      global AL_Ocean as boolean
      global AL_OceanObject as integer
      global AL_OceanEffect as integer
      global AL_OceanALEffect as integer
      global AL_OceanVisible as boolean
      global AL_OceanImage as integer
      global AL_OceanTextureSize as Vec2Integer
      global AL_OceanSize as float
      global AL_OceanExtension as float
      global AL_OceanHeight as float
      global AL_OceanDisplacement as Vec3Float
      global AL_OceanScale as Vec3Float
      global AL_OceanAngle as Vec2Float
      global AL_OceanSpeed as Vec2Float
      global AL_OceanNormals as Vec3Float
      global AL_OceanFoam as Vec4Float
      global AL_OceanFoamSpeed as Vec2Float
      global AL_OceanFogRange as float
      global AL_OceanFogHeight as float
      global AL_OceanFogDepth as float
      global AL_OceanFogColor1 as Vec3Float
      global AL_OceanFogColor2 as Vec3Float
      global dim AL_OceanAmp(16) as Vec4Float
      global dim AL_OceanDir(16) as Vec4Float
      AL_Ocean=1
      AL_OceanImage=FreeUpImage(32500)
      load image AL_Directory+"Resources\waves.dds",AL_OceanImage
      tMemblock=FreeUpMemblock()
      make memblock from image tMemblock,AL_OceanImage
      AL_OceanTextureSize.x=memblock dword(tMemblock,0)
      AL_OceanTextureSize.y=memblock dword(tMemblock,4)
      global dim AL_OceanTextureNormalX(AL_OceanTextureSize.x,AL_OceanTextureSize.y) as byte
      global dim AL_OceanTextureNormalY(AL_OceanTextureSize.x,AL_OceanTextureSize.y) as byte
      global dim AL_OceanTextureHeight(AL_OceanTextureSize.x,AL_OceanTextureSize.y) as byte
      for x=0 to AL_OceanTextureSize.x-1
         for y=0 to AL_OceanTextureSize.y-1
            tPos=12+(y*4*AL_OceanTextureSize.x)+(x*4)
            AL_OceanTextureNormalX(x,y)=memblock byte(tMemblock,tPos+2)
            AL_OceanTextureNormalY(x,y)=memblock byte(tMemblock,tPos+1)
            AL_OceanTextureHeight(x,y)=memblock byte(tMemblock,tPos+3)
         next y
      next x
      delete memblock tMemblock
      AL_OceanEffect=FreeUpEffect(32500)
      AL_OceanALEffect=WaterEffect_Load(AL_Directory+"Terrain\Ocean.fx",AL_OceanEffect,iQuality,iAnisotropy)
      AL_OceanObject=FreeUpObject(32500)
      load object AL_Directory+"Resources\Water.dbo",AL_OceanObject
      set object effect AL_OceanObject,AL_OceanEffect
      texture object AL_OceanObject,1,AL_ImageMRT(1)
      texture object AL_OceanObject,2,AL_Image(2)
      texture object AL_OceanObject,3,AL_Image(5)
      texture object AL_OceanObject,4,AL_DirLightImage(3)
      texture object AL_OceanObject,5,AL_Image(22)
      texture object AL_OceanObject,6,AL_OceanImage
      texture object AL_OceanObject,7,AL_OceanImage
      set object mask AL_OceanObject,(2^AL_Camera(0))+(2^AL_Camera(3))
      set object radius AL_OceanObject,9999^9999
      set object transparency AL_OceanObject,2
      exclude object on AL_OceanObject
      set vector4 Vector4(1),AL_OceanTextureSize.x,AL_OceanTextureSize.y,AL_OceanTextureSize.x,AL_OceanTextureSize.y
      set effect constant vector AL_OceanEffect,"TextureScale",Vector4(1)
      set vector4 Vector4(1),1.0/AL_OceanTextureSize.x,1.0/AL_OceanTextureSize.y,0,0
      set effect constant vector AL_OceanEffect,"TextureOffset",Vector4(1)
      if Terrain_Enabled=1
         texture object AL_OceanObject,0,Terrain_Image(2)
         set effect constant float AL_OceanEffect,"TerrainHeight",Terrain_Height/255
         set vector4 Vector4(1),Terrain_Size*Terrain_TileSize,0.5+(0.5/Terrain_BaseSize),0,0
         set effect constant vector AL_OceanEffect,"TerrainScale",Vector4(1)
      endif
      AL_OceanVisible=1
      Ocean_SetSize(20,10)
      Ocean_SetHeight(0)
      Ocean_SetFlow(12500,3,0,10,8,2.0)
      Ocean_SetDisplacement(200,50,1)
      Ocean_SetEdge(0.5)
      Ocean_SetNormals(1,1000,0.9)
      Ocean_SetColor(150,185,180,65,68,70,60)
      Ocean_SetFoam(1000,0.25,0.025,1)
      Ocean_SetFog(1000,800,0.002)
      Ocean_SetFogColor(60,70,75,30,50,70)
   endif
endfunction

`----------------------------------------------------
` Delete Ocean
`----------------------------------------------------
function Ocean_Delete()
   if AL_Ocean=1
      AL_Ocean=0
      AL_OceanVisible=0
      Ocean_SetUnderWater(0)
      WaterEffect_Remove(AL_OceanALEffect)
      delete object AL_OceanObject
      delete effect AL_OceanEffect
      delete image AL_OceanImage
      undim AL_OceanTextureNormalX()
      undim AL_OceanTextureNormalY()
      undim AL_OceanTextureHeight()
   endif
endfunction

`----------------------------------------------------
` Set Ocean Visible
`----------------------------------------------------
function Ocean_SetVisible(iVisible as boolean)
   if AL_Ocean=1
      AL_OceanVisible=iVisible
      if AL_OceanVisible=1 then show object AL_OceanObject else hide object AL_OceanObject
   endif
endfunction

`----------------------------------------------------
` Set Ocean Size
`----------------------------------------------------
function Ocean_SetSize(iTileSize as float,iExtension as float)
   if AL_Ocean=1
      AL_OceanSize=iTileSize
      AL_OceanExtension=iExtension
      set vector4 Vector4(1),AL_OceanSize,AL_OceanSize*116*2,AL_OceanSize*AL_OceanExtension,AL_OceanSize*AL_OceanExtension*116
      set effect constant vector AL_OceanEffect,"OceanScale",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Ocean Height
`----------------------------------------------------
function Ocean_SetHeight(iHeight as float)
   if AL_Ocean=1
      AL_OceanHeight=iHeight
      set effect constant float AL_OceanEffect,"OceanHeight",AL_OceanHeight
      set effect constant float AL_OceanEffect,"OceanWaveHeight",AL_OceanHeight+AL_OceanDisplacement.x*0.5
   endif
endfunction

`----------------------------------------------------
` Set Ocean Flow
`----------------------------------------------------
function Ocean_SetFlow(iScale as float,iScaleInc as float,iAngle as float,iAngleInc as float,iSpeed as float,iSpeedInc as float)
   if AL_Ocean=1
      AL_OceanScale.x=iScale
      AL_OceanScale.y=iScaleInc
      AL_OceanScale.z=1/AL_OceanScale.y
      AL_OceanAngle.x=iAngle
      AL_OceanAngle.y=iAngleInc
      AL_OceanSpeed.x=iSpeed
      AL_OceanSpeed.y=iSpeedInc
   endif
endfunction

`----------------------------------------------------
` Set Ocean Displacement
`----------------------------------------------------
function Ocean_SetDisplacement(iHeight as float,iSwell as float,iRoughness as float)
   if AL_Ocean=1
      AL_OceanDisplacement.x=iHeight
      AL_OceanDisplacement.y=iSwell
      AL_OceanDisplacement.z=iRoughness
      set vector4 Vector4(1),-iSwell,iHeight,-iSwell,0
      set effect constant vector AL_OceanEffect,"OceanDisplacement",Vector4(1)
      set effect constant float AL_OceanEffect,"OceanWaveHeight",AL_OceanHeight+AL_OceanDisplacement.x*0.5
      set effect constant float AL_OceanEffect,"OceanRoughness",0.05+(AL_OceanDisplacement.z/100)*0.95
   endif
endfunction

`----------------------------------------------------
` Set Ocean Edge
`----------------------------------------------------
function Ocean_SetEdge(iEdgeSoftness as float)
   if AL_Ocean=1 then set effect constant float AL_OceanEffect,"EdgeSoftness",iEdgeSoftness
endfunction

`----------------------------------------------------
` Set Ocean Normals
`----------------------------------------------------
function Ocean_SetNormals(iIntencity as float,iRange as float,iFalloff as float)
   if AL_Ocean=1
      AL_OceanNormals.x=iIntencity
      AL_OceanNormals.y=iRange
      AL_OceanNormals.z=iFalloff
      set vector4 Vector4(1),iIntencity,iRange,0,0
      set effect constant vector AL_OceanEffect,"OceanNormals",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Ocean Color
`----------------------------------------------------
function Ocean_SetColor(iSubSurfaceRed as float,iSubSurfaceGreen as float,iSubSurfaceBlue as float,iReflectionRed as float,iReflectionGreen as float,iReflectionBlue as float,iReflectionInt as float)
   if AL_Ocean=1
      set vector4 Vector4(1),(iSubSurfaceRed/255)^2.2,(iSubSurfaceGreen/255)^2.2,(iSubSurfaceBlue/255)^2.2,0
      set effect constant vector AL_OceanEffect,"OceanSubSurfaceColor",Vector4(1)
      set vector4 Vector4(1),(iReflectionRed/255)^2.2,(iReflectionGreen/255)^2.2,(iReflectionBlue/255)^2.2,iReflectionInt/100
      set effect constant vector AL_OceanEffect,"OceanReflectionColor",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Ocean Foam
`----------------------------------------------------
function Ocean_SetFoam(iFoamScale as float,iFoamSpeed as float,iFoamShoreLine as float,iFoamIntencity as float)
   if AL_Ocean=1
      AL_OceanFoam.x=iFoamScale
      AL_OceanFoam.y=iFoamSpeed
      AL_OceanFoam.z=iFoamShoreLine
      AL_OceanFoam.w=iFoamIntencity
      set effect constant float AL_OceanEffect,"OceanShoreLine",iFoamShoreLine
      set effect constant float AL_OceanEffect,"OceanFoamIntencity",iFoamIntencity
   endif
endfunction

`----------------------------------------------------
` Set Ocean Fog
`----------------------------------------------------
function Ocean_SetFog(iRange as float,iHeight as float,iDepth as float)
   if AL_Ocean=1
      AL_OceanFogRange=iRange
      AL_OceanFogHeight=iHeight
      AL_OceanFogDepth=iDepth
      set vector4 Vector4(1),iRange,iHeight,iDepth,0
      set effect constant vector AL_OceanEffect,"OceanFogRange",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Ocean Fog Color
`----------------------------------------------------
function Ocean_SetFogColor(iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_Ocean=1
      AL_OceanFogColor1.x=iRed1
      AL_OceanFogColor1.y=iGreen1
      AL_OceanFogColor1.z=iBlue1
      AL_OceanFogColor2.x=iRed2
      AL_OceanFogColor2.y=iGreen2
      AL_OceanFogColor2.z=iBlue2
      set vector4 Vector4(1),(iRed1/255)^2.2,(iGreen1/255)^2.2,(iBlue1/255)^2.2,0
      set effect constant vector AL_OceanEffect,"OceanFogColor1",Vector4(1)
      set vector4 Vector4(1),(iRed2/255)^2.2,(iGreen2/255)^2.2,(iBlue2/255)^2.2,0
      set effect constant vector AL_OceanEffect,"OceanFogColor2",Vector4(1)
   endif
endfunction

`----------------------------------------------------
` Set Ocean Under Water
`----------------------------------------------------
function Ocean_SetUnderWater(iUnderWater as boolean)
   if AL_Ocean=1
      if iUnderWater=1
         if AL_WaterUnder>-1 and AL_WaterUnder<10000 then AL_WaterObject(AL_WaterUnder).UnderWater=0
         AL_WaterUnder=10000
         exclude object off AL_WaterFogObject
         if AL_PostFilter=1 then AL_WaterSplash.w=32
      else
         if AL_WaterUnder=10000
            AL_WaterUnder=-1
            exclude object on AL_WaterFogObject
            PostFilter_WaterSplash()
         endif
      endif
   endif
endfunction

`----------------------------------------------------
` Get Ocean Height
`----------------------------------------------------
function Ocean_GetHeight(ix as float,iz as float)
   local rHeight as float
   local tOceanRoughness as float
   if AL_Ocean=1
      if Terrain_Enabled=1
         tOceanRoughness=(AL_OceanHeight-Terrain_GetHeight(ix,iz))/AL_OceanHeight
         tOceanRoughness=tOceanRoughness+(AL_OceanRoughness/100)
         if tOceanRoughness>1 then tOceanRoughness=1
         if tOceanRoughness<0 then tOceanRoughness=0
      endif
      local tScale as float
      tScale=1.0/AL_OceanScale.x
      Vector4Float(3).x=0:Vector4Float(3).y=0
      for i=0 to 3
         Vector4Float(1).x=(AL_OceanAmp(i).y*ix)+(AL_OceanDir(i).x/(1.0/tScale))
         Vector4Float(1).y=(AL_OceanAmp(i).y*iz)+(AL_OceanDir(i).y/(1.0/tScale))
         Vector4Integer(1).x=floor(Vector4Float(1).x*AL_OceanTextureSize.x)-(floor(Vector4Float(1).x)*AL_OceanTextureSize.x)
         Vector4Integer(1).y=floor(Vector4Float(1).y*AL_OceanTextureSize.y)-(floor(Vector4Float(1).y)*AL_OceanTextureSize.y)
         Vector4Float(2).x=AL_OceanTextureNormalX(Vector4Integer(1).x,Vector4Integer(1).y)
         Vector4Float(2).y=AL_OceanTextureNormalY(Vector4Integer(1).x,Vector4Integer(1).y)
         Vector4Float(2).x=(Vector4Float(2).x/255)*2-1
         Vector4Float(2).y=(Vector4Float(2).y/255)*2-1
         if i<2 then inc Vector4Float(3).x,AL_OceanAmp(i).x*Vector4Float(2).x*tOceanRoughness else inc Vector4Float(3).x,AL_OceanAmp(i).x*Vector4Float(2).x
         if i<2 then inc Vector4Float(3).y,AL_OceanAmp(i).x*Vector4Float(2).y*tOceanRoughness else inc Vector4Float(3).y,AL_OceanAmp(i).x*Vector4Float(2).y
         tScale=tScale*AL_OceanScale.y
      next i
      ix=ix+Vector4Float(3).x*AL_OceanDisplacement.y
      iz=iz+Vector4Float(3).y*AL_OceanDisplacement.y
      tScale=1.0/AL_OceanScale.x
      Vector4Float(3).x=0
      for i=0 to 3
         Vector4Float(1).x=(AL_OceanAmp(i).y*ix)+(AL_OceanDir(i).x/(1.0/tScale))
         Vector4Float(1).y=(AL_OceanAmp(i).y*iz)+(AL_OceanDir(i).y/(1.0/tScale))
         Vector4Integer(1).x=floor(Vector4Float(1).x*AL_OceanTextureSize.x)-(floor(Vector4Float(1).x)*AL_OceanTextureSize.x)
         Vector4Integer(1).y=floor(Vector4Float(1).y*AL_OceanTextureSize.y)-(floor(Vector4Float(1).y)*AL_OceanTextureSize.y)
         Vector4Float(2).x=AL_OceanTextureHeight(Vector4Integer(1).x,Vector4Integer(1).y)
         Vector4Float(2).x=(Vector4Float(2).x/255)*2-1
         if i<2 then inc Vector4Float(3).x,AL_OceanAmp(i).x*Vector4Float(2).x*tOceanRoughness else inc Vector4Float(3).x,AL_OceanAmp(i).x*Vector4Float(2).x
         tScale=tScale*AL_OceanScale.y
      next i
      rHeight=AL_OceanHeight+(Vector4Float(3).x*AL_OceanDisplacement.x)
   endif
endfunction rHeight

`----------------------------------------------------
`Update Ocean
   _Ocean_Update:
      if AL_OceanVisible=1
         local tWave as float
         local tWavetotal as float
         local tNormals as float
         local tScale as float
         local tAngle as float
         local tSpeed as float
         local tDir as Vec2float
         tWave=1
         tNormals=1
         tScale=1.0/AL_OceanScale.x
         tAngle=AL_OceanAngle.x
         tSpeed=1
         for i=0 to 5
            tWavetotal=tWavetotal+tWave
            tWave=tWave*AL_OceanScale.z
         next i
         tWave=1
         for i=0 to 5
            AL_OceanAmp(i).x=tWave/tWavetotal
            AL_OceanAmp(i).y=tScale
            AL_OceanAmp(i).w=tNormals
            tDir.x=cos(tAngle*57.2958)
            tDir.y=sin(tAngle*57.2958)
            inc AL_OceanDir(i).x,((tSpeed*AL_Timer)*AL_OceanSpeed.x)*tDir.x
            inc AL_OceanDir(i).y,((tSpeed*AL_Timer)*AL_OceanSpeed.x)*tDir.y
            if AL_OceanDir(i).x>1.0/tScale then AL_OceanDir(i).x=0
            if AL_OceanDir(i).y>1.0/tScale then AL_OceanDir(i).y=0
            AL_OceanDir(i).z=sin(-tAngle*57.2958)
            AL_OceanDir(i).w=cos(-tAngle*57.2958)
            set Vector4 Vector4(1),AL_OceanAmp(i).x,AL_OceanAmp(i).y,0,AL_OceanAmp(i).w
            set effect constant vector AL_OceanEffect,"OceanAmp"+str$(i),Vector4(1)
            set Vector4 Vector4(1),AL_OceanDir(i).x/(1.0/tScale),AL_OceanDir(i).y/(1.0/tScale),AL_OceanDir(i).z,AL_OceanDir(i).w
            set effect constant vector AL_OceanEffect,"OceanDir"+str$(i),Vector4(1)
            tWave=tWave*AL_OceanScale.z
            tNormals=tNormals*AL_OceanNormals.z
            tScale=tScale*AL_OceanScale.y
            inc tAngle,AL_OceanAngle.y
            tSpeed=tSpeed/AL_OceanSpeed.y
         next i
         position object AL_OceanObject,AL_CameraPos.x+(AL_CameraDir.x*160000),AL_CameraPos.y+(AL_CameraDir.y*160000),AL_CameraPos.z+(AL_CameraDir.z*160000)
         Vector4Float(1).x=AL_CameraPos.x+((64*AL_OceanSize)*AL_CameraDir.x)
         Vector4Float(1).y=AL_CameraPos.z+((64*AL_OceanSize)*AL_CameraDir.z)
         set Vector4 Vector4(1),floor(0.5+Vector4Float(1).x/(AL_OceanSize*2))*(AL_OceanSize*2),0,(floor(0.5+Vector4Float(1).y/(AL_OceanSize*2))*(AL_OceanSize*2)),0
         set effect constant vector AL_OceanEffect,"OceanPosition1",Vector4(1)
         set Vector4 Vector4(1),floor(0.5+Vector4Float(1).x/(AL_OceanSize*AL_OceanExtension))*(AL_OceanSize*AL_OceanExtension),0,(floor(0.5+Vector4Float(1).y/(AL_OceanSize*AL_OceanExtension))*(AL_OceanSize*AL_OceanExtension)),0
         set effect constant vector AL_OceanEffect,"OceanPosition2",Vector4(1)
         inc AL_OceanFoamSpeed.x,AL_OceanFoam.y*0.75*AL_Timer
         inc AL_OceanFoamSpeed.y,AL_OceanFoam.y*AL_Timer
         if AL_OceanFoamSpeed.x>1.0/(1.0/AL_OceanFoam.x) then AL_OceanFoamSpeed.x=0
         if AL_OceanFoamSpeed.y>1.0/(1.0/AL_OceanFoam.x) then AL_OceanFoamSpeed.y=0
         set vector4 Vector4(1),1.0/AL_OceanFoam.x,1.0/(AL_OceanFoam.x*0.75),AL_OceanFoamSpeed.x/(1.0/(1.0/AL_OceanFoam.x)),-AL_OceanFoamSpeed.y/(1.0/(1.0/AL_OceanFoam.x))
         set effect constant vector AL_OceanEffect,"OceanFoam",Vector4(1)
         if Terrain_Enabled=1
            for t=1 to 4:set effect constant float Terrain_Effect(t),"OceanHeight",AL_OceanHeight+AL_OceanWaveHeight:next t
         endif
         if AL_WaterUnder=10000
            position object AL_WaterFogObject,AL_CameraPos.x,AL_CameraPos.y-100000,AL_CameraPos.z
            set vector4 Vector4(1),AL_OceanFogRange,AL_OceanFogHeight,0,0
            set effect constant vector AL_WaterFogEffect,"WaterFogRange",Vector4(1)
            set vector4 Vector4(1),(AL_OceanFogColor1.x/255)^2.2,(AL_OceanFogColor1.y/255)^2.2,(AL_OceanFogColor1.z/255)^2.2,0
            set effect constant vector AL_WaterFogEffect,"WaterFogColor1",Vector4(1)
            set vector4 Vector4(1),(AL_OceanFogColor2.x/255)^2.2,(AL_OceanFogColor2.y/255)^2.2,(AL_OceanFogColor2.z/255)^2.2,0
            set effect constant vector AL_WaterFogEffect,"WaterFogColor2",Vector4(1)
            set effect constant float AL_WaterFogEffect,"WaterHeight",AL_OceanHeight+AL_OceanWaveHeight
         endif
      endif
   return










